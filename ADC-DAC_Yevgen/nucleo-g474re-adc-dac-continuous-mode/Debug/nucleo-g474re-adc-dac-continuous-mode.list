
nucleo-g474re-adc-dac-continuous-mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004158  08004158  00005158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004168  08004168  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004168  08004168  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800416c  0800416c  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004170  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800417c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800417c  00006110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ecb  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c5  00000000  00000000  00016f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  000191d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d78  00000000  00000000  0001a350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027217  00000000  00000000  0001b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127a5  00000000  00000000  000422df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010afcf  00000000  00000000  00054a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fa53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b4c  00000000  00000000  0015fa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001645e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004140 	.word	0x08004140

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004140 	.word	0x08004140

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb67 	bl	80008ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f85e 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9a8 	bl	8000578 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000228:	f000 f8a6 	bl	8000378 <MX_ADC1_Init>
  MX_TIM2_Init();
 800022c:	f000 f956 	bl	80004dc <MX_TIM2_Init>
  MX_DAC1_Init();
 8000230:	f000 f91a 	bl	8000468 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000234:	4820      	ldr	r0, [pc, #128]	@ (80002b8 <main+0xa0>)
 8000236:	f003 fbeb 	bl	8003a10 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 800023a:	4820      	ldr	r0, [pc, #128]	@ (80002bc <main+0xa4>)
 800023c:	f000 ff90 	bl	8001160 <HAL_ADC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000240:	2100      	movs	r1, #0
 8000242:	481f      	ldr	r0, [pc, #124]	@ (80002c0 <main+0xa8>)
 8000244:	f001 ffa6 	bl	8002194 <HAL_DAC_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // TIM2 prescaler = 0, T = 1/120MHz = 8.33(3)ns
	  timerValueAtStart = TIM2->CNT;			// read TIM2 counter at begin
 8000248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800024e:	4a1d      	ldr	r2, [pc, #116]	@ (80002c4 <main+0xac>)
 8000250:	6013      	str	r3, [r2, #0]

		while (!((ADC1->ISR) & ADC_ISR_EOC)){;} // wait for EOC (end of conversion) flag is set
 8000252:	bf00      	nop
 8000254:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f8      	beq.n	8000254 <main+0x3c>

		adcResult = ADC1->DR;					// read ADC value
 8000262:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	b29a      	uxth	r2, r3
 800026a:	4b17      	ldr	r3, [pc, #92]	@ (80002c8 <main+0xb0>)
 800026c:	801a      	strh	r2, [r3, #0]
//		adcResult = HAL_ADC_GetValue(&hadc1);   //read ADC value with HAL

		timerValueAfterADC = TIM2->CNT;			//read TIM2 counter after ADC
 800026e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000274:	4a15      	ldr	r2, [pc, #84]	@ (80002cc <main+0xb4>)
 8000276:	6013      	str	r3, [r2, #0]
		timeADC = timerValueAfterADC - timerValueAtStart;
 8000278:	4b14      	ldr	r3, [pc, #80]	@ (80002cc <main+0xb4>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <main+0xac>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	4a13      	ldr	r2, [pc, #76]	@ (80002d0 <main+0xb8>)
 8000284:	6013      	str	r3, [r2, #0]

		DAC1->DHR12R1 = adcResult;				// pass adcResult to DAC
 8000286:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <main+0xb0>)
 8000288:	881a      	ldrh	r2, [r3, #0]
 800028a:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <main+0xbc>)
 800028c:	609a      	str	r2, [r3, #8]
		while (! ((DAC1->SR) & DAC_SR_DAC1RDY)){;} // wait for DAC_SR_DAC1RDY (dac1 status register DAC channel1) is ready to accept the trigger or output data
 800028e:	bf00      	nop
 8000290:	4b10      	ldr	r3, [pc, #64]	@ (80002d4 <main+0xbc>)
 8000292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <main+0x78>
//		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adcResult);  // pass adcResult to DAC with HAL

		timerValueAfterDAC = TIM2->CNT;			//read TIM2 counter after DAC
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002a2:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <main+0xc0>)
 80002a4:	6013      	str	r3, [r2, #0]
		timeDAC = timerValueAfterDAC - timerValueAfterADC;
 80002a6:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <main+0xc0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <main+0xb4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	1ad3      	subs	r3, r2, r3
 80002b0:	4a0a      	ldr	r2, [pc, #40]	@ (80002dc <main+0xc4>)
 80002b2:	6013      	str	r3, [r2, #0]
	  timerValueAtStart = TIM2->CNT;			// read TIM2 counter at begin
 80002b4:	e7c8      	b.n	8000248 <main+0x30>
 80002b6:	bf00      	nop
 80002b8:	200000a8 	.word	0x200000a8
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000094 	.word	0x20000094
 80002c4:	200000f8 	.word	0x200000f8
 80002c8:	200000f4 	.word	0x200000f4
 80002cc:	200000fc 	.word	0x200000fc
 80002d0:	20000104 	.word	0x20000104
 80002d4:	50000800 	.word	0x50000800
 80002d8:	20000100 	.word	0x20000100
 80002dc:	20000108 	.word	0x20000108

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b094      	sub	sp, #80	@ 0x50
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2238      	movs	r2, #56	@ 0x38
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fefa 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000302:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000306:	f002 fb27 	bl	8002958 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000312:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000314:	2340      	movs	r3, #64	@ 0x40
 8000316:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	2302      	movs	r3, #2
 800031a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031c:	2302      	movs	r3, #2
 800031e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000320:	2301      	movs	r3, #1
 8000322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000324:	230f      	movs	r3, #15
 8000326:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000328:	2302      	movs	r3, #2
 800032a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800032c:	2302      	movs	r3, #2
 800032e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000330:	2302      	movs	r3, #2
 8000332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f002 fbc1 	bl	8002ac0 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000344:	f000 f986 	bl	8000654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	2303      	movs	r3, #3
 800034e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2103      	movs	r1, #3
 8000360:	4618      	mov	r0, r3
 8000362:	f002 febf 	bl	80030e4 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800036c:	f000 f972 	bl	8000654 <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3750      	adds	r7, #80	@ 0x50
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08c      	sub	sp, #48	@ 0x30
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800037e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2220      	movs	r2, #32
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f003 fea9 	bl	80040e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000396:	4b32      	ldr	r3, [pc, #200]	@ (8000460 <MX_ADC1_Init+0xe8>)
 8000398:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800039c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800039e:	4b30      	ldr	r3, [pc, #192]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80003a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b8:	4b29      	ldr	r3, [pc, #164]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003be:	4b28      	ldr	r3, [pc, #160]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003c0:	2208      	movs	r2, #8
 80003c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003c4:	4b26      	ldr	r3, [pc, #152]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003ca:	4b25      	ldr	r3, [pc, #148]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003d0:	4b23      	ldr	r3, [pc, #140]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d6:	4b22      	ldr	r3, [pc, #136]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003de:	4b20      	ldr	r3, [pc, #128]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003fa:	4b19      	ldr	r3, [pc, #100]	@ (8000460 <MX_ADC1_Init+0xe8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000402:	4817      	ldr	r0, [pc, #92]	@ (8000460 <MX_ADC1_Init+0xe8>)
 8000404:	f000 fcf0 	bl	8000de8 <HAL_ADC_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800040e:	f000 f921 	bl	8000654 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000412:	2300      	movs	r3, #0
 8000414:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800041a:	4619      	mov	r1, r3
 800041c:	4810      	ldr	r0, [pc, #64]	@ (8000460 <MX_ADC1_Init+0xe8>)
 800041e:	f001 fc7f 	bl	8001d20 <HAL_ADCEx_MultiModeConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000428:	f000 f914 	bl	8000654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800042c:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <MX_ADC1_Init+0xec>)
 800042e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000430:	2306      	movs	r3, #6
 8000432:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000438:	237f      	movs	r3, #127	@ 0x7f
 800043a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800043c:	2304      	movs	r3, #4
 800043e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_ADC1_Init+0xe8>)
 800044a:	f000 ff6d 	bl	8001328 <HAL_ADC_ConfigChannel>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000454:	f000 f8fe 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	3730      	adds	r7, #48	@ 0x30
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000028 	.word	0x20000028
 8000464:	04300002 	.word	0x04300002

08000468 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08c      	sub	sp, #48	@ 0x30
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800046e:	463b      	mov	r3, r7
 8000470:	2230      	movs	r2, #48	@ 0x30
 8000472:	2100      	movs	r1, #0
 8000474:	4618      	mov	r0, r3
 8000476:	f003 fe37 	bl	80040e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800047a:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <MX_DAC1_Init+0x6c>)
 800047c:	4a16      	ldr	r2, [pc, #88]	@ (80004d8 <MX_DAC1_Init+0x70>)
 800047e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000480:	4814      	ldr	r0, [pc, #80]	@ (80004d4 <MX_DAC1_Init+0x6c>)
 8000482:	f001 fe64 	bl	800214e <HAL_DAC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800048c:	f000 f8e2 	bl	8000654 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000490:	2302      	movs	r3, #2
 8000492:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80004a8:	2302      	movs	r3, #2
 80004aa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80004ac:	2301      	movs	r3, #1
 80004ae:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	4619      	mov	r1, r3
 80004ba:	4806      	ldr	r0, [pc, #24]	@ (80004d4 <MX_DAC1_Init+0x6c>)
 80004bc:	f001 fed6 	bl	800226c <HAL_DAC_ConfigChannel>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80004c6:	f000 f8c5 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	3730      	adds	r7, #48	@ 0x30
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000094 	.word	0x20000094
 80004d8:	50000800 	.word	0x50000800

080004dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <MX_TIM2_Init+0x98>)
 80004fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000500:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000502:	4b1c      	ldr	r3, [pc, #112]	@ (8000574 <MX_TIM2_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000508:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <MX_TIM2_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <MX_TIM2_Init+0x98>)
 8000510:	f04f 32ff 	mov.w	r2, #4294967295
 8000514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000516:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <MX_TIM2_Init+0x98>)
 8000518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800051c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <MX_TIM2_Init+0x98>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000524:	4813      	ldr	r0, [pc, #76]	@ (8000574 <MX_TIM2_Init+0x98>)
 8000526:	f003 fa1b 	bl	8003960 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000530:	f000 f890 	bl	8000654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	480c      	ldr	r0, [pc, #48]	@ (8000574 <MX_TIM2_Init+0x98>)
 8000542:	f003 fad5 	bl	8003af0 <HAL_TIM_ConfigClockSource>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800054c:	f000 f882 	bl	8000654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	@ (8000574 <MX_TIM2_Init+0x98>)
 800055e:	f003 fd2d 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000568:	f000 f874 	bl	8000654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000a8 	.word	0x200000a8

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	4b2f      	ldr	r3, [pc, #188]	@ (800064c <MX_GPIO_Init+0xd4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a2e      	ldr	r2, [pc, #184]	@ (800064c <MX_GPIO_Init+0xd4>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b2c      	ldr	r3, [pc, #176]	@ (800064c <MX_GPIO_Init+0xd4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	4b29      	ldr	r3, [pc, #164]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a28      	ldr	r2, [pc, #160]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005ac:	f043 0320 	orr.w	r3, r3, #32
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b26      	ldr	r3, [pc, #152]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0320 	and.w	r3, r3, #32
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b23      	ldr	r3, [pc, #140]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a22      	ldr	r2, [pc, #136]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_GPIO_Init+0xd4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f6:	f002 f973 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000600:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480f      	ldr	r0, [pc, #60]	@ (8000650 <MX_GPIO_Init+0xd8>)
 8000612:	f001 ffe3 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000630:	f001 ffd4 	bl	80025dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2028      	movs	r0, #40	@ 0x28
 800063a:	f001 fd54 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800063e:	2028      	movs	r0, #40	@ 0x28
 8000640:	f001 fd6b 	bl	800211a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	@ 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	48000800 	.word	0x48000800

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
}
 800065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <Error_Handler+0x8>

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <HAL_MspInit+0x44>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800066a:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <HAL_MspInit+0x44>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6613      	str	r3, [r2, #96]	@ 0x60
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <HAL_MspInit+0x44>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <HAL_MspInit+0x44>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000682:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <HAL_MspInit+0x44>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000688:	6593      	str	r3, [r2, #88]	@ 0x58
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_MspInit+0x44>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800068e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000696:	f002 fa03 	bl	8002aa0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09e      	sub	sp, #120	@ 0x78
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2254      	movs	r2, #84	@ 0x54
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fd0d 	bl	80040e8 <memset>
  if(hadc->Instance==ADC1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006d6:	d134      	bne.n	8000742 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 feeb 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006f4:	f7ff ffae 	bl	8000654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_ADC_MspInit+0xa4>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	4a13      	ldr	r2, [pc, #76]	@ (800074c <HAL_ADC_MspInit+0xa4>)
 80006fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <HAL_ADC_MspInit+0xa4>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <HAL_ADC_MspInit+0xa4>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000714:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <HAL_ADC_MspInit+0xa4>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <HAL_ADC_MspInit+0xa4>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000728:	2301      	movs	r3, #1
 800072a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072c:	2303      	movs	r3, #3
 800072e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000738:	4619      	mov	r1, r3
 800073a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073e:	f001 ff4d 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000742:	bf00      	nop
 8000744:	3778      	adds	r7, #120	@ 0x78
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <HAL_DAC_MspInit+0x74>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d124      	bne.n	80007bc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a0e      	ldr	r2, [pc, #56]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <HAL_DAC_MspInit+0x78>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a2:	2310      	movs	r3, #16
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f001 ff10 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	50000800 	.word	0x50000800
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007dc:	d10b      	bne.n	80007f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_TIM_Base_MspInit+0x38>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <HAL_TIM_Base_MspInit+0x38>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_TIM_Base_MspInit+0x38>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f899 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800086a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800086e:	f002 f84f 	bl	8002910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a0:	f7ff ffea 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	@ (80008dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	@ (80008e8 <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f003 fc15 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ce:	f7ff fca3 	bl	8000218 <main>

080008d2 <LoopForever>:

LoopForever:
    b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   r0, =_estack
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e0:	08004170 	.word	0x08004170
  ldr r2, =_sbss
 80008e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e8:	20000110 	.word	0x20000110

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>

080008ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f001 fbe9 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f80e 	bl	8000920 <HAL_InitTick>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	e001      	b.n	8000914 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000910:	f7ff fea6 	bl	8000660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000914:	79fb      	ldrb	r3, [r7, #7]

}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <HAL_InitTick+0x68>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d022      	beq.n	800097a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <HAL_InitTick+0x6c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <HAL_InitTick+0x68>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000940:	fbb1 f3f3 	udiv	r3, r1, r3
 8000944:	fbb2 f3f3 	udiv	r3, r2, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fbf4 	bl	8002136 <HAL_SYSTICK_Config>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10f      	bne.n	8000974 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b0f      	cmp	r3, #15
 8000958:	d809      	bhi.n	800096e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095a:	2200      	movs	r2, #0
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	f04f 30ff 	mov.w	r0, #4294967295
 8000962:	f001 fbc0 	bl	80020e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <HAL_InitTick+0x70>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e007      	b.n	800097e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e004      	b.n	800097e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	e001      	b.n	800097e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000008 	.word	0x20000008
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_IncTick+0x1c>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_IncTick+0x20>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a03      	ldr	r2, [pc, #12]	@ (80009b0 <HAL_IncTick+0x1c>)
 80009a4:	6013      	str	r3, [r2, #0]
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	2000010c 	.word	0x2000010c
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2000010c 	.word	0x2000010c

080009d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	431a      	orrs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	609a      	str	r2, [r3, #8]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3360      	adds	r3, #96	@ 0x60
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <LL_ADC_SetOffset+0x44>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a70:	bf00      	nop
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	03fff000 	.word	0x03fff000

08000a80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3360      	adds	r3, #96	@ 0x60
 8000a8e:	461a      	mov	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3360      	adds	r3, #96	@ 0x60
 8000abc:	461a      	mov	r2, r3
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ad6:	bf00      	nop
 8000ad8:	371c      	adds	r7, #28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b087      	sub	sp, #28
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3360      	adds	r3, #96	@ 0x60
 8000af2:	461a      	mov	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	431a      	orrs	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000b0c:	bf00      	nop
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3360      	adds	r3, #96	@ 0x60
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b42:	bf00      	nop
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	615a      	str	r2, [r3, #20]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3330      	adds	r3, #48	@ 0x30
 8000b84:	461a      	mov	r2, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	4413      	add	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	f003 031f 	and.w	r3, r3, #31
 8000b9e:	211f      	movs	r1, #31
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	0e9b      	lsrs	r3, r3, #26
 8000bac:	f003 011f 	and.w	r1, r3, #31
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3314      	adds	r3, #20
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	0e5b      	lsrs	r3, r3, #25
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	4413      	add	r3, r2
 8000bea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	0d1b      	lsrs	r3, r3, #20
 8000bf4:	f003 031f 	and.w	r3, r3, #31
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	0d1b      	lsrs	r3, r3, #20
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	431a      	orrs	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c16:	bf00      	nop
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	401a      	ands	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0318 	and.w	r3, r3, #24
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c48:	40d9      	lsrs	r1, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	400b      	ands	r3, r1
 8000c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c52:	431a      	orrs	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	0007ffff 	.word	0x0007ffff

08000c6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 031f 	and.w	r3, r3, #31
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6093      	str	r3, [r2, #8]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cc0:	d101      	bne.n	8000cc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ce8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d10:	d101      	bne.n	8000d16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <LL_ADC_IsEnabled+0x18>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <LL_ADC_IsEnabled+0x1a>
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d86:	f043 0204 	orr.w	r2, r3, #4
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d101      	bne.n	8000db2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d101      	bne.n	8000dd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e1a9      	b.n	8001156 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d109      	bne.n	8000e24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fc49 	bl	80006a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff3f 	bl	8000cac <LL_ADC_IsDeepPowerDownEnabled>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff25 	bl	8000c88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff5a 	bl	8000cfc <LL_ADC_IsInternalRegulatorEnabled>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff3e 	bl	8000cd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e58:	4b9c      	ldr	r3, [pc, #624]	@ (80010cc <HAL_ADC_Init+0x2e4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	099b      	lsrs	r3, r3, #6
 8000e5e:	4a9c      	ldr	r2, [pc, #624]	@ (80010d0 <HAL_ADC_Init+0x2e8>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	099b      	lsrs	r3, r3, #6
 8000e66:	3301      	adds	r3, #1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e6c:	e002      	b.n	8000e74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f9      	bne.n	8000e6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff3c 	bl	8000cfc <LL_ADC_IsInternalRegulatorEnabled>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff75 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 8000eb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8142 	bne.w	8001144 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 813e 	bne.w	8001144 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ecc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ed0:	f043 0202 	orr.w	r2, r3, #2
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff35 	bl	8000d4c <LL_ADC_IsEnabled>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d141      	bne.n	8000f6c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ef0:	d004      	beq.n	8000efc <HAL_ADC_Init+0x114>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a77      	ldr	r2, [pc, #476]	@ (80010d4 <HAL_ADC_Init+0x2ec>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d10f      	bne.n	8000f1c <HAL_ADC_Init+0x134>
 8000efc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000f00:	f7ff ff24 	bl	8000d4c <LL_ADC_IsEnabled>
 8000f04:	4604      	mov	r4, r0
 8000f06:	4873      	ldr	r0, [pc, #460]	@ (80010d4 <HAL_ADC_Init+0x2ec>)
 8000f08:	f7ff ff20 	bl	8000d4c <LL_ADC_IsEnabled>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf0c      	ite	eq
 8000f14:	2301      	moveq	r3, #1
 8000f16:	2300      	movne	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	e012      	b.n	8000f42 <HAL_ADC_Init+0x15a>
 8000f1c:	486e      	ldr	r0, [pc, #440]	@ (80010d8 <HAL_ADC_Init+0x2f0>)
 8000f1e:	f7ff ff15 	bl	8000d4c <LL_ADC_IsEnabled>
 8000f22:	4604      	mov	r4, r0
 8000f24:	486d      	ldr	r0, [pc, #436]	@ (80010dc <HAL_ADC_Init+0x2f4>)
 8000f26:	f7ff ff11 	bl	8000d4c <LL_ADC_IsEnabled>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	486c      	ldr	r0, [pc, #432]	@ (80010e0 <HAL_ADC_Init+0x2f8>)
 8000f30:	f7ff ff0c 	bl	8000d4c <LL_ADC_IsEnabled>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4323      	orrs	r3, r4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d012      	beq.n	8000f6c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f4e:	d004      	beq.n	8000f5a <HAL_ADC_Init+0x172>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5f      	ldr	r2, [pc, #380]	@ (80010d4 <HAL_ADC_Init+0x2ec>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x176>
 8000f5a:	4a62      	ldr	r2, [pc, #392]	@ (80010e4 <HAL_ADC_Init+0x2fc>)
 8000f5c:	e000      	b.n	8000f60 <HAL_ADC_Init+0x178>
 8000f5e:	4a62      	ldr	r2, [pc, #392]	@ (80010e8 <HAL_ADC_Init+0x300>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f7ff fd32 	bl	80009d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7f5b      	ldrb	r3, [r3, #29]
 8000f70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000f7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000f82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d106      	bne.n	8000fa8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	045b      	lsls	r3, r3, #17
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d009      	beq.n	8000fc4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	4b48      	ldr	r3, [pc, #288]	@ (80010ec <HAL_ADC_Init+0x304>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fee4 	bl	8000dc0 <LL_ADC_INJ_IsConversionOngoing>
 8000ff8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d17f      	bne.n	8001100 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d17c      	bne.n	8001100 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800100a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001012:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001022:	f023 0302 	bic.w	r3, r3, #2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	430b      	orrs	r3, r1
 800102e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d017      	beq.n	8001068 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001046:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001050:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6911      	ldr	r1, [r2, #16]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	430b      	orrs	r3, r1
 8001062:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001066:	e013      	b.n	8001090 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001076:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800108c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001096:	2b01      	cmp	r3, #1
 8001098:	d12a      	bne.n	80010f0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80010a4:	f023 0304 	bic.w	r3, r3, #4
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80010b0:	4311      	orrs	r1, r2
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010b6:	4311      	orrs	r1, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010bc:	430a      	orrs	r2, r1
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	e019      	b.n	8001100 <HAL_ADC_Init+0x318>
 80010cc:	20000000 	.word	0x20000000
 80010d0:	053e2d63 	.word	0x053e2d63
 80010d4:	50000100 	.word	0x50000100
 80010d8:	50000400 	.word	0x50000400
 80010dc:	50000500 	.word	0x50000500
 80010e0:	50000600 	.word	0x50000600
 80010e4:	50000300 	.word	0x50000300
 80010e8:	50000700 	.word	0x50000700
 80010ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10c      	bne.n	8001122 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f023 010f 	bic.w	r1, r3, #15
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001120:	e007      	b.n	8001132 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 020f 	bic.w	r2, r2, #15
 8001130:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001136:	f023 0303 	bic.w	r3, r3, #3
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001142:	e007      	b.n	8001154 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001148:	f043 0210 	orr.w	r2, r3, #16
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001154:	7ffb      	ldrb	r3, [r7, #31]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	@ 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	bf00      	nop

08001160 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001170:	d004      	beq.n	800117c <HAL_ADC_Start+0x1c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a67      	ldr	r2, [pc, #412]	@ (8001314 <HAL_ADC_Start+0x1b4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_ADC_Start+0x20>
 800117c:	4b66      	ldr	r3, [pc, #408]	@ (8001318 <HAL_ADC_Start+0x1b8>)
 800117e:	e000      	b.n	8001182 <HAL_ADC_Start+0x22>
 8001180:	4b66      	ldr	r3, [pc, #408]	@ (800131c <HAL_ADC_Start+0x1bc>)
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fd72 	bl	8000c6c <LL_ADC_GetMultimode>
 8001188:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fe03 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80b4 	bne.w	8001304 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_ADC_Start+0x4a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e0af      	b.n	800130a <HAL_ADC_Start+0x1aa>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fcf8 	bl	8001ba8 <ADC_Enable>
 80011b8:	4603      	mov	r3, r0
 80011ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 809b 	bne.w	80012fa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001314 <HAL_ADC_Start+0x1b4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d009      	beq.n	80011f6 <HAL_ADC_Start+0x96>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_ADC_Start+0x1c0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d002      	beq.n	80011f2 <HAL_ADC_Start+0x92>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	e003      	b.n	80011fa <HAL_ADC_Start+0x9a>
 80011f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001324 <HAL_ADC_Start+0x1c4>)
 80011f4:	e001      	b.n	80011fa <HAL_ADC_Start+0x9a>
 80011f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d002      	beq.n	8001208 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800121c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001220:	d106      	bne.n	8001230 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001226:	f023 0206 	bic.w	r2, r3, #6
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	661a      	str	r2, [r3, #96]	@ 0x60
 800122e:	e002      	b.n	8001236 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	221c      	movs	r2, #28
 800123c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a32      	ldr	r2, [pc, #200]	@ (8001314 <HAL_ADC_Start+0x1b4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d009      	beq.n	8001264 <HAL_ADC_Start+0x104>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a32      	ldr	r2, [pc, #200]	@ (8001320 <HAL_ADC_Start+0x1c0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d002      	beq.n	8001260 <HAL_ADC_Start+0x100>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	e003      	b.n	8001268 <HAL_ADC_Start+0x108>
 8001260:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <HAL_ADC_Start+0x1c4>)
 8001262:	e001      	b.n	8001268 <HAL_ADC_Start+0x108>
 8001264:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4293      	cmp	r3, r2
 800126e:	d008      	beq.n	8001282 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b05      	cmp	r3, #5
 800127a:	d002      	beq.n	8001282 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2b09      	cmp	r3, #9
 8001280:	d114      	bne.n	80012ac <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001294:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001298:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fd64 	bl	8000d72 <LL_ADC_REG_StartConversion>
 80012aa:	e02d      	b.n	8001308 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <HAL_ADC_Start+0x1b4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d009      	beq.n	80012d6 <HAL_ADC_Start+0x176>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a16      	ldr	r2, [pc, #88]	@ (8001320 <HAL_ADC_Start+0x1c0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d002      	beq.n	80012d2 <HAL_ADC_Start+0x172>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	e003      	b.n	80012da <HAL_ADC_Start+0x17a>
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_ADC_Start+0x1c4>)
 80012d4:	e001      	b.n	80012da <HAL_ADC_Start+0x17a>
 80012d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80012da:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00f      	beq.n	8001308 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012f8:	e006      	b.n	8001308 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001302:	e001      	b.n	8001308 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001304:	2302      	movs	r3, #2
 8001306:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001308:	7dfb      	ldrb	r3, [r7, #23]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	50000100 	.word	0x50000100
 8001318:	50000300 	.word	0x50000300
 800131c:	50000700 	.word	0x50000700
 8001320:	50000500 	.word	0x50000500
 8001324:	50000400 	.word	0x50000400

08001328 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0b6      	sub	sp, #216	@ 0xd8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001342:	2b01      	cmp	r3, #1
 8001344:	d102      	bne.n	800134c <HAL_ADC_ConfigChannel+0x24>
 8001346:	2302      	movs	r3, #2
 8001348:	f000 bc13 	b.w	8001b72 <HAL_ADC_ConfigChannel+0x84a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fd1e 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 83f3 	bne.w	8001b4c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	f7ff fbfe 	bl	8000b74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fd0c 	bl	8000d9a <LL_ADC_REG_IsConversionOngoing>
 8001382:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fd18 	bl	8000dc0 <LL_ADC_INJ_IsConversionOngoing>
 8001390:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001394:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 81d9 	bne.w	8001750 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800139e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 81d4 	bne.w	8001750 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013b0:	d10f      	bne.n	80013d2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fc05 	bl	8000bcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fbbf 	bl	8000b4e <LL_ADC_SetSamplingTimeCommonConfig>
 80013d0:	e00e      	b.n	80013f0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	461a      	mov	r2, r3
 80013e0:	f7ff fbf4 	bl	8000bcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fbaf 	bl	8000b4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d022      	beq.n	8001458 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	6919      	ldr	r1, [r3, #16]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001422:	f7ff fb09 	bl	8000a38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	461a      	mov	r2, r3
 8001434:	f7ff fb55 	bl	8000ae2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001444:	2b01      	cmp	r3, #1
 8001446:	d102      	bne.n	800144e <HAL_ADC_ConfigChannel+0x126>
 8001448:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800144c:	e000      	b.n	8001450 <HAL_ADC_ConfigChannel+0x128>
 800144e:	2300      	movs	r3, #0
 8001450:	461a      	mov	r2, r3
 8001452:	f7ff fb61 	bl	8000b18 <LL_ADC_SetOffsetSaturation>
 8001456:	e17b      	b.n	8001750 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb0e 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x15c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb03 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	0e9b      	lsrs	r3, r3, #26
 800147e:	f003 021f 	and.w	r2, r3, #31
 8001482:	e01e      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x19a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff faf8 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80014b2:	2320      	movs	r3, #32
 80014b4:	e004      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80014b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <HAL_ADC_ConfigChannel+0x1b2>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	0e9b      	lsrs	r3, r3, #26
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	e018      	b.n	800150c <HAL_ADC_ConfigChannel+0x1e4>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80014ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80014f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80014fe:	2320      	movs	r3, #32
 8001500:	e004      	b.n	800150c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800150c:	429a      	cmp	r2, r3
 800150e:	d106      	bne.n	800151e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fac7 	bl	8000aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff faab 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10a      	bne.n	800154a <HAL_ADC_ConfigChannel+0x222>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff faa0 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	0e9b      	lsrs	r3, r3, #26
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	e01e      	b.n	8001588 <HAL_ADC_ConfigChannel+0x260>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fa95 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800156c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001578:	2320      	movs	r3, #32
 800157a:	e004      	b.n	8001586 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800157c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x278>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0e9b      	lsrs	r3, r3, #26
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	e018      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x2aa>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80015b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80015bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e004      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80015c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d106      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	2101      	movs	r1, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa64 	bl	8000aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2102      	movs	r1, #2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fa48 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10a      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x2e8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2102      	movs	r1, #2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fa3d 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	0e9b      	lsrs	r3, r3, #26
 800160a:	f003 021f 	and.w	r2, r3, #31
 800160e:	e01e      	b.n	800164e <HAL_ADC_ConfigChannel+0x326>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2102      	movs	r1, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fa32 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800162e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800163e:	2320      	movs	r3, #32
 8001640:	e004      	b.n	800164c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001642:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x33e>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0e9b      	lsrs	r3, r3, #26
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	e016      	b.n	8001694 <HAL_ADC_ConfigChannel+0x36c>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800167a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800167e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001686:	2320      	movs	r3, #32
 8001688:	e004      	b.n	8001694 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800168a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001694:	429a      	cmp	r2, r3
 8001696:	d106      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	2102      	movs	r1, #2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fa03 	bl	8000aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2103      	movs	r1, #3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f9e7 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10a      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x3aa>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2103      	movs	r1, #3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f9dc 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	0e9b      	lsrs	r3, r3, #26
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	e017      	b.n	8001702 <HAL_ADC_ConfigChannel+0x3da>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2103      	movs	r1, #3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff f9d1 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80016ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80016ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80016f4:	2320      	movs	r3, #32
 80016f6:	e003      	b.n	8001700 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80016f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170a:	2b00      	cmp	r3, #0
 800170c:	d105      	bne.n	800171a <HAL_ADC_ConfigChannel+0x3f2>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0e9b      	lsrs	r3, r3, #26
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	e011      	b.n	800173e <HAL_ADC_ConfigChannel+0x416>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800172a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800172c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001732:	2320      	movs	r3, #32
 8001734:	e003      	b.n	800173e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800173e:	429a      	cmp	r2, r3
 8001740:	d106      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	2103      	movs	r1, #3
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f9ae 	bl	8000aac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff faf9 	bl	8000d4c <LL_ADC_IsEnabled>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	f040 813d 	bne.w	80019dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	461a      	mov	r2, r3
 8001770:	f7ff fa58 	bl	8000c24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4aa2      	ldr	r2, [pc, #648]	@ (8001a04 <HAL_ADC_ConfigChannel+0x6dc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	f040 812e 	bne.w	80019dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10b      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x480>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0e9b      	lsrs	r3, r3, #26
 8001796:	3301      	adds	r3, #1
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2b09      	cmp	r3, #9
 800179e:	bf94      	ite	ls
 80017a0:	2301      	movls	r3, #1
 80017a2:	2300      	movhi	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e019      	b.n	80017dc <HAL_ADC_ConfigChannel+0x4b4>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80017b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80017ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80017c0:	2320      	movs	r3, #32
 80017c2:	e003      	b.n	80017cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80017c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	2b09      	cmp	r3, #9
 80017d4:	bf94      	ite	ls
 80017d6:	2301      	movls	r3, #1
 80017d8:	2300      	movhi	r3, #0
 80017da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d079      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x4d4>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0e9b      	lsrs	r3, r3, #26
 80017f2:	3301      	adds	r3, #1
 80017f4:	069b      	lsls	r3, r3, #26
 80017f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017fa:	e015      	b.n	8001828 <HAL_ADC_ConfigChannel+0x500>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800180a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800180c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800180e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001814:	2320      	movs	r3, #32
 8001816:	e003      	b.n	8001820 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3301      	adds	r3, #1
 8001822:	069b      	lsls	r3, r3, #26
 8001824:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x520>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0e9b      	lsrs	r3, r3, #26
 800183a:	3301      	adds	r3, #1
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	e017      	b.n	8001878 <HAL_ADC_ConfigChannel+0x550>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001858:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800185a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001860:	2320      	movs	r3, #32
 8001862:	e003      	b.n	800186c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	3301      	adds	r3, #1
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	ea42 0103 	orr.w	r1, r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10a      	bne.n	800189e <HAL_ADC_ConfigChannel+0x576>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0e9b      	lsrs	r3, r3, #26
 800188e:	3301      	adds	r3, #1
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	051b      	lsls	r3, r3, #20
 800189c:	e018      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x5a8>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80018ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80018b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80018b6:	2320      	movs	r3, #32
 80018b8:	e003      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80018ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d0:	430b      	orrs	r3, r1
 80018d2:	e07e      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d107      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x5c8>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	3301      	adds	r3, #1
 80018e8:	069b      	lsls	r3, r3, #26
 80018ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018ee:	e015      	b.n	800191c <HAL_ADC_ConfigChannel+0x5f4>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80018fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001900:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001908:	2320      	movs	r3, #32
 800190a:	e003      	b.n	8001914 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800190c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ADC_ConfigChannel+0x614>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	3301      	adds	r3, #1
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	e017      	b.n	800196c <HAL_ADC_ConfigChannel+0x644>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	61fb      	str	r3, [r7, #28]
  return result;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001954:	2320      	movs	r3, #32
 8001956:	e003      	b.n	8001960 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	ea42 0103 	orr.w	r1, r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x670>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	3301      	adds	r3, #1
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	3b1e      	subs	r3, #30
 8001990:	051b      	lsls	r3, r3, #20
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001996:	e01b      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x6a8>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	613b      	str	r3, [r7, #16]
  return result;
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80019b0:	2320      	movs	r3, #32
 80019b2:	e003      	b.n	80019bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f003 021f 	and.w	r2, r3, #31
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	3b1e      	subs	r3, #30
 80019ca:	051b      	lsls	r3, r3, #20
 80019cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff f8f8 	bl	8000bcc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_ADC_ConfigChannel+0x6e0>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80be 	beq.w	8001b66 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019f2:	d004      	beq.n	80019fe <HAL_ADC_ConfigChannel+0x6d6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_ADC_ConfigChannel+0x6e4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10a      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x6ec>
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <HAL_ADC_ConfigChannel+0x6e8>)
 8001a00:	e009      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x6ee>
 8001a02:	bf00      	nop
 8001a04:	407f0000 	.word	0x407f0000
 8001a08:	80080000 	.word	0x80080000
 8001a0c:	50000100 	.word	0x50000100
 8001a10:	50000300 	.word	0x50000300
 8001a14:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <HAL_ADC_ConfigChannel+0x854>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f800 	bl	8000a1c <LL_ADC_GetCommonPathInternalCh>
 8001a1c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a56      	ldr	r2, [pc, #344]	@ (8001b80 <HAL_ADC_ConfigChannel+0x858>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d004      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0x70c>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a55      	ldr	r2, [pc, #340]	@ (8001b84 <HAL_ADC_ConfigChannel+0x85c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d13a      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d134      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a48:	d005      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x72e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b88 <HAL_ADC_ConfigChannel+0x860>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	f040 8085 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a5e:	d004      	beq.n	8001a6a <HAL_ADC_ConfigChannel+0x742>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_ADC_ConfigChannel+0x864>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x746>
 8001a6a:	4a49      	ldr	r2, [pc, #292]	@ (8001b90 <HAL_ADC_ConfigChannel+0x868>)
 8001a6c:	e000      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x748>
 8001a6e:	4a43      	ldr	r2, [pc, #268]	@ (8001b7c <HAL_ADC_ConfigChannel+0x854>)
 8001a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7fe ffbb 	bl	80009f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a80:	4b44      	ldr	r3, [pc, #272]	@ (8001b94 <HAL_ADC_ConfigChannel+0x86c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	099b      	lsrs	r3, r3, #6
 8001a86:	4a44      	ldr	r2, [pc, #272]	@ (8001b98 <HAL_ADC_ConfigChannel+0x870>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001aa8:	e05a      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a3b      	ldr	r2, [pc, #236]	@ (8001b9c <HAL_ADC_ConfigChannel+0x874>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d125      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11f      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a31      	ldr	r2, [pc, #196]	@ (8001b8c <HAL_ADC_ConfigChannel+0x864>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d104      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x7ac>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a34      	ldr	r2, [pc, #208]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x878>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d047      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001adc:	d004      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x7c0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b8c <HAL_ADC_ConfigChannel+0x864>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x7c4>
 8001ae8:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <HAL_ADC_ConfigChannel+0x868>)
 8001aea:	e000      	b.n	8001aee <HAL_ADC_ConfigChannel+0x7c6>
 8001aec:	4a23      	ldr	r2, [pc, #140]	@ (8001b7c <HAL_ADC_ConfigChannel+0x854>)
 8001aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f7fe ff7c 	bl	80009f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001afe:	e031      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a27      	ldr	r2, [pc, #156]	@ (8001ba4 <HAL_ADC_ConfigChannel+0x87c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12d      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d127      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_ADC_ConfigChannel+0x864>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d022      	beq.n	8001b66 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b28:	d004      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0x80c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a17      	ldr	r2, [pc, #92]	@ (8001b8c <HAL_ADC_ConfigChannel+0x864>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x810>
 8001b34:	4a16      	ldr	r2, [pc, #88]	@ (8001b90 <HAL_ADC_ConfigChannel+0x868>)
 8001b36:	e000      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x812>
 8001b38:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <HAL_ADC_ConfigChannel+0x854>)
 8001b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f7fe ff56 	bl	80009f6 <LL_ADC_SetCommonPathInternalCh>
 8001b4a:	e00c      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b50:	f043 0220 	orr.w	r2, r3, #32
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001b5e:	e002      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b60:	bf00      	nop
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	37d8      	adds	r7, #216	@ 0xd8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	50000700 	.word	0x50000700
 8001b80:	c3210000 	.word	0xc3210000
 8001b84:	90c00010 	.word	0x90c00010
 8001b88:	50000600 	.word	0x50000600
 8001b8c:	50000100 	.word	0x50000100
 8001b90:	50000300 	.word	0x50000300
 8001b94:	20000000 	.word	0x20000000
 8001b98:	053e2d63 	.word	0x053e2d63
 8001b9c:	c7520000 	.word	0xc7520000
 8001ba0:	50000500 	.word	0x50000500
 8001ba4:	cb840000 	.word	0xcb840000

08001ba8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f8c7 	bl	8000d4c <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d176      	bne.n	8001cb2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4b3c      	ldr	r3, [pc, #240]	@ (8001cbc <ADC_Enable+0x114>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e062      	b.n	8001cb4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f896 	bl	8000d24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c00:	d004      	beq.n	8001c0c <ADC_Enable+0x64>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc0 <ADC_Enable+0x118>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <ADC_Enable+0x68>
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <ADC_Enable+0x11c>)
 8001c0e:	e000      	b.n	8001c12 <ADC_Enable+0x6a>
 8001c10:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <ADC_Enable+0x120>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe ff02 	bl	8000a1c <LL_ADC_GetCommonPathInternalCh>
 8001c18:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d013      	beq.n	8001c4a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <ADC_Enable+0x124>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	4a29      	ldr	r2, [pc, #164]	@ (8001cd0 <ADC_Enable+0x128>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c3c:	e002      	b.n	8001c44 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c4a:	f7fe feb5 	bl	80009b8 <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c50:	e028      	b.n	8001ca4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f878 	bl	8000d4c <LL_ADC_IsEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f85c 	bl	8000d24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c6c:	f7fe fea4 	bl	80009b8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d914      	bls.n	8001ca4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d00d      	beq.n	8001ca4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e007      	b.n	8001cb4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d1cf      	bne.n	8001c52 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	8000003f 	.word	0x8000003f
 8001cc0:	50000100 	.word	0x50000100
 8001cc4:	50000300 	.word	0x50000300
 8001cc8:	50000700 	.word	0x50000700
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	053e2d63 	.word	0x053e2d63

08001cd4 <LL_ADC_IsEnabled>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_IsEnabled+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_IsEnabled+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_REG_IsConversionOngoing>:
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b0a1      	sub	sp, #132	@ 0x84
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0e7      	b.n	8001f0e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001d46:	2300      	movs	r3, #0
 8001d48:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d56:	d102      	bne.n	8001d5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d58:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	e009      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	@ (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d102      	bne.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8001d68:	4b6d      	ldr	r3, [pc, #436]	@ (8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	e001      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0be      	b.n	8001f0e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ffb1 	bl	8001cfa <LL_ADC_REG_IsConversionOngoing>
 8001d98:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ffab 	bl	8001cfa <LL_ADC_REG_IsConversionOngoing>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 80a0 	bne.w	8001eec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 809c 	bne.w	8001eec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dbc:	d004      	beq.n	8001dc8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a55      	ldr	r2, [pc, #340]	@ (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001dc8:	4b56      	ldr	r3, [pc, #344]	@ (8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001dca:	e000      	b.n	8001dce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001dcc:	4b56      	ldr	r3, [pc, #344]	@ (8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8001dce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d04b      	beq.n	8001e70 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dea:	035b      	lsls	r3, r3, #13
 8001dec:	430b      	orrs	r3, r1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dfc:	d004      	beq.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a45      	ldr	r2, [pc, #276]	@ (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10f      	bne.n	8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001e08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e0c:	f7ff ff62 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e10:	4604      	mov	r4, r0
 8001e12:	4841      	ldr	r0, [pc, #260]	@ (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e14:	f7ff ff5e 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4323      	orrs	r3, r4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e012      	b.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001e28:	483c      	ldr	r0, [pc, #240]	@ (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001e2a:	f7ff ff53 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e2e:	4604      	mov	r4, r0
 8001e30:	483b      	ldr	r0, [pc, #236]	@ (8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001e32:	f7ff ff4f 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	431c      	orrs	r4, r3
 8001e3a:	483c      	ldr	r0, [pc, #240]	@ (8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001e3c:	f7ff ff4a 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4323      	orrs	r3, r4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d056      	beq.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e5a:	f023 030f 	bic.w	r3, r3, #15
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6811      	ldr	r1, [r2, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	6892      	ldr	r2, [r2, #8]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e6c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6e:	e047      	b.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e84:	d004      	beq.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d10f      	bne.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8001e90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e94:	f7ff ff1e 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e98:	4604      	mov	r4, r0
 8001e9a:	481f      	ldr	r0, [pc, #124]	@ (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e9c:	f7ff ff1a 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4323      	orrs	r3, r4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e012      	b.n	8001ed6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001eb0:	481a      	ldr	r0, [pc, #104]	@ (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001eb2:	f7ff ff0f 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	4819      	ldr	r0, [pc, #100]	@ (8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001eba:	f7ff ff0b 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	431c      	orrs	r4, r3
 8001ec2:	481a      	ldr	r0, [pc, #104]	@ (8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001ec4:	f7ff ff06 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4323      	orrs	r3, r4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ee2:	f023 030f 	bic.w	r3, r3, #15
 8001ee6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ee8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001eea:	e009      	b.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001efe:	e000      	b.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3784      	adds	r7, #132	@ 0x84
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd90      	pop	{r4, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	50000100 	.word	0x50000100
 8001f1c:	50000400 	.word	0x50000400
 8001f20:	50000500 	.word	0x50000500
 8001f24:	50000300 	.word	0x50000300
 8001f28:	50000700 	.word	0x50000700
 8001f2c:	50000600 	.word	0x50000600

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	@ (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	@ (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	@ (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	@ 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff40 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff90 	bl	8002024 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5f 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff33 	bl	8001f94 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa4 	bl	800208c <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e014      	b.n	800218a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7fe faed 	bl	8000750 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e056      	b.n	8002256 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	795b      	ldrb	r3, [r3, #5]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_DAC_Start+0x20>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e050      	b.n	8002256 <HAL_DAC_Start+0xc2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2202      	movs	r2, #2
 80021be:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2201      	movs	r2, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021d8:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <HAL_DAC_Start+0xd0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	4a22      	ldr	r2, [pc, #136]	@ (8002268 <HAL_DAC_Start+0xd4>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	3301      	adds	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80021ea:	e002      	b.n	80021f2 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f9      	bne.n	80021ec <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002208:	2b02      	cmp	r3, #2
 800220a:	d11d      	bne.n	8002248 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	e014      	b.n	8002248 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2102      	movs	r1, #2
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	429a      	cmp	r2, r3
 8002236:	d107      	bne.n	8002248 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0202 	orr.w	r2, r2, #2
 8002246:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000000 	.word	0x20000000
 8002268:	053e2d63 	.word	0x053e2d63

0800226c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_DAC_ConfigChannel+0x1c>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e19e      	b.n	80025ca <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	795b      	ldrb	r3, [r3, #5]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_DAC_ConfigChannel+0x2c>
 8002294:	2302      	movs	r3, #2
 8002296:	e198      	b.n	80025ca <HAL_DAC_ConfigChannel+0x35e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2202      	movs	r2, #2
 80022a2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d17a      	bne.n	80023a2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fb84 	bl	80009b8 <HAL_GetTick>
 80022b0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d13d      	bne.n	8002334 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022b8:	e018      	b.n	80022ec <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022ba:	f7fe fb7d 	bl	80009b8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d911      	bls.n	80022ec <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f043 0208 	orr.w	r2, r3, #8
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2203      	movs	r2, #3
 80022e6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e16e      	b.n	80025ca <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1df      	bne.n	80022ba <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
 8002304:	e020      	b.n	8002348 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002306:	f7fe fb57 	bl	80009b8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d90f      	bls.n	8002334 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231a:	2b00      	cmp	r3, #0
 800231c:	da0a      	bge.n	8002334 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f043 0208 	orr.w	r2, r3, #8
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2203      	movs	r2, #3
 800232e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e14a      	b.n	80025ca <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233a:	2b00      	cmp	r3, #0
 800233c:	dbe3      	blt.n	8002306 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002346:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	ea02 0103 	and.w	r1, r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	409a      	lsls	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	21ff      	movs	r1, #255	@ 0xff
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	ea02 0103 	and.w	r1, r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d11d      	bne.n	80023e6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	221f      	movs	r2, #31
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c2:	4013      	ands	r3, r2
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023da:	4313      	orrs	r3, r2
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2207      	movs	r2, #7
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fe:	4013      	ands	r3, r2
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	e00f      	b.n	8002430 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d102      	bne.n	800241e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002418:	2301      	movs	r3, #1
 800241a:	623b      	str	r3, [r7, #32]
 800241c:	e008      	b.n	8002430 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002426:	2301      	movs	r3, #1
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	e001      	b.n	8002430 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	6a3a      	ldr	r2, [r7, #32]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002452:	4013      	ands	r3, r2
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_DAC_ConfigChannel+0x1f8>
 800245e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002462:	e000      	b.n	8002466 <HAL_DAC_ConfigChannel+0x1fa>
 8002464:	2300      	movs	r3, #0
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247e:	4013      	ands	r3, r2
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	795b      	ldrb	r3, [r3, #5]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d102      	bne.n	8002490 <HAL_DAC_ConfigChannel+0x224>
 800248a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800248e:	e000      	b.n	8002492 <HAL_DAC_ConfigChannel+0x226>
 8002490:	2300      	movs	r3, #0
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d114      	bne.n	80024d2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80024a8:	f000 ffba 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 80024ac:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4a48      	ldr	r2, [pc, #288]	@ (80025d4 <HAL_DAC_ConfigChannel+0x368>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d904      	bls.n	80024c0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024be:	e00f      	b.n	80024e0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4a45      	ldr	r2, [pc, #276]	@ (80025d8 <HAL_DAC_ConfigChannel+0x36c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d90a      	bls.n	80024de <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d0:	e006      	b.n	80024e0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d8:	4313      	orrs	r3, r2
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
 80024dc:	e000      	b.n	80024e0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80024de:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ee:	4313      	orrs	r3, r2
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	400a      	ands	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002532:	4013      	ands	r3, r2
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254a:	4313      	orrs	r3, r2
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002554:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6819      	ldr	r1, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	22c0      	movs	r2, #192	@ 0xc0
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43da      	mvns	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	400a      	ands	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	ea02 0103 	and.w	r1, r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80025c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	09896800 	.word	0x09896800
 80025d8:	04c4b400 	.word	0x04c4b400

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ea:	e15a      	b.n	80028a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 814c 	beq.w	800289c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d005      	beq.n	800261c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002618:	2b02      	cmp	r3, #2
 800261a:	d130      	bne.n	800267e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002652:	2201      	movs	r2, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 0201 	and.w	r2, r3, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b03      	cmp	r3, #3
 8002688:	d017      	beq.n	80026ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d123      	bne.n	800270e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	08da      	lsrs	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3208      	adds	r2, #8
 80026ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	6939      	ldr	r1, [r7, #16]
 800270a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0203 	and.w	r2, r3, #3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80a6 	beq.w	800289c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002750:	4b5b      	ldr	r3, [pc, #364]	@ (80028c0 <HAL_GPIO_Init+0x2e4>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002754:	4a5a      	ldr	r2, [pc, #360]	@ (80028c0 <HAL_GPIO_Init+0x2e4>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6613      	str	r3, [r2, #96]	@ 0x60
 800275c:	4b58      	ldr	r3, [pc, #352]	@ (80028c0 <HAL_GPIO_Init+0x2e4>)
 800275e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002768:	4a56      	ldr	r2, [pc, #344]	@ (80028c4 <HAL_GPIO_Init+0x2e8>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002792:	d01f      	beq.n	80027d4 <HAL_GPIO_Init+0x1f8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4c      	ldr	r2, [pc, #304]	@ (80028c8 <HAL_GPIO_Init+0x2ec>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d019      	beq.n	80027d0 <HAL_GPIO_Init+0x1f4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4b      	ldr	r2, [pc, #300]	@ (80028cc <HAL_GPIO_Init+0x2f0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_GPIO_Init+0x1f0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a4a      	ldr	r2, [pc, #296]	@ (80028d0 <HAL_GPIO_Init+0x2f4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00d      	beq.n	80027c8 <HAL_GPIO_Init+0x1ec>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a49      	ldr	r2, [pc, #292]	@ (80028d4 <HAL_GPIO_Init+0x2f8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <HAL_GPIO_Init+0x1e8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a48      	ldr	r2, [pc, #288]	@ (80028d8 <HAL_GPIO_Init+0x2fc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_GPIO_Init+0x1e4>
 80027bc:	2305      	movs	r3, #5
 80027be:	e00a      	b.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027c0:	2306      	movs	r3, #6
 80027c2:	e008      	b.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027c4:	2304      	movs	r3, #4
 80027c6:	e006      	b.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027c8:	2303      	movs	r3, #3
 80027ca:	e004      	b.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_GPIO_Init+0x1fa>
 80027d4:	2300      	movs	r3, #0
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	f002 0203 	and.w	r2, r2, #3
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	4093      	lsls	r3, r2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e6:	4937      	ldr	r1, [pc, #220]	@ (80028c4 <HAL_GPIO_Init+0x2e8>)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f4:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <HAL_GPIO_Init+0x300>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002818:	4a30      	ldr	r2, [pc, #192]	@ (80028dc <HAL_GPIO_Init+0x300>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800281e:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <HAL_GPIO_Init+0x300>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002842:	4a26      	ldr	r2, [pc, #152]	@ (80028dc <HAL_GPIO_Init+0x300>)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002848:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <HAL_GPIO_Init+0x300>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800286c:	4a1b      	ldr	r2, [pc, #108]	@ (80028dc <HAL_GPIO_Init+0x300>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002872:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <HAL_GPIO_Init+0x300>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002896:	4a11      	ldr	r2, [pc, #68]	@ (80028dc <HAL_GPIO_Init+0x300>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3301      	adds	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f47f ae9d 	bne.w	80025ec <HAL_GPIO_Init+0x10>
  }
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010000 	.word	0x40010000
 80028c8:	48000400 	.word	0x48000400
 80028cc:	48000800 	.word	0x48000800
 80028d0:	48000c00 	.word	0x48000c00
 80028d4:	48001000 	.word	0x48001000
 80028d8:	48001400 	.word	0x48001400
 80028dc:	40010400 	.word	0x40010400

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800291a:	4b08      	ldr	r3, [pc, #32]	@ (800293c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002926:	4a05      	ldr	r2, [pc, #20]	@ (800293c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f806 	bl	8002940 <HAL_GPIO_EXTI_Callback>
  }
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40010400 	.word	0x40010400

08002940 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d141      	bne.n	80029ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002966:	4b4b      	ldr	r3, [pc, #300]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002972:	d131      	bne.n	80029d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002974:	4b47      	ldr	r3, [pc, #284]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800297a:	4a46      	ldr	r2, [pc, #280]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002980:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002984:	4b43      	ldr	r3, [pc, #268]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800298c:	4a41      	ldr	r2, [pc, #260]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002992:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002994:	4b40      	ldr	r3, [pc, #256]	@ (8002a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2232      	movs	r2, #50	@ 0x32
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	0c9b      	lsrs	r3, r3, #18
 80029a6:	3301      	adds	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029aa:	e002      	b.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b2:	4b38      	ldr	r3, [pc, #224]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	d102      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f2      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029c6:	4b33      	ldr	r3, [pc, #204]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d2:	d158      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e057      	b.n	8002a88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029de:	4a2d      	ldr	r2, [pc, #180]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029e8:	e04d      	b.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029f0:	d141      	bne.n	8002a76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029f2:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fe:	d131      	bne.n	8002a64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a06:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a10:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a18:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2232      	movs	r2, #50	@ 0x32
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	0c9b      	lsrs	r3, r3, #18
 8002a32:	3301      	adds	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a36:	e002      	b.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4a:	d102      	bne.n	8002a52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f2      	bne.n	8002a38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a52:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5e:	d112      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e011      	b.n	8002a88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a74:	e007      	b.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a76:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a7e:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40007000 	.word	0x40007000
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	431bde83 	.word	0x431bde83

08002aa0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a04      	ldr	r2, [pc, #16]	@ (8002abc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aae:	6093      	str	r3, [r2, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40007000 	.word	0x40007000

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e2fe      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d075      	beq.n	8002bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	4b97      	ldr	r3, [pc, #604]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae8:	4b94      	ldr	r3, [pc, #592]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d102      	bne.n	8002afe <HAL_RCC_OscConfig+0x3e>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_OscConfig+0x44>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	4b8d      	ldr	r3, [pc, #564]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x108>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d157      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e2d9      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x74>
 8002b26:	4b85      	ldr	r3, [pc, #532]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a84      	ldr	r2, [pc, #528]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x98>
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a7e      	ldr	r2, [pc, #504]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b58:	4b78      	ldr	r3, [pc, #480]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a77      	ldr	r2, [pc, #476]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b75      	ldr	r3, [pc, #468]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a74      	ldr	r2, [pc, #464]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fd ff1e 	bl	80009b8 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fd ff1a 	bl	80009b8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	@ 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e29e      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b92:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xc0>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fd ff0a 	bl	80009b8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fd ff06 	bl	80009b8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e28a      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bba:	4b60      	ldr	r3, [pc, #384]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d075      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd6:	4b59      	ldr	r3, [pc, #356]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be0:	4b56      	ldr	r3, [pc, #344]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x136>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCC_OscConfig+0x13c>
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d11f      	bne.n	8002c3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x154>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e25d      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	4b49      	ldr	r3, [pc, #292]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	4946      	ldr	r1, [pc, #280]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c28:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fe77 	bl	8000920 <HAL_InitTick>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d043      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e249      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d023      	beq.n	8002c8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b3d      	ldr	r3, [pc, #244]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a3c      	ldr	r2, [pc, #240]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fd feb2 	bl	80009b8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fd feae 	bl	80009b8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e232      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c6a:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	492d      	ldr	r1, [pc, #180]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
 8002c8a:	e01a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2a      	ldr	r2, [pc, #168]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fd fe8e 	bl	80009b8 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fd fe8a 	bl	80009b8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e20e      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb2:	4b22      	ldr	r3, [pc, #136]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1e0>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d041      	beq.n	8002d52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cdc:	4a17      	ldr	r2, [pc, #92]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fd fe67 	bl	80009b8 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cee:	f7fd fe63 	bl	80009b8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1e7      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d00:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ef      	beq.n	8002cee <HAL_RCC_OscConfig+0x22e>
 8002d0e:	e020      	b.n	8002d52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d10:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d16:	4a09      	ldr	r2, [pc, #36]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fd fe4a 	bl	80009b8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d26:	e00d      	b.n	8002d44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fd fe46 	bl	80009b8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d906      	bls.n	8002d44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1ca      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d44:	4b8c      	ldr	r3, [pc, #560]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ea      	bne.n	8002d28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80a6 	beq.w	8002eac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d64:	4b84      	ldr	r3, [pc, #528]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2b4>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x2b6>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d86:	4b7c      	ldr	r3, [pc, #496]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d92:	2301      	movs	r3, #1
 8002d94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d96:	4b79      	ldr	r3, [pc, #484]	@ (8002f7c <HAL_RCC_OscConfig+0x4bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d118      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da2:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCC_OscConfig+0x4bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	@ (8002f7c <HAL_RCC_OscConfig+0x4bc>)
 8002da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dae:	f7fd fe03 	bl	80009b8 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db6:	f7fd fdff 	bl	80009b8 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e183      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f7c <HAL_RCC_OscConfig+0x4bc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d108      	bne.n	8002dee <HAL_RCC_OscConfig+0x32e>
 8002ddc:	4b66      	ldr	r3, [pc, #408]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de2:	4a65      	ldr	r2, [pc, #404]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dec:	e024      	b.n	8002e38 <HAL_RCC_OscConfig+0x378>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d110      	bne.n	8002e18 <HAL_RCC_OscConfig+0x358>
 8002df6:	4b60      	ldr	r3, [pc, #384]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e06:	4b5c      	ldr	r3, [pc, #368]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e16:	e00f      	b.n	8002e38 <HAL_RCC_OscConfig+0x378>
 8002e18:	4b57      	ldr	r3, [pc, #348]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	4a56      	ldr	r2, [pc, #344]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e28:	4b53      	ldr	r3, [pc, #332]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	4a52      	ldr	r2, [pc, #328]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fd fdba 	bl	80009b8 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fd fdb6 	bl	80009b8 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e138      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	4b46      	ldr	r3, [pc, #280]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ed      	beq.n	8002e48 <HAL_RCC_OscConfig+0x388>
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fd fda3 	bl	80009b8 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fd fd9f 	bl	80009b8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e121      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ed      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b35      	ldr	r3, [pc, #212]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	4a34      	ldr	r2, [pc, #208]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d03c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01c      	beq.n	8002efa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fd fd72 	bl	80009b8 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed8:	f7fd fd6e 	bl	80009b8 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0f2      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eea:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ef      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x418>
 8002ef8:	e01b      	b.n	8002f32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002efa:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f00:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fd fd55 	bl	80009b8 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f12:	f7fd fd51 	bl	80009b8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0d5      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f24:	4b14      	ldr	r3, [pc, #80]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ef      	bne.n	8002f12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80c9 	beq.w	80030ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	f000 8083 	beq.w	8003050 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d15e      	bne.n	8003010 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a08      	ldr	r2, [pc, #32]	@ (8002f78 <HAL_RCC_OscConfig+0x4b8>)
 8002f58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fd fd2b 	bl	80009b8 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f64:	e00c      	b.n	8002f80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fd fd27 	bl	80009b8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d905      	bls.n	8002f80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0ab      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	4b55      	ldr	r3, [pc, #340]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ec      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8c:	4b52      	ldr	r3, [pc, #328]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4b52      	ldr	r3, [pc, #328]	@ (80030dc <HAL_RCC_OscConfig+0x61c>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6a11      	ldr	r1, [r2, #32]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	4311      	orrs	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002fa6:	0212      	lsls	r2, r2, #8
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0552      	lsls	r2, r2, #21
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fba:	0852      	lsrs	r2, r2, #1
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	0652      	lsls	r2, r2, #25
 8002fc0:	4311      	orrs	r1, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fc6:	06d2      	lsls	r2, r2, #27
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	4943      	ldr	r1, [pc, #268]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b41      	ldr	r3, [pc, #260]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a40      	ldr	r2, [pc, #256]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a3d      	ldr	r2, [pc, #244]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fce6 	bl	80009b8 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fd fce2 	bl	80009b8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e066      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	4b35      	ldr	r3, [pc, #212]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x530>
 800300e:	e05e      	b.n	80030ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a30      	ldr	r2, [pc, #192]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fd fccc 	bl	80009b8 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fcc8 	bl	80009b8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04c      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003036:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003042:	4b25      	ldr	r3, [pc, #148]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4924      	ldr	r1, [pc, #144]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 8003048:	4b25      	ldr	r3, [pc, #148]	@ (80030e0 <HAL_RCC_OscConfig+0x620>)
 800304a:	4013      	ands	r3, r2
 800304c:	60cb      	str	r3, [r1, #12]
 800304e:	e03e      	b.n	80030ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e039      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800305c:	4b1e      	ldr	r3, [pc, #120]	@ (80030d8 <HAL_RCC_OscConfig+0x618>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	429a      	cmp	r2, r3
 800306e:	d12c      	bne.n	80030ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	3b01      	subs	r3, #1
 800307c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d123      	bne.n	80030ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d11b      	bne.n	80030ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d113      	bne.n	80030ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	019f800c 	.word	0x019f800c
 80030e0:	feeefffc 	.word	0xfeeefffc

080030e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e11e      	b.n	800333a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b91      	ldr	r3, [pc, #580]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b8e      	ldr	r3, [pc, #568]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 020f 	bic.w	r2, r3, #15
 8003112:	498c      	ldr	r1, [pc, #560]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b8a      	ldr	r3, [pc, #552]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e106      	b.n	800333a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d073      	beq.n	8003220 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d129      	bne.n	8003194 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003140:	4b81      	ldr	r3, [pc, #516]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0f4      	b.n	800333a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003150:	f000 f972 	bl	8003438 <RCC_GetSysClockFreqFromPLLSource>
 8003154:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4a7c      	ldr	r2, [pc, #496]	@ (800334c <HAL_RCC_ClockConfig+0x268>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d93f      	bls.n	80031de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800315e:	4b7a      	ldr	r3, [pc, #488]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003172:	2b00      	cmp	r3, #0
 8003174:	d033      	beq.n	80031de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d12f      	bne.n	80031de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800317e:	4b72      	ldr	r3, [pc, #456]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003186:	4a70      	ldr	r2, [pc, #448]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800318c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e024      	b.n	80031de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319c:	4b6a      	ldr	r3, [pc, #424]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0c6      	b.n	800333a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ac:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0be      	b.n	800333a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80031bc:	f000 f8ce 	bl	800335c <HAL_RCC_GetSysClockFreq>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4a61      	ldr	r2, [pc, #388]	@ (800334c <HAL_RCC_ClockConfig+0x268>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d909      	bls.n	80031de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031d2:	4a5d      	ldr	r2, [pc, #372]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80031d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031de:	4b5a      	ldr	r3, [pc, #360]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f023 0203 	bic.w	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4957      	ldr	r1, [pc, #348]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fd fbe2 	bl	80009b8 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	e00a      	b.n	800320e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f8:	f7fd fbde 	bl	80009b8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e095      	b.n	800333a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	4b4e      	ldr	r3, [pc, #312]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 020c 	and.w	r2, r3, #12
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d1eb      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d023      	beq.n	8003274 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003238:	4b43      	ldr	r3, [pc, #268]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a42      	ldr	r2, [pc, #264]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 800323e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003242:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003250:	4b3d      	ldr	r3, [pc, #244]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003258:	4a3b      	ldr	r2, [pc, #236]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 800325a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800325e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4936      	ldr	r1, [pc, #216]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
 8003272:	e008      	b.n	8003286 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b80      	cmp	r3, #128	@ 0x80
 8003278:	d105      	bne.n	8003286 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800327a:	4b33      	ldr	r3, [pc, #204]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003280:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003284:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003286:	4b2f      	ldr	r3, [pc, #188]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d21d      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003294:	4b2b      	ldr	r3, [pc, #172]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 020f 	bic.w	r2, r3, #15
 800329c:	4929      	ldr	r1, [pc, #164]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032a4:	f7fd fb88 	bl	80009b8 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fd fb84 	bl	80009b8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e03b      	b.n	800333a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCC_ClockConfig+0x260>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1ed      	bne.n	80032ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4917      	ldr	r1, [pc, #92]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490f      	ldr	r1, [pc, #60]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800330e:	f000 f825 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <HAL_RCC_ClockConfig+0x264>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490c      	ldr	r1, [pc, #48]	@ (8003350 <HAL_RCC_ClockConfig+0x26c>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <HAL_RCC_ClockConfig+0x270>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <HAL_RCC_ClockConfig+0x274>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd faf4 	bl	8000920 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	04c4b400 	.word	0x04c4b400
 8003350:	08004158 	.word	0x08004158
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003362:	4b2c      	ldr	r3, [pc, #176]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b04      	cmp	r3, #4
 800336c:	d102      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800336e:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e047      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003374:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d102      	bne.n	8003386 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003380:	4b26      	ldr	r3, [pc, #152]	@ (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e03e      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003386:	4b23      	ldr	r3, [pc, #140]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d136      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003392:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800339c:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033b0:	4a1a      	ldr	r2, [pc, #104]	@ (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	4a16      	ldr	r2, [pc, #88]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ba:	68d2      	ldr	r2, [r2, #12]
 80033bc:	0a12      	lsrs	r2, r2, #8
 80033be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	617b      	str	r3, [r7, #20]
      break;
 80033c8:	e00c      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ca:	4a13      	ldr	r2, [pc, #76]	@ (8003418 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4a10      	ldr	r2, [pc, #64]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	0a12      	lsrs	r2, r2, #8
 80033d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
      break;
 80033e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0e5b      	lsrs	r3, r3, #25
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	e001      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003404:	693b      	ldr	r3, [r7, #16]
}
 8003406:	4618      	mov	r0, r3
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	00f42400 	.word	0x00f42400
 800341c:	016e3600 	.word	0x016e3600

08003420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	@ (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343e:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d10c      	bne.n	8003476 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345c:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003466:	68d2      	ldr	r2, [r2, #12]
 8003468:	0a12      	lsrs	r2, r2, #8
 800346a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
    break;
 8003474:	e00c      	b.n	8003490 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003476:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	4a0e      	ldr	r2, [pc, #56]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	0a12      	lsrs	r2, r2, #8
 8003484:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
    break;
 800348e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003490:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0e5b      	lsrs	r3, r3, #25
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	3301      	adds	r3, #1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034aa:	687b      	ldr	r3, [r7, #4]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40021000 	.word	0x40021000
 80034bc:	016e3600 	.word	0x016e3600
 80034c0:	00f42400 	.word	0x00f42400

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d0:	2300      	movs	r3, #0
 80034d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8098 	beq.w	8003612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e6:	4b43      	ldr	r3, [pc, #268]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	4b40      	ldr	r3, [pc, #256]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	4a3f      	ldr	r2, [pc, #252]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fe:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350e:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a39      	ldr	r2, [pc, #228]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800351a:	f7fd fa4d 	bl	80009b8 <HAL_GetTick>
 800351e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003520:	e009      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fd fa49 	bl	80009b8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d902      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	74fb      	strb	r3, [r7, #19]
        break;
 8003534:	e005      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003536:	4b30      	ldr	r3, [pc, #192]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ef      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d159      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003548:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003552:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01e      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	d019      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003564:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800356e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003570:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003580:	4b1c      	ldr	r3, [pc, #112]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003586:	4a1b      	ldr	r2, [pc, #108]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003590:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd fa09 	bl	80009b8 <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	e00b      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fd fa05 	bl	80009b8 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d902      	bls.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	74fb      	strb	r3, [r7, #19]
            break;
 80035c0:	e006      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c2:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ec      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d6:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e4:	4903      	ldr	r1, [pc, #12]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035ec:	e008      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	74bb      	strb	r3, [r7, #18]
 80035f2:	e005      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003600:	7c7b      	ldrb	r3, [r7, #17]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4ba7      	ldr	r3, [pc, #668]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	4aa6      	ldr	r2, [pc, #664]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361e:	4ba1      	ldr	r3, [pc, #644]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	499d      	ldr	r1, [pc, #628]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003640:	4b98      	ldr	r3, [pc, #608]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003646:	f023 020c 	bic.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4995      	ldr	r1, [pc, #596]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003662:	4b90      	ldr	r3, [pc, #576]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	498c      	ldr	r1, [pc, #560]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003684:	4b87      	ldr	r3, [pc, #540]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4984      	ldr	r1, [pc, #528]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036a6:	4b7f      	ldr	r3, [pc, #508]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	497b      	ldr	r1, [pc, #492]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036c8:	4b76      	ldr	r3, [pc, #472]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	4973      	ldr	r1, [pc, #460]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ea:	4b6e      	ldr	r3, [pc, #440]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	496a      	ldr	r1, [pc, #424]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800370c:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4962      	ldr	r1, [pc, #392]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800372e:	4b5d      	ldr	r3, [pc, #372]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	4959      	ldr	r1, [pc, #356]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003750:	4b54      	ldr	r3, [pc, #336]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	4951      	ldr	r1, [pc, #324]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003772:	4b4c      	ldr	r3, [pc, #304]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	4948      	ldr	r1, [pc, #288]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003794:	4b43      	ldr	r3, [pc, #268]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	4940      	ldr	r1, [pc, #256]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b3b      	ldr	r3, [pc, #236]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a3a      	ldr	r2, [pc, #232]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037cc:	4b35      	ldr	r3, [pc, #212]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037da:	4932      	ldr	r1, [pc, #200]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ea:	d105      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b2d      	ldr	r3, [pc, #180]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a2c      	ldr	r2, [pc, #176]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003804:	4b27      	ldr	r3, [pc, #156]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	4924      	ldr	r1, [pc, #144]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003822:	d105      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b1f      	ldr	r3, [pc, #124]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800383c:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384a:	4916      	ldr	r1, [pc, #88]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a10      	ldr	r2, [pc, #64]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d019      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	4908      	ldr	r1, [pc, #32]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003892:	d109      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a02      	ldr	r2, [pc, #8]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800389e:	60d3      	str	r3, [r2, #12]
 80038a0:	e002      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038b4:	4b29      	ldr	r3, [pc, #164]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	4926      	ldr	r1, [pc, #152]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038d2:	d105      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038d4:	4b21      	ldr	r3, [pc, #132]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a20      	ldr	r2, [pc, #128]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fa:	4918      	ldr	r1, [pc, #96]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a12      	ldr	r2, [pc, #72]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003916:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003924:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800392a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	490a      	ldr	r1, [pc, #40]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003942:	d105      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a04      	ldr	r2, [pc, #16]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800394a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800394e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003950:	7cbb      	ldrb	r3, [r7, #18]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e049      	b.n	8003a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fc ff20 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 f9bc 	bl	8003d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e04c      	b.n	8003ac2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a26      	ldr	r2, [pc, #152]	@ (8003ad0 <HAL_TIM_Base_Start+0xc0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a42:	d01d      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a22      	ldr	r2, [pc, #136]	@ (8003ad4 <HAL_TIM_Base_Start+0xc4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	@ (8003ad8 <HAL_TIM_Base_Start+0xc8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003adc <HAL_TIM_Base_Start+0xcc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae0 <HAL_TIM_Base_Start+0xd0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <HAL_TIM_Base_Start+0xd4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_Base_Start+0x70>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <HAL_TIM_Base_Start+0xd8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d115      	bne.n	8003aac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <HAL_TIM_Base_Start+0xdc>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d015      	beq.n	8003abe <HAL_TIM_Base_Start+0xae>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a98:	d011      	beq.n	8003abe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	e008      	b.n	8003abe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e000      	b.n	8003ac0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40013400 	.word	0x40013400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40015000 	.word	0x40015000
 8003aec:	00010007 	.word	0x00010007

08003af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_ConfigClockSource+0x1c>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0f6      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x20a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6f      	ldr	r2, [pc, #444]	@ (8003d04 <HAL_TIM_ConfigClockSource+0x214>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	f000 80c1 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8003d04 <HAL_TIM_ConfigClockSource+0x214>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	f200 80c6 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b54:	4a6c      	ldr	r2, [pc, #432]	@ (8003d08 <HAL_TIM_ConfigClockSource+0x218>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	f000 80b9 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003d08 <HAL_TIM_ConfigClockSource+0x218>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	f200 80be 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b64:	4a69      	ldr	r2, [pc, #420]	@ (8003d0c <HAL_TIM_ConfigClockSource+0x21c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f000 80b1 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003b6c:	4a67      	ldr	r2, [pc, #412]	@ (8003d0c <HAL_TIM_ConfigClockSource+0x21c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f200 80b6 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b74:	4a66      	ldr	r2, [pc, #408]	@ (8003d10 <HAL_TIM_ConfigClockSource+0x220>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f000 80a9 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003b7c:	4a64      	ldr	r2, [pc, #400]	@ (8003d10 <HAL_TIM_ConfigClockSource+0x220>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f200 80ae 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b84:	4a63      	ldr	r2, [pc, #396]	@ (8003d14 <HAL_TIM_ConfigClockSource+0x224>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f000 80a1 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003b8c:	4a61      	ldr	r2, [pc, #388]	@ (8003d14 <HAL_TIM_ConfigClockSource+0x224>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f200 80a6 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b94:	4a60      	ldr	r2, [pc, #384]	@ (8003d18 <HAL_TIM_ConfigClockSource+0x228>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f000 8099 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003b9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003d18 <HAL_TIM_ConfigClockSource+0x228>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f200 809e 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ba4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ba8:	f000 8091 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003bac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003bb0:	f200 8096 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bb8:	f000 8089 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003bbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc0:	f200 808e 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc8:	d03e      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0x158>
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bce:	f200 8087 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd6:	f000 8086 	beq.w	8003ce6 <HAL_TIM_ConfigClockSource+0x1f6>
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bde:	d87f      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003be0:	2b70      	cmp	r3, #112	@ 0x70
 8003be2:	d01a      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x12a>
 8003be4:	2b70      	cmp	r3, #112	@ 0x70
 8003be6:	d87b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003be8:	2b60      	cmp	r3, #96	@ 0x60
 8003bea:	d050      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x19e>
 8003bec:	2b60      	cmp	r3, #96	@ 0x60
 8003bee:	d877      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bf0:	2b50      	cmp	r3, #80	@ 0x50
 8003bf2:	d03c      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x17e>
 8003bf4:	2b50      	cmp	r3, #80	@ 0x50
 8003bf6:	d873      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003bf8:	2b40      	cmp	r3, #64	@ 0x40
 8003bfa:	d058      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x1be>
 8003bfc:	2b40      	cmp	r3, #64	@ 0x40
 8003bfe:	d86f      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c00:	2b30      	cmp	r3, #48	@ 0x30
 8003c02:	d064      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003c04:	2b30      	cmp	r3, #48	@ 0x30
 8003c06:	d86b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d060      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d867      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05c      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d05a      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x1de>
 8003c18:	e062      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2a:	f000 f9a7 	bl	8003f7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	609a      	str	r2, [r3, #8]
      break;
 8003c46:	e04f      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c58:	f000 f990 	bl	8003f7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c6a:	609a      	str	r2, [r3, #8]
      break;
 8003c6c:	e03c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 f902 	bl	8003e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2150      	movs	r1, #80	@ 0x50
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f95b 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e02c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 f921 	bl	8003ee2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2160      	movs	r1, #96	@ 0x60
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f94b 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003cac:	e01c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f000 f8e2 	bl	8003e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2140      	movs	r1, #64	@ 0x40
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f93b 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e00c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f000 f932 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003cde:	e003      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	00100070 	.word	0x00100070
 8003d08:	00100060 	.word	0x00100060
 8003d0c:	00100050 	.word	0x00100050
 8003d10:	00100040 	.word	0x00100040
 8003d14:	00100030 	.word	0x00100030
 8003d18:	00100020 	.word	0x00100020

08003d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8003e60 <TIM_Base_SetConfig+0x144>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d017      	beq.n	8003d64 <TIM_Base_SetConfig+0x48>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3a:	d013      	beq.n	8003d64 <TIM_Base_SetConfig+0x48>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a49      	ldr	r2, [pc, #292]	@ (8003e64 <TIM_Base_SetConfig+0x148>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00f      	beq.n	8003d64 <TIM_Base_SetConfig+0x48>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a48      	ldr	r2, [pc, #288]	@ (8003e68 <TIM_Base_SetConfig+0x14c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <TIM_Base_SetConfig+0x48>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a47      	ldr	r2, [pc, #284]	@ (8003e6c <TIM_Base_SetConfig+0x150>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <TIM_Base_SetConfig+0x48>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a46      	ldr	r2, [pc, #280]	@ (8003e70 <TIM_Base_SetConfig+0x154>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_Base_SetConfig+0x48>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a45      	ldr	r2, [pc, #276]	@ (8003e74 <TIM_Base_SetConfig+0x158>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d108      	bne.n	8003d76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a39      	ldr	r2, [pc, #228]	@ (8003e60 <TIM_Base_SetConfig+0x144>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d023      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d84:	d01f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a36      	ldr	r2, [pc, #216]	@ (8003e64 <TIM_Base_SetConfig+0x148>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a35      	ldr	r2, [pc, #212]	@ (8003e68 <TIM_Base_SetConfig+0x14c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a34      	ldr	r2, [pc, #208]	@ (8003e6c <TIM_Base_SetConfig+0x150>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a33      	ldr	r2, [pc, #204]	@ (8003e70 <TIM_Base_SetConfig+0x154>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a33      	ldr	r2, [pc, #204]	@ (8003e78 <TIM_Base_SetConfig+0x15c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a32      	ldr	r2, [pc, #200]	@ (8003e7c <TIM_Base_SetConfig+0x160>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a31      	ldr	r2, [pc, #196]	@ (8003e80 <TIM_Base_SetConfig+0x164>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0xaa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e74 <TIM_Base_SetConfig+0x158>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a18      	ldr	r2, [pc, #96]	@ (8003e60 <TIM_Base_SetConfig+0x144>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <TIM_Base_SetConfig+0x110>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a1a      	ldr	r2, [pc, #104]	@ (8003e70 <TIM_Base_SetConfig+0x154>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00f      	beq.n	8003e2c <TIM_Base_SetConfig+0x110>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e78 <TIM_Base_SetConfig+0x15c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00b      	beq.n	8003e2c <TIM_Base_SetConfig+0x110>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <TIM_Base_SetConfig+0x160>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0x110>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a18      	ldr	r2, [pc, #96]	@ (8003e80 <TIM_Base_SetConfig+0x164>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0x110>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <TIM_Base_SetConfig+0x158>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	611a      	str	r2, [r3, #16]
  }
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40015000 	.word	0x40015000
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 030a 	bic.w	r3, r3, #10
 8003ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b087      	sub	sp, #28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 0210 	bic.w	r2, r3, #16
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	031b      	lsls	r3, r3, #12
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f043 0307 	orr.w	r3, r3, #7
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	021a      	lsls	r2, r3, #8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e074      	b.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a34      	ldr	r2, [pc, #208]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d009      	beq.n	8004012 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a33      	ldr	r2, [pc, #204]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d004      	beq.n	8004012 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a31      	ldr	r2, [pc, #196]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004018:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800402a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a21      	ldr	r2, [pc, #132]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004054:	d01d      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1f      	ldr	r2, [pc, #124]	@ (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1c      	ldr	r2, [pc, #112]	@ (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a15      	ldr	r2, [pc, #84]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a18      	ldr	r2, [pc, #96]	@ (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a11      	ldr	r2, [pc, #68]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10c      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40015000 	.word	0x40015000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40014000 	.word	0x40014000

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004130 <__libc_init_array+0x38>)
 80040fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004134 <__libc_init_array+0x3c>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	2600      	movs	r6, #0
 8004104:	42a6      	cmp	r6, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	4d0b      	ldr	r5, [pc, #44]	@ (8004138 <__libc_init_array+0x40>)
 800410a:	4c0c      	ldr	r4, [pc, #48]	@ (800413c <__libc_init_array+0x44>)
 800410c:	f000 f818 	bl	8004140 <_init>
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	2600      	movs	r6, #0
 8004116:	42a6      	cmp	r6, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004120:	4798      	blx	r3
 8004122:	3601      	adds	r6, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	f855 3b04 	ldr.w	r3, [r5], #4
 800412a:	4798      	blx	r3
 800412c:	3601      	adds	r6, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	08004168 	.word	0x08004168
 8004134:	08004168 	.word	0x08004168
 8004138:	08004168 	.word	0x08004168
 800413c:	0800416c 	.word	0x0800416c

08004140 <_init>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr

0800414c <_fini>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr
