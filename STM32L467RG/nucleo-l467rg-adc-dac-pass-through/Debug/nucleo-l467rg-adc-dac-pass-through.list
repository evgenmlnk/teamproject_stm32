
nucleo-l467rg-adc-dac-pass-through.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006348  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080064d0  080064d0  000074d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006700  08006700  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006700  08006700  00007700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006708  08006708  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800670c  0800670c  0000770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006710  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  0800671c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800671c  0000817c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e6b  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002510  00000000  00000000  0001bea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0001e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb9  00000000  00000000  0001f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d3b  00000000  00000000  00020539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015379  00000000  00000000  00049274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107643  00000000  00000000  0005e5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165c30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  00165c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0016b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080064b8 	.word	0x080064b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080064b8 	.word	0x080064b8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <__aeabi_uldivmod>:
 8000934:	b953      	cbnz	r3, 800094c <__aeabi_uldivmod+0x18>
 8000936:	b94a      	cbnz	r2, 800094c <__aeabi_uldivmod+0x18>
 8000938:	2900      	cmp	r1, #0
 800093a:	bf08      	it	eq
 800093c:	2800      	cmpeq	r0, #0
 800093e:	bf1c      	itt	ne
 8000940:	f04f 31ff 	movne.w	r1, #4294967295
 8000944:	f04f 30ff 	movne.w	r0, #4294967295
 8000948:	f000 b96a 	b.w	8000c20 <__aeabi_idiv0>
 800094c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000954:	f000 f806 	bl	8000964 <__udivmoddi4>
 8000958:	f8dd e004 	ldr.w	lr, [sp, #4]
 800095c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr

08000964 <__udivmoddi4>:
 8000964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000968:	9d08      	ldr	r5, [sp, #32]
 800096a:	460c      	mov	r4, r1
 800096c:	2b00      	cmp	r3, #0
 800096e:	d14e      	bne.n	8000a0e <__udivmoddi4+0xaa>
 8000970:	4694      	mov	ip, r2
 8000972:	458c      	cmp	ip, r1
 8000974:	4686      	mov	lr, r0
 8000976:	fab2 f282 	clz	r2, r2
 800097a:	d962      	bls.n	8000a42 <__udivmoddi4+0xde>
 800097c:	b14a      	cbz	r2, 8000992 <__udivmoddi4+0x2e>
 800097e:	f1c2 0320 	rsb	r3, r2, #32
 8000982:	4091      	lsls	r1, r2
 8000984:	fa20 f303 	lsr.w	r3, r0, r3
 8000988:	fa0c fc02 	lsl.w	ip, ip, r2
 800098c:	4319      	orrs	r1, r3
 800098e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000992:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000996:	fa1f f68c 	uxth.w	r6, ip
 800099a:	fbb1 f4f7 	udiv	r4, r1, r7
 800099e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a2:	fb07 1114 	mls	r1, r7, r4, r1
 80009a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009aa:	fb04 f106 	mul.w	r1, r4, r6
 80009ae:	4299      	cmp	r1, r3
 80009b0:	d90a      	bls.n	80009c8 <__udivmoddi4+0x64>
 80009b2:	eb1c 0303 	adds.w	r3, ip, r3
 80009b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ba:	f080 8112 	bcs.w	8000be2 <__udivmoddi4+0x27e>
 80009be:	4299      	cmp	r1, r3
 80009c0:	f240 810f 	bls.w	8000be2 <__udivmoddi4+0x27e>
 80009c4:	3c02      	subs	r4, #2
 80009c6:	4463      	add	r3, ip
 80009c8:	1a59      	subs	r1, r3, r1
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d2:	fb07 1110 	mls	r1, r7, r0, r1
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f606 	mul.w	r6, r0, r6
 80009de:	429e      	cmp	r6, r3
 80009e0:	d90a      	bls.n	80009f8 <__udivmoddi4+0x94>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009ea:	f080 80fc 	bcs.w	8000be6 <__udivmoddi4+0x282>
 80009ee:	429e      	cmp	r6, r3
 80009f0:	f240 80f9 	bls.w	8000be6 <__udivmoddi4+0x282>
 80009f4:	4463      	add	r3, ip
 80009f6:	3802      	subs	r0, #2
 80009f8:	1b9b      	subs	r3, r3, r6
 80009fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009fe:	2100      	movs	r1, #0
 8000a00:	b11d      	cbz	r5, 8000a0a <__udivmoddi4+0xa6>
 8000a02:	40d3      	lsrs	r3, r2
 8000a04:	2200      	movs	r2, #0
 8000a06:	e9c5 3200 	strd	r3, r2, [r5]
 8000a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d905      	bls.n	8000a1e <__udivmoddi4+0xba>
 8000a12:	b10d      	cbz	r5, 8000a18 <__udivmoddi4+0xb4>
 8000a14:	e9c5 0100 	strd	r0, r1, [r5]
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4608      	mov	r0, r1
 8000a1c:	e7f5      	b.n	8000a0a <__udivmoddi4+0xa6>
 8000a1e:	fab3 f183 	clz	r1, r3
 8000a22:	2900      	cmp	r1, #0
 8000a24:	d146      	bne.n	8000ab4 <__udivmoddi4+0x150>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xcc>
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	f0c0 80f0 	bcc.w	8000c10 <__udivmoddi4+0x2ac>
 8000a30:	1a86      	subs	r6, r0, r2
 8000a32:	eb64 0303 	sbc.w	r3, r4, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d0e6      	beq.n	8000a0a <__udivmoddi4+0xa6>
 8000a3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a40:	e7e3      	b.n	8000a0a <__udivmoddi4+0xa6>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	f040 8090 	bne.w	8000b68 <__udivmoddi4+0x204>
 8000a48:	eba1 040c 	sub.w	r4, r1, ip
 8000a4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a50:	fa1f f78c 	uxth.w	r7, ip
 8000a54:	2101      	movs	r1, #1
 8000a56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a66:	fb07 f006 	mul.w	r0, r7, r6
 8000a6a:	4298      	cmp	r0, r3
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x11c>
 8000a6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x11a>
 8000a78:	4298      	cmp	r0, r3
 8000a7a:	f200 80cd 	bhi.w	8000c18 <__udivmoddi4+0x2b4>
 8000a7e:	4626      	mov	r6, r4
 8000a80:	1a1c      	subs	r4, r3, r0
 8000a82:	fa1f f38e 	uxth.w	r3, lr
 8000a86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a92:	fb00 f707 	mul.w	r7, r0, r7
 8000a96:	429f      	cmp	r7, r3
 8000a98:	d908      	bls.n	8000aac <__udivmoddi4+0x148>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa2:	d202      	bcs.n	8000aaa <__udivmoddi4+0x146>
 8000aa4:	429f      	cmp	r7, r3
 8000aa6:	f200 80b0 	bhi.w	8000c0a <__udivmoddi4+0x2a6>
 8000aaa:	4620      	mov	r0, r4
 8000aac:	1bdb      	subs	r3, r3, r7
 8000aae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab2:	e7a5      	b.n	8000a00 <__udivmoddi4+0x9c>
 8000ab4:	f1c1 0620 	rsb	r6, r1, #32
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	fa22 f706 	lsr.w	r7, r2, r6
 8000abe:	431f      	orrs	r7, r3
 8000ac0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ac4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ac8:	ea43 030c 	orr.w	r3, r3, ip
 8000acc:	40f4      	lsrs	r4, r6
 8000ace:	fa00 f801 	lsl.w	r8, r0, r1
 8000ad2:	0c38      	lsrs	r0, r7, #16
 8000ad4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ad8:	fbb4 fef0 	udiv	lr, r4, r0
 8000adc:	fa1f fc87 	uxth.w	ip, r7
 8000ae0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ae4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae8:	fb0e f90c 	mul.w	r9, lr, ip
 8000aec:	45a1      	cmp	r9, r4
 8000aee:	fa02 f201 	lsl.w	r2, r2, r1
 8000af2:	d90a      	bls.n	8000b0a <__udivmoddi4+0x1a6>
 8000af4:	193c      	adds	r4, r7, r4
 8000af6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000afa:	f080 8084 	bcs.w	8000c06 <__udivmoddi4+0x2a2>
 8000afe:	45a1      	cmp	r9, r4
 8000b00:	f240 8081 	bls.w	8000c06 <__udivmoddi4+0x2a2>
 8000b04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b08:	443c      	add	r4, r7
 8000b0a:	eba4 0409 	sub.w	r4, r4, r9
 8000b0e:	fa1f f983 	uxth.w	r9, r3
 8000b12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b16:	fb00 4413 	mls	r4, r0, r3, r4
 8000b1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b22:	45a4      	cmp	ip, r4
 8000b24:	d907      	bls.n	8000b36 <__udivmoddi4+0x1d2>
 8000b26:	193c      	adds	r4, r7, r4
 8000b28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b2c:	d267      	bcs.n	8000bfe <__udivmoddi4+0x29a>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0x29a>
 8000b32:	3b02      	subs	r3, #2
 8000b34:	443c      	add	r4, r7
 8000b36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b3e:	eba4 040c 	sub.w	r4, r4, ip
 8000b42:	429c      	cmp	r4, r3
 8000b44:	46ce      	mov	lr, r9
 8000b46:	469c      	mov	ip, r3
 8000b48:	d351      	bcc.n	8000bee <__udivmoddi4+0x28a>
 8000b4a:	d04e      	beq.n	8000bea <__udivmoddi4+0x286>
 8000b4c:	b155      	cbz	r5, 8000b64 <__udivmoddi4+0x200>
 8000b4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b52:	eb64 040c 	sbc.w	r4, r4, ip
 8000b56:	fa04 f606 	lsl.w	r6, r4, r6
 8000b5a:	40cb      	lsrs	r3, r1
 8000b5c:	431e      	orrs	r6, r3
 8000b5e:	40cc      	lsrs	r4, r1
 8000b60:	e9c5 6400 	strd	r6, r4, [r5]
 8000b64:	2100      	movs	r1, #0
 8000b66:	e750      	b.n	8000a0a <__udivmoddi4+0xa6>
 8000b68:	f1c2 0320 	rsb	r3, r2, #32
 8000b6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b74:	fa24 f303 	lsr.w	r3, r4, r3
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	430c      	orrs	r4, r1
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b84:	fa1f f78c 	uxth.w	r7, ip
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000b90:	0c23      	lsrs	r3, r4, #16
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	fb00 f107 	mul.w	r1, r0, r7
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x24c>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ba6:	d22c      	bcs.n	8000c02 <__udivmoddi4+0x29e>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d92a      	bls.n	8000c02 <__udivmoddi4+0x29e>
 8000bac:	3802      	subs	r0, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb01 f307 	mul.w	r3, r1, r7
 8000bc4:	42a3      	cmp	r3, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x276>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bd0:	d213      	bcs.n	8000bfa <__udivmoddi4+0x296>
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d911      	bls.n	8000bfa <__udivmoddi4+0x296>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4464      	add	r4, ip
 8000bda:	1ae4      	subs	r4, r4, r3
 8000bdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000be0:	e739      	b.n	8000a56 <__udivmoddi4+0xf2>
 8000be2:	4604      	mov	r4, r0
 8000be4:	e6f0      	b.n	80009c8 <__udivmoddi4+0x64>
 8000be6:	4608      	mov	r0, r1
 8000be8:	e706      	b.n	80009f8 <__udivmoddi4+0x94>
 8000bea:	45c8      	cmp	r8, r9
 8000bec:	d2ae      	bcs.n	8000b4c <__udivmoddi4+0x1e8>
 8000bee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bf2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bf6:	3801      	subs	r0, #1
 8000bf8:	e7a8      	b.n	8000b4c <__udivmoddi4+0x1e8>
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	e7ed      	b.n	8000bda <__udivmoddi4+0x276>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	e799      	b.n	8000b36 <__udivmoddi4+0x1d2>
 8000c02:	4630      	mov	r0, r6
 8000c04:	e7d4      	b.n	8000bb0 <__udivmoddi4+0x24c>
 8000c06:	46d6      	mov	lr, sl
 8000c08:	e77f      	b.n	8000b0a <__udivmoddi4+0x1a6>
 8000c0a:	4463      	add	r3, ip
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	e74d      	b.n	8000aac <__udivmoddi4+0x148>
 8000c10:	4606      	mov	r6, r0
 8000c12:	4623      	mov	r3, r4
 8000c14:	4608      	mov	r0, r1
 8000c16:	e70f      	b.n	8000a38 <__udivmoddi4+0xd4>
 8000c18:	3e02      	subs	r6, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	e730      	b.n	8000a80 <__udivmoddi4+0x11c>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_idiv0>:
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	0000      	movs	r0, r0
	...

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b08b      	sub	sp, #44	@ 0x2c
 8000c2c:	af00      	add	r7, sp, #0


	double angle_rad;
	char msg[10];

	  uint32_t DAC_OUT[4] = {0, 1241, 2482, 3723};
 8000c2e:	4b44      	ldr	r3, [pc, #272]	@ (8000d40 <main+0x118>)
 8000c30:	1d3c      	adds	r4, r7, #4
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  uint8_t i = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 fc22 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f88a 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f000 fa00 	bl	8001048 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c48:	f000 f9ce 	bl	8000fe8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c4c:	f000 f8d6 	bl	8000dfc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000c50:	f000 f94a 	bl	8000ee8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000c54:	f000 f97a 	bl	8000f4c <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //Test: Set GPIO pin high
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f002 f89d 	bl	8002da0 <HAL_GPIO_WritePin>
	  // get ADC value
	  // HAL_ADC_Start(&hadc1);
	  //ADC1->ISR = 0;  //clear the status register
	  ADC1->CR |= ADC_CR_ADEN;		//ADC enable control
 8000c66:	4b37      	ldr	r3, [pc, #220]	@ (8000d44 <main+0x11c>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	4a36      	ldr	r2, [pc, #216]	@ (8000d44 <main+0x11c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6093      	str	r3, [r2, #8]
	  ADC1->CR |= ADC_CR_ADSTART;  //ADC start of regular conversion
 8000c72:	4b34      	ldr	r3, [pc, #208]	@ (8000d44 <main+0x11c>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	4a33      	ldr	r2, [pc, #204]	@ (8000d44 <main+0x11c>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6093      	str	r3, [r2, #8]

	  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	  while (!((ADC1->ISR) & ADC_ISR_EOC)){;} // wait for EOC (end of conversion) flag is set
 8000c7e:	bf00      	nop
 8000c80:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <main+0x11c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f9      	beq.n	8000c80 <main+0x58>
	  //raw = HAL_ADC_GetValue(&hadc1);
	  raw = ADC1->DR;		//read adc regular data register
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <main+0x11c>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <main+0x120>)
 8000c94:	801a      	strh	r2, [r3, #0]
	  //Test: Set GPIO pin low
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f002 f87e 	bl	8002da0 <HAL_GPIO_WritePin>
	  // Convert to string and print
//	  sprintf(msg, "%hu\r\n", raw);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  //HAL_Delay(200);
	  // Write DAC pin
	  angle_rad += (PI/4096.0) ;
 8000ca4:	a322      	add	r3, pc, #136	@ (adr r3, 8000d30 <main+0x108>)
 8000ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000caa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000cae:	f7ff fbbb 	bl	8000428 <__adddf3>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  value = (uint16_t) (2048.0 + sin(angle_rad)*2048.0);
 8000cba:	ed97 0b08 	vldr	d0, [r7, #32]
 8000cbe:	f004 fbcb 	bl	8005458 <sin>
 8000cc2:	ec51 0b10 	vmov	r0, r1, d0
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <main+0x124>)
 8000ccc:	f7ff fa7c 	bl	80001c8 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <main+0x124>)
 8000cde:	f7ff fba3 	bl	8000428 <__adddf3>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f7ff fe03 	bl	80008f4 <__aeabi_d2uiz>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <main+0x128>)
 8000cf4:	801a      	strh	r2, [r3, #0]
	  if(angle_rad >= 2*PI)
 8000cf6:	a310      	add	r3, pc, #64	@ (adr r3, 8000d38 <main+0x110>)
 8000cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d00:	f7ff fdbc 	bl	800087c <__aeabi_dcmpge>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <main+0xee>
		  angle_rad = 0;
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <main+0x128>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <main+0x12c>)
 8000d20:	f001 fd48 	bl	80027b4 <HAL_DAC_SetValue>
	  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000d24:	2100      	movs	r1, #0
 8000d26:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <main+0x12c>)
 8000d28:	f001 fcf7 	bl	800271a <HAL_DAC_Start>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d2c:	e794      	b.n	8000c58 <main+0x30>
 8000d2e:	bf00      	nop
 8000d30:	54442d18 	.word	0x54442d18
 8000d34:	3f4921fb 	.word	0x3f4921fb
 8000d38:	54442d18 	.word	0x54442d18
 8000d3c:	401921fb 	.word	0x401921fb
 8000d40:	080064d0 	.word	0x080064d0
 8000d44:	50040000 	.word	0x50040000
 8000d48:	20000174 	.word	0x20000174
 8000d4c:	40a00000 	.word	0x40a00000
 8000d50:	20000176 	.word	0x20000176
 8000d54:	2000008c 	.word	0x2000008c

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b096      	sub	sp, #88	@ 0x58
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	2244      	movs	r2, #68	@ 0x44
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fb49 	bl	80053fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d7e:	f002 f835 	bl	8002dec <HAL_PWREx_ControlVoltageScaling>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d88:	f000 f9c6 	bl	8001118 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d96:	2310      	movs	r3, #16
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000da6:	230a      	movs	r3, #10
 8000da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000daa:	2307      	movs	r3, #7
 8000dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 f86c 	bl	8002e98 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dc6:	f000 f9a7 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2104      	movs	r1, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fc34 	bl	8003650 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dee:	f000 f993 	bl	8001118 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3758      	adds	r7, #88	@ 0x58
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e20:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e24:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e36:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7e:	4817      	ldr	r0, [pc, #92]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e80:	f000 fd2c 	bl	80018dc <HAL_ADC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e8a:	f000 f945 	bl	8001118 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4810      	ldr	r0, [pc, #64]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000e9a:	f001 fa87 	bl	80023ac <HAL_ADCEx_MultiModeConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ea4:	f000 f938 	bl	8001118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <MX_ADC1_Init+0xe8>)
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eac:	2306      	movs	r3, #6
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb4:	237f      	movs	r3, #127	@ 0x7f
 8000eb6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_ADC1_Init+0xe0>)
 8000ec6:	f000 fe59 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ed0:	f000 f922 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	@ 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000028 	.word	0x20000028
 8000ee0:	50040000 	.word	0x50040000
 8000ee4:	14f00020 	.word	0x14f00020

08000ee8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2224      	movs	r2, #36	@ 0x24
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 fa82 	bl	80053fe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_DAC1_Init+0x5c>)
 8000efc:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_DAC1_Init+0x60>)
 8000efe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f00:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <MX_DAC1_Init+0x5c>)
 8000f02:	f001 fbe8 	bl	80026d6 <HAL_DAC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f0c:	f000 f904 	bl	8001118 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MX_DAC1_Init+0x5c>)
 8000f2c:	f001 fc67 	bl	80027fe <HAL_DAC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f36:	f000 f8ef 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	@ 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000008c 	.word	0x2000008c
 8000f48:	40007400 	.word	0x40007400

08000f4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f74:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000f78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f82:	2213      	movs	r2, #19
 8000f84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f94:	4813      	ldr	r0, [pc, #76]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f96:	f003 fa3b 	bl	8004410 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000fa0:	f000 f8ba 	bl	8001118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000fb2:	f003 fa84 	bl	80044be <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000fbc:	f000 f8ac 	bl	8001118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000fce:	f003 fc73 	bl	80048b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000fd8:	f000 f89e 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000a0 	.word	0x200000a0

08000fe8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <MX_USART2_UART_Init+0x5c>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_USART2_UART_Init+0x58>)
 800102c:	f003 fccc 	bl	80049c8 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001036:	f000 f86f 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000ec 	.word	0x200000ec
 8001044:	40004400 	.word	0x40004400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <MX_GPIO_Init+0xc8>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a2b      	ldr	r2, [pc, #172]	@ (8001110 <MX_GPIO_Init+0xc8>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <MX_GPIO_Init+0xc8>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001076:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <MX_GPIO_Init+0xc8>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a25      	ldr	r2, [pc, #148]	@ (8001110 <MX_GPIO_Init+0xc8>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <MX_GPIO_Init+0xc8>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <MX_GPIO_Init+0xc8>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a1f      	ldr	r2, [pc, #124]	@ (8001110 <MX_GPIO_Init+0xc8>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <MX_GPIO_Init+0xc8>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <MX_GPIO_Init+0xc8>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <MX_GPIO_Init+0xc8>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_GPIO_Init+0xc8>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f001 fe6a 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <MX_GPIO_Init+0xcc>)
 80010e4:	f001 fcb2 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f001 fca2 	bl	8002a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <Error_Handler+0x8>

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_MspInit+0x44>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <HAL_MspInit+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6613      	str	r3, [r2, #96]	@ 0x60
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_MspInit+0x44>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_MspInit+0x44>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114c:	6593      	str	r3, [r2, #88]	@ 0x58
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ac      	sub	sp, #176	@ 0xb0
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2288      	movs	r2, #136	@ 0x88
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f936 	bl	80053fe <memset>
  if(hadc->Instance==ADC1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_ADC_MspInit+0xc8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d147      	bne.n	800122c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800119c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011b2:	2308      	movs	r3, #8
 80011b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fc63 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011d8:	f7ff ff9e 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_ADC_MspInit+0xcc>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	4a15      	ldr	r2, [pc, #84]	@ (8001238 <HAL_ADC_MspInit+0xcc>)
 80011e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_ADC_MspInit+0xcc>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <HAL_ADC_MspInit+0xcc>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001238 <HAL_ADC_MspInit+0xcc>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001200:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <HAL_ADC_MspInit+0xcc>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120c:	2301      	movs	r3, #1
 800120e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001212:	230b      	movs	r3, #11
 8001214:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001228:	f001 fc10 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	37b0      	adds	r7, #176	@ 0xb0
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	50040000 	.word	0x50040000
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a15      	ldr	r2, [pc, #84]	@ (80012b0 <HAL_DAC_MspInit+0x74>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d124      	bne.n	80012a8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_DAC_MspInit+0x78>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <HAL_DAC_MspInit+0x78>)
 8001264:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001268:	6593      	str	r3, [r2, #88]	@ 0x58
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_DAC_MspInit+0x78>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <HAL_DAC_MspInit+0x78>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <HAL_DAC_MspInit+0x78>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <HAL_DAC_MspInit+0x78>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800128e:	2310      	movs	r3, #16
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f001 fbd2 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40007400 	.word	0x40007400
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c8:	d10b      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_TIM_Base_MspInit+0x38>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_TIM_Base_MspInit+0x38>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_TIM_Base_MspInit+0x38>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0ac      	sub	sp, #176	@ 0xb0
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2288      	movs	r2, #136	@ 0x88
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f004 f872 	bl	80053fe <memset>
  if(huart->Instance==USART2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <HAL_UART_MspInit+0xb0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13b      	bne.n	800139c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001328:	2300      	movs	r3, #0
 800132a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fbb1 	bl	8003a98 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800133c:	f7ff feec 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 8001346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134a:	6593      	str	r3, [r2, #88]	@ 0x58
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_UART_MspInit+0xb4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001370:	230c      	movs	r3, #12
 8001372:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001388:	2307      	movs	r3, #7
 800138a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f001 fb58 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	37b0      	adds	r7, #176	@ 0xb0
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40021000 	.word	0x40021000

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <NMI_Handler+0x4>

080013b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <MemManage_Handler+0x4>

080013c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 f89b 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff ffea 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	@ (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	@ (800147c <LoopForever+0x16>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f003 ffd7 	bl	8005410 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7ff fbe1 	bl	8000c28 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001474:	08006710 	.word	0x08006710
  ldr r2, =_sbss
 8001478:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800147c:	2000017c 	.word	0x2000017c

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_Init+0x3c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <HAL_Init+0x3c>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001498:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f001 f8e8 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 f80f 	bl	80014c4 <HAL_InitTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	e001      	b.n	80014b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b2:	f7ff fe37 	bl	8001124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_InitTick+0x6c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d023      	beq.n	8001520 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_InitTick+0x70>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_InitTick+0x6c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 f8e5 	bl	80026be <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d809      	bhi.n	8001514 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f001 f8bd 	bl	8002686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800150c:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <HAL_InitTick+0x74>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e007      	b.n	8001524 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e004      	b.n	8001524 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e001      	b.n	8001524 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	20000000 	.word	0x20000000
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	20000178 	.word	0x20000178

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000178 	.word	0x20000178

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008

080015c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3360      	adds	r3, #96	@ 0x60
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <LL_ADC_SetOffset+0x44>)
 800164e:	4013      	ands	r3, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	4313      	orrs	r3, r2
 800165c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	03fff000 	.word	0x03fff000

08001674 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3360      	adds	r3, #96	@ 0x60
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3360      	adds	r3, #96	@ 0x60
 80016b0:	461a      	mov	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b087      	sub	sp, #28
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3330      	adds	r3, #48	@ 0x30
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	211f      	movs	r1, #31
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	401a      	ands	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0e9b      	lsrs	r3, r3, #26
 800170e:	f003 011f 	and.w	r1, r3, #31
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800172e:	b480      	push	{r7}
 8001730:	b087      	sub	sp, #28
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3314      	adds	r3, #20
 800173e:	461a      	mov	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	0e5b      	lsrs	r3, r3, #25
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	0d1b      	lsrs	r3, r3, #20
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	2107      	movs	r1, #7
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	0d1b      	lsrs	r3, r3, #20
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	431a      	orrs	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0318 	and.w	r3, r3, #24
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017a8:	40d9      	lsrs	r1, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	400b      	ands	r3, r1
 80017ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b2:	431a      	orrs	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	0007ffff 	.word	0x0007ffff

080017cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6093      	str	r3, [r2, #8]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001804:	d101      	bne.n	800180a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800182c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001854:	d101      	bne.n	800185a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <LL_ADC_IsEnabled+0x18>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_ADC_IsEnabled+0x1a>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d101      	bne.n	80018cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e130      	b.n	8001b58 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fc31 	bl	800116c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff67 	bl	80017f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff4d 	bl	80017cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff82 	bl	8001840 <LL_ADC_IsInternalRegulatorEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d115      	bne.n	800196e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff66 	bl	8001818 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800194c:	4b84      	ldr	r3, [pc, #528]	@ (8001b60 <HAL_ADC_Init+0x284>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	4a84      	ldr	r2, [pc, #528]	@ (8001b64 <HAL_ADC_Init+0x288>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	3301      	adds	r3, #1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001960:	e002      	b.n	8001968 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3b01      	subs	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff64 	bl	8001840 <LL_ADC_IsInternalRegulatorEnabled>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10d      	bne.n	800199a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001982:	f043 0210 	orr.w	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff75 	bl	800188e <LL_ADC_REG_IsConversionOngoing>
 80019a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 80c9 	bne.w	8001b46 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 80c5 	bne.w	8001b46 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019c4:	f043 0202 	orr.w	r2, r3, #2
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff49 	bl	8001868 <LL_ADC_IsEnabled>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d115      	bne.n	8001a08 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019dc:	4862      	ldr	r0, [pc, #392]	@ (8001b68 <HAL_ADC_Init+0x28c>)
 80019de:	f7ff ff43 	bl	8001868 <LL_ADC_IsEnabled>
 80019e2:	4604      	mov	r4, r0
 80019e4:	4861      	ldr	r0, [pc, #388]	@ (8001b6c <HAL_ADC_Init+0x290>)
 80019e6:	f7ff ff3f 	bl	8001868 <LL_ADC_IsEnabled>
 80019ea:	4603      	mov	r3, r0
 80019ec:	431c      	orrs	r4, r3
 80019ee:	4860      	ldr	r0, [pc, #384]	@ (8001b70 <HAL_ADC_Init+0x294>)
 80019f0:	f7ff ff3a 	bl	8001868 <LL_ADC_IsEnabled>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4323      	orrs	r3, r4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4619      	mov	r1, r3
 8001a02:	485c      	ldr	r0, [pc, #368]	@ (8001b74 <HAL_ADC_Init+0x298>)
 8001a04:	f7ff fdde 	bl	80015c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e5b      	ldrb	r3, [r3, #25]
 8001a0c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a12:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a18:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a1e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a26:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	045b      	lsls	r3, r3, #17
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <HAL_ADC_Init+0x29c>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff1b 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 8001a7e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d13d      	bne.n	8001b02 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d13a      	bne.n	8001b02 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a90:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a98:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001aa8:	f023 0302 	bic.w	r3, r3, #2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	69b9      	ldr	r1, [r7, #24]
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d118      	bne.n	8001af2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	e007      	b.n	8001b02 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10c      	bne.n	8001b24 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b10:	f023 010f 	bic.w	r1, r3, #15
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b22:	e007      	b.n	8001b34 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 020f 	bic.w	r2, r2, #15
 8001b32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b38:	f023 0303 	bic.w	r3, r3, #3
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b44:	e007      	b.n	8001b56 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3724      	adds	r7, #36	@ 0x24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	20000000 	.word	0x20000000
 8001b64:	053e2d63 	.word	0x053e2d63
 8001b68:	50040000 	.word	0x50040000
 8001b6c:	50040100 	.word	0x50040100
 8001b70:	50040200 	.word	0x50040200
 8001b74:	50040300 	.word	0x50040300
 8001b78:	fff0c007 	.word	0xfff0c007

08001b7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0b6      	sub	sp, #216	@ 0xd8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x22>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e3c9      	b.n	8002332 <HAL_ADC_ConfigChannel+0x7b6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fe6f 	bl	800188e <LL_ADC_REG_IsConversionOngoing>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 83aa 	bne.w	800230c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d824      	bhi.n	8001c12 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	3b02      	subs	r3, #2
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d81b      	bhi.n	8001c0a <HAL_ADC_ConfigChannel+0x8e>
 8001bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd8 <HAL_ADC_ConfigChannel+0x5c>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001bf1 	.word	0x08001bf1
 8001be0:	08001bf9 	.word	0x08001bf9
 8001be4:	08001c01 	.word	0x08001c01
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001be8:	230c      	movs	r3, #12
 8001bea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bee:	e010      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bf6:	e00c      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001bf8:	2318      	movs	r3, #24
 8001bfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bfe:	e008      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c08:	e003      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001c10:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001c20:	f7ff fd59 	bl	80016d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fe30 	bl	800188e <LL_ADC_REG_IsConversionOngoing>
 8001c2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fe3c 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 8001c3c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 81a4 	bne.w	8001f92 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 819f 	bne.w	8001f92 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	461a      	mov	r2, r3
 8001c62:	f7ff fd64 	bl	800172e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d00a      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6919      	ldr	r1, [r3, #16]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c98:	f7ff fcc8 	bl	800162c <LL_ADC_SetOffset>
 8001c9c:	e179      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fce5 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x14e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fcda 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	e01e      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x18c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fccf 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ce8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	e004      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001cfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1a4>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	e018      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1d6>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e004      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d106      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fc9e 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fc82 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x214>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fc77 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	f003 021f 	and.w	r2, r3, #31
 8001d8e:	e01e      	b.n	8001dce <HAL_ADC_ConfigChannel+0x252>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fc6c 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001dae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e004      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x26a>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0e9b      	lsrs	r3, r3, #26
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	e018      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x29c>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e004      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d106      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	2101      	movs	r1, #1
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fc3b 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2102      	movs	r1, #2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fc1f 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x2da>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2102      	movs	r1, #2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fc14 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	e01e      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x318>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fc09 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	e004      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x330>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	e014      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x35a>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	e004      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d106      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fbdc 	bl	80016a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2103      	movs	r1, #3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fbc0 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x398>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fbb5 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	f003 021f 	and.w	r2, r3, #31
 8001f12:	e017      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x3c8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2103      	movs	r1, #3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fbaa 	bl	8001674 <LL_ADC_GetOffsetChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f2e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e003      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x3e0>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	e011      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x404>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e003      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d106      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fb87 	bl	80016a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fc66 	bl	8001868 <LL_ADC_IsEnabled>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8140 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f7ff fbe7 	bl	8001784 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a8f      	ldr	r2, [pc, #572]	@ (80021f8 <HAL_ADC_ConfigChannel+0x67c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	f040 8131 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x46e>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	bf94      	ite	ls
 8001fe2:	2301      	movls	r3, #1
 8001fe4:	2300      	movhi	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e019      	b.n	800201e <HAL_ADC_ConfigChannel+0x4a2>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e003      	b.n	800200e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2b09      	cmp	r3, #9
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800201e:	2b00      	cmp	r3, #0
 8002020:	d079      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <HAL_ADC_ConfigChannel+0x4c2>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e9b      	lsrs	r3, r3, #26
 8002034:	3301      	adds	r3, #1
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800203c:	e015      	b.n	800206a <HAL_ADC_ConfigChannel+0x4ee>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800204c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800204e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e003      	b.n	8002062 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800205a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	069b      	lsls	r3, r3, #26
 8002066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_ADC_ConfigChannel+0x50e>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0e9b      	lsrs	r3, r3, #26
 800207c:	3301      	adds	r3, #1
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	e017      	b.n	80020ba <HAL_ADC_ConfigChannel+0x53e>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800209c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e003      	b.n	80020ae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80020a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	ea42 0103 	orr.w	r1, r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x564>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 021f 	and.w	r2, r3, #31
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	051b      	lsls	r3, r3, #20
 80020de:	e018      	b.n	8002112 <HAL_ADC_ConfigChannel+0x596>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80020ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80020f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e003      	b.n	8002104 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80020fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002112:	430b      	orrs	r3, r1
 8002114:	e081      	b.n	800221a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x5b6>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	3301      	adds	r3, #1
 800212a:	069b      	lsls	r3, r3, #26
 800212c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002130:	e015      	b.n	800215e <HAL_ADC_ConfigChannel+0x5e2>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800214a:	2320      	movs	r3, #32
 800214c:	e003      	b.n	8002156 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800214e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3301      	adds	r3, #1
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_ADC_ConfigChannel+0x602>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	3301      	adds	r3, #1
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	e017      	b.n	80021ae <HAL_ADC_ConfigChannel+0x632>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	61bb      	str	r3, [r7, #24]
  return result;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e003      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	ea42 0103 	orr.w	r1, r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_ADC_ConfigChannel+0x65e>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	3301      	adds	r3, #1
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3b1e      	subs	r3, #30
 80021d2:	051b      	lsls	r3, r3, #20
 80021d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021d8:	e01e      	b.n	8002218 <HAL_ADC_ConfigChannel+0x69c>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	60fb      	str	r3, [r7, #12]
  return result;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80021f2:	2320      	movs	r3, #32
 80021f4:	e006      	b.n	8002204 <HAL_ADC_ConfigChannel+0x688>
 80021f6:	bf00      	nop
 80021f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3301      	adds	r3, #1
 8002206:	f003 021f 	and.w	r2, r3, #31
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	051b      	lsls	r3, r3, #20
 8002214:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002218:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221e:	4619      	mov	r1, r3
 8002220:	f7ff fa85 	bl	800172e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b44      	ldr	r3, [pc, #272]	@ (800233c <HAL_ADC_ConfigChannel+0x7c0>)
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d07a      	beq.n	8002326 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002230:	4843      	ldr	r0, [pc, #268]	@ (8002340 <HAL_ADC_ConfigChannel+0x7c4>)
 8002232:	f7ff f9ed 	bl	8001610 <LL_ADC_GetCommonPathInternalCh>
 8002236:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a41      	ldr	r2, [pc, #260]	@ (8002344 <HAL_ADC_ConfigChannel+0x7c8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d12c      	bne.n	800229e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d126      	bne.n	800229e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a3c      	ldr	r2, [pc, #240]	@ (8002348 <HAL_ADC_ConfigChannel+0x7cc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x6e8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a3b      	ldr	r2, [pc, #236]	@ (800234c <HAL_ADC_ConfigChannel+0x7d0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d15d      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002268:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800226c:	4619      	mov	r1, r3
 800226e:	4834      	ldr	r0, [pc, #208]	@ (8002340 <HAL_ADC_ConfigChannel+0x7c4>)
 8002270:	f7ff f9bb 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <HAL_ADC_ConfigChannel+0x7d4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	4a36      	ldr	r2, [pc, #216]	@ (8002354 <HAL_ADC_ConfigChannel+0x7d8>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800228e:	e002      	b.n	8002296 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3b01      	subs	r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f9      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800229c:	e040      	b.n	8002320 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002358 <HAL_ADC_ConfigChannel+0x7dc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d118      	bne.n	80022da <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d112      	bne.n	80022da <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a23      	ldr	r2, [pc, #140]	@ (8002348 <HAL_ADC_ConfigChannel+0x7cc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d004      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x74c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a22      	ldr	r2, [pc, #136]	@ (800234c <HAL_ADC_ConfigChannel+0x7d0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d12d      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d0:	4619      	mov	r1, r3
 80022d2:	481b      	ldr	r0, [pc, #108]	@ (8002340 <HAL_ADC_ConfigChannel+0x7c4>)
 80022d4:	f7ff f989 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d8:	e024      	b.n	8002324 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_ADC_ConfigChannel+0x7e0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d120      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11a      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <HAL_ADC_ConfigChannel+0x7cc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d115      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002302:	4619      	mov	r1, r3
 8002304:	480e      	ldr	r0, [pc, #56]	@ (8002340 <HAL_ADC_ConfigChannel+0x7c4>)
 8002306:	f7ff f970 	bl	80015ea <LL_ADC_SetCommonPathInternalCh>
 800230a:	e00c      	b.n	8002326 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	f043 0220 	orr.w	r2, r3, #32
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800231e:	e002      	b.n	8002326 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002324:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800232e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002332:	4618      	mov	r0, r3
 8002334:	37d8      	adds	r7, #216	@ 0xd8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	80080000 	.word	0x80080000
 8002340:	50040300 	.word	0x50040300
 8002344:	c7520000 	.word	0xc7520000
 8002348:	50040000 	.word	0x50040000
 800234c:	50040200 	.word	0x50040200
 8002350:	20000000 	.word	0x20000000
 8002354:	053e2d63 	.word	0x053e2d63
 8002358:	cb840000 	.word	0xcb840000
 800235c:	80000001 	.word	0x80000001

08002360 <LL_ADC_IsEnabled>:
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <LL_ADC_IsEnabled+0x18>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <LL_ADC_IsEnabled+0x1a>
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_REG_IsConversionOngoing>:
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b04      	cmp	r3, #4
 8002398:	d101      	bne.n	800239e <LL_ADC_REG_IsConversionOngoing+0x18>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b09f      	sub	sp, #124	@ 0x7c
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e093      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80023d2:	2300      	movs	r3, #0
 80023d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80023d6:	2300      	movs	r3, #0
 80023d8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a47      	ldr	r2, [pc, #284]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d102      	bne.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023e4:	4b46      	ldr	r3, [pc, #280]	@ (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	e001      	b.n	80023ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e072      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ffb9 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002414:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ffb3 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d154      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002428:	2b00      	cmp	r3, #0
 800242a:	d151      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800242c:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800242e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02c      	beq.n	8002492 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800244a:	035b      	lsls	r3, r3, #13
 800244c:	430b      	orrs	r3, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002452:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002454:	4829      	ldr	r0, [pc, #164]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002456:	f7ff ff83 	bl	8002360 <LL_ADC_IsEnabled>
 800245a:	4604      	mov	r4, r0
 800245c:	4828      	ldr	r0, [pc, #160]	@ (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800245e:	f7ff ff7f 	bl	8002360 <LL_ADC_IsEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	431c      	orrs	r4, r3
 8002466:	4828      	ldr	r0, [pc, #160]	@ (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002468:	f7ff ff7a 	bl	8002360 <LL_ADC_IsEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	4323      	orrs	r3, r4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d137      	bne.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800247c:	f023 030f 	bic.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	6811      	ldr	r1, [r2, #0]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	6892      	ldr	r2, [r2, #8]
 8002488:	430a      	orrs	r2, r1
 800248a:	431a      	orrs	r2, r3
 800248c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002490:	e028      	b.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800249a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800249c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800249e:	4817      	ldr	r0, [pc, #92]	@ (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024a0:	f7ff ff5e 	bl	8002360 <LL_ADC_IsEnabled>
 80024a4:	4604      	mov	r4, r0
 80024a6:	4816      	ldr	r0, [pc, #88]	@ (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024a8:	f7ff ff5a 	bl	8002360 <LL_ADC_IsEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	431c      	orrs	r4, r3
 80024b0:	4815      	ldr	r0, [pc, #84]	@ (8002508 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024b2:	f7ff ff55 	bl	8002360 <LL_ADC_IsEnabled>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4323      	orrs	r3, r4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d112      	bne.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024c6:	f023 030f 	bic.w	r3, r3, #15
 80024ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024ce:	e009      	b.n	80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80024e2:	e000      	b.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	377c      	adds	r7, #124	@ 0x7c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	50040000 	.word	0x50040000
 8002500:	50040100 	.word	0x50040100
 8002504:	50040300 	.word	0x50040300
 8002508:	50040200 	.word	0x50040200

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	@ (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	@ (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	@ 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	@ 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff8e 	bl	8002570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff47 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff5c 	bl	8002554 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff8e 	bl	80025c4 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5d 	bl	8002570 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffb0 	bl	800262c <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e014      	b.n	8002712 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7fe fd9f 	bl	800123c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	795b      	ldrb	r3, [r3, #5]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_DAC_Start+0x16>
 800272c:	2302      	movs	r3, #2
 800272e:	e03b      	b.n	80027a8 <HAL_DAC_Start+0x8e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2201      	movs	r2, #1
 800274a:	409a      	lsls	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002764:	2b04      	cmp	r3, #4
 8002766:	d118      	bne.n	800279a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	e00f      	b.n	800279a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002788:	d107      	bne.n	800279a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0202 	orr.w	r2, r2, #2
 8002798:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	3308      	adds	r3, #8
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e004      	b.n	80027e8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	3314      	adds	r3, #20
 80027e6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	461a      	mov	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b088      	sub	sp, #32
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	795b      	ldrb	r3, [r3, #5]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_DAC_ConfigChannel+0x1c>
 8002816:	2302      	movs	r3, #2
 8002818:	e114      	b.n	8002a44 <HAL_DAC_ConfigChannel+0x246>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2202      	movs	r2, #2
 8002824:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b04      	cmp	r3, #4
 800282c:	f040 8081 	bne.w	8002932 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002830:	f7fe fe98 	bl	8001564 <HAL_GetTick>
 8002834:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d140      	bne.n	80028be <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800283c:	e018      	b.n	8002870 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800283e:	f7fe fe91 	bl	8001564 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d911      	bls.n	8002870 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f043 0208 	orr.w	r2, r3, #8
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2203      	movs	r2, #3
 800286a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0e9      	b.n	8002a44 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1df      	bne.n	800283e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f7fe fe7c 	bl	800157c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	6992      	ldr	r2, [r2, #24]
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
 800288e:	e023      	b.n	80028d8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002890:	f7fe fe68 	bl	8001564 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d90f      	bls.n	80028be <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	da0a      	bge.n	80028be <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f043 0208 	orr.w	r2, r3, #8
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2203      	movs	r2, #3
 80028b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0c2      	b.n	8002a44 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	dbe3      	blt.n	8002890 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80028c8:	2001      	movs	r0, #1
 80028ca:	f7fe fe57 	bl	800157c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	6992      	ldr	r2, [r2, #24]
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	ea02 0103 	and.w	r1, r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	21ff      	movs	r1, #255	@ 0xff
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	ea02 0103 	and.w	r1, r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d11d      	bne.n	8002976 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002940:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	221f      	movs	r2, #31
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2207      	movs	r2, #7
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	431a      	orrs	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	400a      	ands	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6819      	ldr	r1, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	22c0      	movs	r2, #192	@ 0xc0
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5a:	e17f      	b.n	8002d5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8171 	beq.w	8002d56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d005      	beq.n	8002a8c <HAL_GPIO_Init+0x40>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d130      	bne.n	8002aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0201 	and.w	r2, r3, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d118      	bne.n	8002b2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	6939      	ldr	r1, [r7, #16]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80ac 	beq.w	8002d56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002d7c <HAL_GPIO_Init+0x330>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c02:	4a5e      	ldr	r2, [pc, #376]	@ (8002d7c <HAL_GPIO_Init+0x330>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d7c <HAL_GPIO_Init+0x330>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c16:	4a5a      	ldr	r2, [pc, #360]	@ (8002d80 <HAL_GPIO_Init+0x334>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c40:	d025      	beq.n	8002c8e <HAL_GPIO_Init+0x242>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4f      	ldr	r2, [pc, #316]	@ (8002d84 <HAL_GPIO_Init+0x338>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <HAL_GPIO_Init+0x23e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d88 <HAL_GPIO_Init+0x33c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x23a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4d      	ldr	r2, [pc, #308]	@ (8002d8c <HAL_GPIO_Init+0x340>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x236>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d90 <HAL_GPIO_Init+0x344>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x232>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	@ (8002d94 <HAL_GPIO_Init+0x348>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x22e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d98 <HAL_GPIO_Init+0x34c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x22a>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e00c      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c76:	2307      	movs	r3, #7
 8002c78:	e00a      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e008      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c82:	2303      	movs	r3, #3
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x244>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	f002 0203 	and.w	r2, r2, #3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ca0:	4937      	ldr	r1, [pc, #220]	@ (8002d80 <HAL_GPIO_Init+0x334>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cae:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cd2:	4a32      	ldr	r2, [pc, #200]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cd8:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cfc:	4a27      	ldr	r2, [pc, #156]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d02:	4b26      	ldr	r3, [pc, #152]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d26:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d50:	4a12      	ldr	r2, [pc, #72]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f47f ae78 	bne.w	8002a5c <HAL_GPIO_Init+0x10>
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010000 	.word	0x40010000
 8002d84:	48000400 	.word	0x48000400
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	48000c00 	.word	0x48000c00
 8002d90:	48001000 	.word	0x48001000
 8002d94:	48001400 	.word	0x48001400
 8002d98:	48001800 	.word	0x48001800
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
 8002dac:	4613      	mov	r3, r2
 8002dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db0:	787b      	ldrb	r3, [r7, #1]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40007000 	.word	0x40007000

08002dec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dfa:	d130      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfc:	4b23      	ldr	r3, [pc, #140]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e08:	d038      	beq.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e0a:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e12:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2232      	movs	r2, #50	@ 0x32
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0c9b      	lsrs	r3, r3, #18
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e30:	e002      	b.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e38:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e44:	d102      	bne.n	8002e4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f2      	bne.n	8002e32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e58:	d110      	bne.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e00f      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6a:	d007      	beq.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e6c:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e74:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	20000000 	.word	0x20000000
 8002e94:	431bde83 	.word	0x431bde83

08002e98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e3ca      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eaa:	4b97      	ldr	r3, [pc, #604]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb4:	4b94      	ldr	r3, [pc, #592]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80e4 	beq.w	8003094 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x4a>
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	f040 808b 	bne.w	8002ff0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	f040 8087 	bne.w	8002ff0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee2:	4b89      	ldr	r3, [pc, #548]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e3a2      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	4b82      	ldr	r3, [pc, #520]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_RCC_OscConfig+0x7c>
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_OscConfig+0x88>
 8002f14:	4b7c      	ldr	r3, [pc, #496]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d223      	bcs.n	8002f6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fd55 	bl	80039d8 <RCC_SetFlashLatencyFromMSIRange>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e383      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f38:	4b73      	ldr	r3, [pc, #460]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a72      	ldr	r2, [pc, #456]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b70      	ldr	r3, [pc, #448]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	496d      	ldr	r1, [pc, #436]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f56:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	4968      	ldr	r1, [pc, #416]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
 8002f6a:	e025      	b.n	8002fb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6c:	4b66      	ldr	r3, [pc, #408]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a65      	ldr	r2, [pc, #404]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f72:	f043 0308 	orr.w	r3, r3, #8
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4960      	ldr	r1, [pc, #384]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	495b      	ldr	r1, [pc, #364]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fd15 	bl	80039d8 <RCC_SetFlashLatencyFromMSIRange>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e343      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb8:	f000 fc4a 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b52      	ldr	r3, [pc, #328]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	4950      	ldr	r1, [pc, #320]	@ (800310c <HAL_RCC_OscConfig+0x274>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8003110 <HAL_RCC_OscConfig+0x278>)
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8003114 <HAL_RCC_OscConfig+0x27c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe fa71 	bl	80014c4 <HAL_InitTick>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d052      	beq.n	8003092 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	e327      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d032      	beq.n	800305e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ff8:	4b43      	ldr	r3, [pc, #268]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003004:	f7fe faae 	bl	8001564 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800300c:	f7fe faaa 	bl	8001564 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e310      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800301e:	4b3a      	ldr	r3, [pc, #232]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302a:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a36      	ldr	r2, [pc, #216]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003030:	f043 0308 	orr.w	r3, r3, #8
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b34      	ldr	r3, [pc, #208]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4931      	ldr	r1, [pc, #196]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003048:	4b2f      	ldr	r3, [pc, #188]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	492c      	ldr	r1, [pc, #176]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	e01a      	b.n	8003094 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800305e:	4b2a      	ldr	r3, [pc, #168]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800306a:	f7fe fa7b 	bl	8001564 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003072:	f7fe fa77 	bl	8001564 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e2dd      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003084:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x1da>
 8003090:	e000      	b.n	8003094 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003092:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d074      	beq.n	800318a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d005      	beq.n	80030b2 <HAL_RCC_OscConfig+0x21a>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d10e      	bne.n	80030ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d10b      	bne.n	80030ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d064      	beq.n	8003188 <HAL_RCC_OscConfig+0x2f0>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d160      	bne.n	8003188 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e2ba      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x24a>
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e026      	b.n	8003130 <HAL_RCC_OscConfig+0x298>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ea:	d115      	bne.n	8003118 <HAL_RCC_OscConfig+0x280>
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a05      	ldr	r2, [pc, #20]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 80030f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a02      	ldr	r2, [pc, #8]	@ (8003108 <HAL_RCC_OscConfig+0x270>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	e014      	b.n	8003130 <HAL_RCC_OscConfig+0x298>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	080064e0 	.word	0x080064e0
 8003110:	20000000 	.word	0x20000000
 8003114:	20000004 	.word	0x20000004
 8003118:	4ba0      	ldr	r3, [pc, #640]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a9f      	ldr	r2, [pc, #636]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b9d      	ldr	r3, [pc, #628]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a9c      	ldr	r2, [pc, #624]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fa14 	bl	8001564 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fa10 	bl	8001564 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e276      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003152:	4b92      	ldr	r3, [pc, #584]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x2a8>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe fa00 	bl	8001564 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe f9fc 	bl	8001564 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e262      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317a:	4b88      	ldr	r3, [pc, #544]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x2d0>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d060      	beq.n	8003258 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_OscConfig+0x310>
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d119      	bne.n	80031d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d116      	bne.n	80031d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a8:	4b7c      	ldr	r3, [pc, #496]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_OscConfig+0x328>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e23f      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b76      	ldr	r3, [pc, #472]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	4973      	ldr	r1, [pc, #460]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d4:	e040      	b.n	8003258 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d023      	beq.n	8003226 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031de:	4b6f      	ldr	r3, [pc, #444]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fe f9bb 	bl	8001564 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f2:	f7fe f9b7 	bl	8001564 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e21d      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003204:	4b65      	ldr	r3, [pc, #404]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003210:	4b62      	ldr	r3, [pc, #392]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	495f      	ldr	r1, [pc, #380]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
 8003224:	e018      	b.n	8003258 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003226:	4b5d      	ldr	r3, [pc, #372]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5c      	ldr	r2, [pc, #368]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800322c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe f997 	bl	8001564 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323a:	f7fe f993 	bl	8001564 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1f9      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324c:	4b53      	ldr	r3, [pc, #332]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d03c      	beq.n	80032de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326c:	4b4b      	ldr	r3, [pc, #300]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800326e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003272:	4a4a      	ldr	r2, [pc, #296]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe f972 	bl	8001564 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe f96e 	bl	8001564 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1d4      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003296:	4b41      	ldr	r3, [pc, #260]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ef      	beq.n	8003284 <HAL_RCC_OscConfig+0x3ec>
 80032a4:	e01b      	b.n	80032de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a6:	4b3d      	ldr	r3, [pc, #244]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80032a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ac:	4a3b      	ldr	r2, [pc, #236]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe f955 	bl	8001564 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032be:	f7fe f951 	bl	8001564 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1b7      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d0:	4b32      	ldr	r3, [pc, #200]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ef      	bne.n	80032be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a6 	beq.w	8003438 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ec:	2300      	movs	r3, #0
 80032ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032f0:	4b2a      	ldr	r3, [pc, #168]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10d      	bne.n	8003318 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b27      	ldr	r3, [pc, #156]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	4a26      	ldr	r2, [pc, #152]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003306:	6593      	str	r3, [r2, #88]	@ 0x58
 8003308:	4b24      	ldr	r3, [pc, #144]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003314:	2301      	movs	r3, #1
 8003316:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <HAL_RCC_OscConfig+0x508>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d118      	bne.n	8003356 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003324:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <HAL_RCC_OscConfig+0x508>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <HAL_RCC_OscConfig+0x508>)
 800332a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003330:	f7fe f918 	bl	8001564 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003338:	f7fe f914 	bl	8001564 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e17a      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_RCC_OscConfig+0x508>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d108      	bne.n	8003370 <HAL_RCC_OscConfig+0x4d8>
 800335e:	4b0f      	ldr	r3, [pc, #60]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003364:	4a0d      	ldr	r2, [pc, #52]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800336e:	e029      	b.n	80033c4 <HAL_RCC_OscConfig+0x52c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b05      	cmp	r3, #5
 8003376:	d115      	bne.n	80033a4 <HAL_RCC_OscConfig+0x50c>
 8003378:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337e:	4a07      	ldr	r2, [pc, #28]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	4a03      	ldr	r2, [pc, #12]	@ (800339c <HAL_RCC_OscConfig+0x504>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003398:	e014      	b.n	80033c4 <HAL_RCC_OscConfig+0x52c>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
 80033a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	4a9b      	ldr	r2, [pc, #620]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033b4:	4b98      	ldr	r3, [pc, #608]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	4a97      	ldr	r2, [pc, #604]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d016      	beq.n	80033fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe f8ca 	bl	8001564 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fe f8c6 	bl	8001564 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e12a      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ed      	beq.n	80033d4 <HAL_RCC_OscConfig+0x53c>
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe f8b3 	bl	8001564 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe f8af 	bl	8001564 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e113      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003418:	4b7f      	ldr	r3, [pc, #508]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ed      	bne.n	8003402 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b7a      	ldr	r3, [pc, #488]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003430:	4a79      	ldr	r2, [pc, #484]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003436:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80fe 	beq.w	800363e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	2b02      	cmp	r3, #2
 8003448:	f040 80d0 	bne.w	80035ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800344c:	4b72      	ldr	r3, [pc, #456]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	429a      	cmp	r2, r3
 800345e:	d130      	bne.n	80034c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	3b01      	subs	r3, #1
 800346c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d127      	bne.n	80034c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d11f      	bne.n	80034c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800348c:	2a07      	cmp	r2, #7
 800348e:	bf14      	ite	ne
 8003490:	2201      	movne	r2, #1
 8003492:	2200      	moveq	r2, #0
 8003494:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003496:	4293      	cmp	r3, r2
 8003498:	d113      	bne.n	80034c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d06e      	beq.n	80035a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d069      	beq.n	800359c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034c8:	4b53      	ldr	r3, [pc, #332]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034d4:	4b50      	ldr	r3, [pc, #320]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0ad      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80034ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f0:	f7fe f838 	bl	8001564 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe f834 	bl	8001564 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e09a      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350a:	4b43      	ldr	r3, [pc, #268]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003516:	4b40      	ldr	r3, [pc, #256]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4b40      	ldr	r3, [pc, #256]	@ (800361c <HAL_RCC_OscConfig+0x784>)
 800351c:	4013      	ands	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003526:	3a01      	subs	r2, #1
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003530:	0212      	lsls	r2, r2, #8
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003538:	0852      	lsrs	r2, r2, #1
 800353a:	3a01      	subs	r2, #1
 800353c:	0552      	lsls	r2, r2, #21
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003544:	0852      	lsrs	r2, r2, #1
 8003546:	3a01      	subs	r2, #1
 8003548:	0652      	lsls	r2, r2, #25
 800354a:	4311      	orrs	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003550:	0912      	lsrs	r2, r2, #4
 8003552:	0452      	lsls	r2, r2, #17
 8003554:	430a      	orrs	r2, r1
 8003556:	4930      	ldr	r1, [pc, #192]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 8003558:	4313      	orrs	r3, r2
 800355a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800355c:	4b2e      	ldr	r3, [pc, #184]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2d      	ldr	r2, [pc, #180]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 8003562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003566:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003568:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a2a      	ldr	r2, [pc, #168]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 800356e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003572:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003574:	f7fd fff6 	bl	8001564 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fd fff2 	bl	8001564 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e058      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358e:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800359a:	e050      	b.n	800363e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e04f      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d148      	bne.n	800363e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a19      	ldr	r2, [pc, #100]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035c4:	f7fd ffce 	bl	8001564 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd ffca 	bl	8001564 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e030      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035de:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x734>
 80035ea:	e028      	b.n	800363e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d023      	beq.n	800363a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a08      	ldr	r2, [pc, #32]	@ (8003618 <HAL_RCC_OscConfig+0x780>)
 80035f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fd ffb1 	bl	8001564 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003604:	e00c      	b.n	8003620 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003606:	f7fd ffad 	bl	8001564 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d905      	bls.n	8003620 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
 8003618:	40021000 	.word	0x40021000
 800361c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <HAL_RCC_OscConfig+0x7b0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ec      	bne.n	8003606 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800362c:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <HAL_RCC_OscConfig+0x7b0>)
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4905      	ldr	r1, [pc, #20]	@ (8003648 <HAL_RCC_OscConfig+0x7b0>)
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_RCC_OscConfig+0x7b4>)
 8003634:	4013      	ands	r3, r2
 8003636:	60cb      	str	r3, [r1, #12]
 8003638:	e001      	b.n	800363e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	feeefffc 	.word	0xfeeefffc

08003650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0e7      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b75      	ldr	r3, [pc, #468]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d910      	bls.n	8003694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b72      	ldr	r3, [pc, #456]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 0207 	bic.w	r2, r3, #7
 800367a:	4970      	ldr	r1, [pc, #448]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b6e      	ldr	r3, [pc, #440]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0cf      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b66      	ldr	r3, [pc, #408]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d908      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b63      	ldr	r3, [pc, #396]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4960      	ldr	r1, [pc, #384]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d04c      	beq.n	8003768 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d121      	bne.n	8003726 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0a6      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ee:	4b54      	ldr	r3, [pc, #336]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d115      	bne.n	8003726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e09a      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003706:	4b4e      	ldr	r3, [pc, #312]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e08e      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003716:	4b4a      	ldr	r3, [pc, #296]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e086      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003726:	4b46      	ldr	r3, [pc, #280]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4943      	ldr	r1, [pc, #268]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003738:	f7fd ff14 	bl	8001564 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003740:	f7fd ff10 	bl	8001564 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e06e      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	4b3a      	ldr	r3, [pc, #232]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 020c 	and.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d1eb      	bne.n	8003740 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4b31      	ldr	r3, [pc, #196]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003780:	429a      	cmp	r2, r3
 8003782:	d208      	bcs.n	8003796 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b2e      	ldr	r3, [pc, #184]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	492b      	ldr	r1, [pc, #172]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003796:	4b29      	ldr	r3, [pc, #164]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d210      	bcs.n	80037c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a4:	4b25      	ldr	r3, [pc, #148]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 0207 	bic.w	r2, r3, #7
 80037ac:	4923      	ldr	r1, [pc, #140]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b4:	4b21      	ldr	r3, [pc, #132]	@ (800383c <HAL_RCC_ClockConfig+0x1ec>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e036      	b.n	8003834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4918      	ldr	r1, [pc, #96]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f0:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4910      	ldr	r1, [pc, #64]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003804:	f000 f824 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	490b      	ldr	r1, [pc, #44]	@ (8003844 <HAL_RCC_ClockConfig+0x1f4>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
 8003820:	4a09      	ldr	r2, [pc, #36]	@ (8003848 <HAL_RCC_ClockConfig+0x1f8>)
 8003822:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003824:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RCC_ClockConfig+0x1fc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd fe4b 	bl	80014c4 <HAL_InitTick>
 800382e:	4603      	mov	r3, r0
 8003830:	72fb      	strb	r3, [r7, #11]

  return status;
 8003832:	7afb      	ldrb	r3, [r7, #11]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40022000 	.word	0x40022000
 8003840:	40021000 	.word	0x40021000
 8003844:	080064e0 	.word	0x080064e0
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385e:	4b3e      	ldr	r3, [pc, #248]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003868:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x34>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d121      	bne.n	80038c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d11e      	bne.n	80038c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003884:	4b34      	ldr	r3, [pc, #208]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003890:	4b31      	ldr	r3, [pc, #196]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 8003892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e005      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038ac:	4a2b      	ldr	r2, [pc, #172]	@ (800395c <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038c8:	4b25      	ldr	r3, [pc, #148]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e004      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d4:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x114>)
 80038d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d134      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038de:	4b1e      	ldr	r3, [pc, #120]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d003      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0xac>
 80038f4:	e005      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x110>)
 80038f8:	617b      	str	r3, [r7, #20]
      break;
 80038fa:	e005      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x114>)
 80038fe:	617b      	str	r3, [r7, #20]
      break;
 8003900:	e002      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	617b      	str	r3, [r7, #20]
      break;
 8003906:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003908:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	3301      	adds	r3, #1
 8003914:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003916:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	fb03 f202 	mul.w	r2, r3, r2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	0e5b      	lsrs	r3, r3, #25
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	3301      	adds	r3, #1
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003948:	69bb      	ldr	r3, [r7, #24]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3724      	adds	r7, #36	@ 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	080064f8 	.word	0x080064f8
 8003960:	00f42400 	.word	0x00f42400
 8003964:	007a1200 	.word	0x007a1200

08003968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <HAL_RCC_GetHCLKFreq+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000000 	.word	0x20000000

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003984:	f7ff fff0 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4904      	ldr	r1, [pc, #16]	@ (80039a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	080064f0 	.word	0x080064f0

080039ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039b0:	f7ff ffda 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0adb      	lsrs	r3, r3, #11
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4904      	ldr	r1, [pc, #16]	@ (80039d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	080064f0 	.word	0x080064f0

080039d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039f0:	f7ff f9ee 	bl	8002dd0 <HAL_PWREx_GetVoltageRange>
 80039f4:	6178      	str	r0, [r7, #20]
 80039f6:	e014      	b.n	8003a22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fc:	4a24      	ldr	r2, [pc, #144]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a04:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a10:	f7ff f9de 	bl	8002dd0 <HAL_PWREx_GetVoltageRange>
 8003a14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a28:	d10b      	bne.n	8003a42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b80      	cmp	r3, #128	@ 0x80
 8003a2e:	d919      	bls.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a34:	d902      	bls.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a36:	2302      	movs	r3, #2
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e013      	b.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	e010      	b.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b80      	cmp	r3, #128	@ 0x80
 8003a46:	d902      	bls.n	8003a4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a48:	2303      	movs	r3, #3
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	e00a      	b.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b80      	cmp	r3, #128	@ 0x80
 8003a52:	d102      	bne.n	8003a5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a54:	2302      	movs	r3, #2
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	e004      	b.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b70      	cmp	r3, #112	@ 0x70
 8003a5e:	d101      	bne.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a60:	2301      	movs	r3, #1
 8003a62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 0207 	bic.w	r2, r3, #7
 8003a6c:	4909      	ldr	r1, [pc, #36]	@ (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a74:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d001      	beq.n	8003a86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40022000 	.word	0x40022000

08003a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d041      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003abc:	d02a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003abe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ac2:	d824      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ac4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ac8:	d008      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ace:	d81e      	bhi.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad8:	d010      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ada:	e018      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003adc:	4b86      	ldr	r3, [pc, #536]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a85      	ldr	r2, [pc, #532]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae8:	e015      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fabb 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003afa:	e00c      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3320      	adds	r3, #32
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fba6 	bl	8004254 <RCCEx_PLLSAI2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b0c:	e003      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	74fb      	strb	r3, [r7, #19]
      break;
 8003b12:	e000      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1c:	4b76      	ldr	r3, [pc, #472]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b2a:	4973      	ldr	r1, [pc, #460]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b32:	e001      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d041      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b4c:	d02a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b52:	d824      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b58:	d008      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b5e:	d81e      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b68:	d010      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b6a:	e018      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b6c:	4b62      	ldr	r3, [pc, #392]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a61      	ldr	r2, [pc, #388]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b78:	e015      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fa73 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b8a:	e00c      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3320      	adds	r3, #32
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fb5e 	bl	8004254 <RCCEx_PLLSAI2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bac:	4b52      	ldr	r3, [pc, #328]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bba:	494f      	ldr	r1, [pc, #316]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80a0 	beq.w	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bda:	4b47      	ldr	r3, [pc, #284]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b41      	ldr	r3, [pc, #260]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf4:	4a40      	ldr	r2, [pc, #256]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a3a      	ldr	r2, [pc, #232]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c18:	f7fd fca4 	bl	8001564 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c1e:	e009      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fd fca0 	bl	8001564 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	74fb      	strb	r3, [r7, #19]
        break;
 8003c32:	e005      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c34:	4b31      	ldr	r3, [pc, #196]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ef      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d15c      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c46:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01f      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d019      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c64:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c70:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c80:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c90:	4a19      	ldr	r2, [pc, #100]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fd fc5f 	bl	8001564 <HAL_GetTick>
 8003ca6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	e00b      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fc5b 	bl	8001564 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d902      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	74fb      	strb	r3, [r7, #19]
            break;
 8003cc0:	e006      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ec      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd6:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce6:	4904      	ldr	r1, [pc, #16]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cee:	e009      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	74bb      	strb	r3, [r7, #18]
 8003cf4:	e006      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d04:	7c7b      	ldrb	r3, [r7, #17]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d105      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0e:	4a9d      	ldr	r2, [pc, #628]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d22:	4b98      	ldr	r3, [pc, #608]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d28:	f023 0203 	bic.w	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	4994      	ldr	r1, [pc, #592]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d44:	4b8f      	ldr	r3, [pc, #572]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	f023 020c 	bic.w	r2, r3, #12
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	498c      	ldr	r1, [pc, #560]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d66:	4b87      	ldr	r3, [pc, #540]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	4983      	ldr	r1, [pc, #524]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d88:	4b7e      	ldr	r3, [pc, #504]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	497b      	ldr	r1, [pc, #492]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003daa:	4b76      	ldr	r3, [pc, #472]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db8:	4972      	ldr	r1, [pc, #456]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dcc:	4b6d      	ldr	r3, [pc, #436]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dda:	496a      	ldr	r1, [pc, #424]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dee:	4b65      	ldr	r3, [pc, #404]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	4961      	ldr	r1, [pc, #388]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e10:	4b5c      	ldr	r3, [pc, #368]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1e:	4959      	ldr	r1, [pc, #356]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e32:	4b54      	ldr	r3, [pc, #336]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e40:	4950      	ldr	r1, [pc, #320]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e54:	4b4b      	ldr	r3, [pc, #300]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	4948      	ldr	r1, [pc, #288]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e76:	4b43      	ldr	r3, [pc, #268]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	493f      	ldr	r1, [pc, #252]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d028      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e98:	4b3a      	ldr	r3, [pc, #232]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea6:	4937      	ldr	r1, [pc, #220]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b32      	ldr	r3, [pc, #200]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
 8003ec4:	e011      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ece:	d10c      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f8c8 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d028      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ef6:	4b23      	ldr	r3, [pc, #140]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f04:	491f      	ldr	r1, [pc, #124]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f14:	d106      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f16:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f20:	60d3      	str	r3, [r2, #12]
 8003f22:	e011      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f899 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d02b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f54:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f62:	4908      	ldr	r1, [pc, #32]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f72:	d109      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b03      	ldr	r3, [pc, #12]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
 8003f80:	e014      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f867 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02f      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fc6:	4928      	ldr	r1, [pc, #160]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f844 	bl	800406c <RCCEx_PLLSAI1_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	74bb      	strb	r3, [r7, #18]
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3320      	adds	r3, #32
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f925 	bl	8004254 <RCCEx_PLLSAI2_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004024:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004032:	490d      	ldr	r1, [pc, #52]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004046:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004056:	4904      	ldr	r1, [pc, #16]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800405e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000

0800406c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800407a:	4b75      	ldr	r3, [pc, #468]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004086:	4b72      	ldr	r3, [pc, #456]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0203 	and.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d10d      	bne.n	80040b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
       ||
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800409e:	4b6c      	ldr	r3, [pc, #432]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
       ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d047      	beq.n	8004142 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
 80040b6:	e044      	b.n	8004142 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d018      	beq.n	80040f2 <RCCEx_PLLSAI1_Config+0x86>
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d825      	bhi.n	8004110 <RCCEx_PLLSAI1_Config+0xa4>
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d002      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0x62>
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d009      	beq.n	80040e0 <RCCEx_PLLSAI1_Config+0x74>
 80040cc:	e020      	b.n	8004110 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ce:	4b60      	ldr	r3, [pc, #384]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11d      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040de:	e01a      	b.n	8004116 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040e0:	4b5b      	ldr	r3, [pc, #364]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f0:	e013      	b.n	800411a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040f2:	4b57      	ldr	r3, [pc, #348]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10f      	bne.n	800411e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040fe:	4b54      	ldr	r3, [pc, #336]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800410e:	e006      	b.n	800411e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      break;
 8004114:	e004      	b.n	8004120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004116:	bf00      	nop
 8004118:	e002      	b.n	8004120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800411e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10d      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004126:	4b4a      	ldr	r3, [pc, #296]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	3b01      	subs	r3, #1
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	430b      	orrs	r3, r1
 800413c:	4944      	ldr	r1, [pc, #272]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d17d      	bne.n	8004244 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004148:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a40      	ldr	r2, [pc, #256]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fd fa06 	bl	8001564 <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800415a:	e009      	b.n	8004170 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800415c:	f7fd fa02 	bl	8001564 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d902      	bls.n	8004170 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	73fb      	strb	r3, [r7, #15]
        break;
 800416e:	e005      	b.n	800417c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004170:	4b37      	ldr	r3, [pc, #220]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ef      	bne.n	800415c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d160      	bne.n	8004244 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d111      	bne.n	80041ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004188:	4b31      	ldr	r3, [pc, #196]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6892      	ldr	r2, [r2, #8]
 8004198:	0211      	lsls	r1, r2, #8
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68d2      	ldr	r2, [r2, #12]
 800419e:	0912      	lsrs	r2, r2, #4
 80041a0:	0452      	lsls	r2, r2, #17
 80041a2:	430a      	orrs	r2, r1
 80041a4:	492a      	ldr	r1, [pc, #168]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	610b      	str	r3, [r1, #16]
 80041aa:	e027      	b.n	80041fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d112      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b2:	4b27      	ldr	r3, [pc, #156]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6892      	ldr	r2, [r2, #8]
 80041c2:	0211      	lsls	r1, r2, #8
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6912      	ldr	r2, [r2, #16]
 80041c8:	0852      	lsrs	r2, r2, #1
 80041ca:	3a01      	subs	r2, #1
 80041cc:	0552      	lsls	r2, r2, #21
 80041ce:	430a      	orrs	r2, r1
 80041d0:	491f      	ldr	r1, [pc, #124]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	610b      	str	r3, [r1, #16]
 80041d6:	e011      	b.n	80041fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6892      	ldr	r2, [r2, #8]
 80041e8:	0211      	lsls	r1, r2, #8
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6952      	ldr	r2, [r2, #20]
 80041ee:	0852      	lsrs	r2, r2, #1
 80041f0:	3a01      	subs	r2, #1
 80041f2:	0652      	lsls	r2, r2, #25
 80041f4:	430a      	orrs	r2, r1
 80041f6:	4916      	ldr	r1, [pc, #88]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041fc:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a13      	ldr	r2, [pc, #76]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004206:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd f9ac 	bl	8001564 <HAL_GetTick>
 800420c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800420e:	e009      	b.n	8004224 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004210:	f7fd f9a8 	bl	8001564 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d902      	bls.n	8004224 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	73fb      	strb	r3, [r7, #15]
          break;
 8004222:	e005      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004224:	4b0a      	ldr	r3, [pc, #40]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ef      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	4904      	ldr	r1, [pc, #16]	@ (8004250 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004240:	4313      	orrs	r3, r2
 8004242:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000

08004254 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004262:	4b6a      	ldr	r3, [pc, #424]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800426e:	4b67      	ldr	r3, [pc, #412]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0203 	and.w	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d10d      	bne.n	800429a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
       ||
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004286:	4b61      	ldr	r3, [pc, #388]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
       ||
 8004296:	429a      	cmp	r2, r3
 8004298:	d047      	beq.n	800432a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
 800429e:	e044      	b.n	800432a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d018      	beq.n	80042da <RCCEx_PLLSAI2_Config+0x86>
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d825      	bhi.n	80042f8 <RCCEx_PLLSAI2_Config+0xa4>
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d002      	beq.n	80042b6 <RCCEx_PLLSAI2_Config+0x62>
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d009      	beq.n	80042c8 <RCCEx_PLLSAI2_Config+0x74>
 80042b4:	e020      	b.n	80042f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042b6:	4b55      	ldr	r3, [pc, #340]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d11d      	bne.n	80042fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c6:	e01a      	b.n	80042fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d8:	e013      	b.n	8004302 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042da:	4b4c      	ldr	r3, [pc, #304]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042e6:	4b49      	ldr	r3, [pc, #292]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042f6:	e006      	b.n	8004306 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	e004      	b.n	8004308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004306:	bf00      	nop
    }

    if(status == HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10d      	bne.n	800432a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800430e:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	3b01      	subs	r3, #1
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	430b      	orrs	r3, r1
 8004324:	4939      	ldr	r1, [pc, #228]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d167      	bne.n	8004400 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004330:	4b36      	ldr	r3, [pc, #216]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a35      	ldr	r2, [pc, #212]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433c:	f7fd f912 	bl	8001564 <HAL_GetTick>
 8004340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004342:	e009      	b.n	8004358 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004344:	f7fd f90e 	bl	8001564 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d902      	bls.n	8004358 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	73fb      	strb	r3, [r7, #15]
        break;
 8004356:	e005      	b.n	8004364 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004358:	4b2c      	ldr	r3, [pc, #176]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ef      	bne.n	8004344 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d14a      	bne.n	8004400 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d111      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004370:	4b26      	ldr	r3, [pc, #152]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6892      	ldr	r2, [r2, #8]
 8004380:	0211      	lsls	r1, r2, #8
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68d2      	ldr	r2, [r2, #12]
 8004386:	0912      	lsrs	r2, r2, #4
 8004388:	0452      	lsls	r2, r2, #17
 800438a:	430a      	orrs	r2, r1
 800438c:	491f      	ldr	r1, [pc, #124]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	614b      	str	r3, [r1, #20]
 8004392:	e011      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800439c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6892      	ldr	r2, [r2, #8]
 80043a4:	0211      	lsls	r1, r2, #8
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6912      	ldr	r2, [r2, #16]
 80043aa:	0852      	lsrs	r2, r2, #1
 80043ac:	3a01      	subs	r2, #1
 80043ae:	0652      	lsls	r2, r2, #25
 80043b0:	430a      	orrs	r2, r1
 80043b2:	4916      	ldr	r1, [pc, #88]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043b8:	4b14      	ldr	r3, [pc, #80]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd f8ce 	bl	8001564 <HAL_GetTick>
 80043c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ca:	e009      	b.n	80043e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043cc:	f7fd f8ca 	bl	8001564 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d902      	bls.n	80043e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	73fb      	strb	r3, [r7, #15]
          break;
 80043de:	e005      	b.n	80043ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043e0:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ef      	beq.n	80043cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043f2:	4b06      	ldr	r3, [pc, #24]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4904      	ldr	r1, [pc, #16]	@ (800440c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000

08004410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e049      	b.n	80044b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc ff3e 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f000 f8fe 	bl	8004650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_TIM_ConfigClockSource+0x1c>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e0b6      	b.n	8004648 <HAL_TIM_ConfigClockSource+0x18a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004504:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004516:	d03e      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xd8>
 8004518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451c:	f200 8087 	bhi.w	800462e <HAL_TIM_ConfigClockSource+0x170>
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004524:	f000 8086 	beq.w	8004634 <HAL_TIM_ConfigClockSource+0x176>
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452c:	d87f      	bhi.n	800462e <HAL_TIM_ConfigClockSource+0x170>
 800452e:	2b70      	cmp	r3, #112	@ 0x70
 8004530:	d01a      	beq.n	8004568 <HAL_TIM_ConfigClockSource+0xaa>
 8004532:	2b70      	cmp	r3, #112	@ 0x70
 8004534:	d87b      	bhi.n	800462e <HAL_TIM_ConfigClockSource+0x170>
 8004536:	2b60      	cmp	r3, #96	@ 0x60
 8004538:	d050      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x11e>
 800453a:	2b60      	cmp	r3, #96	@ 0x60
 800453c:	d877      	bhi.n	800462e <HAL_TIM_ConfigClockSource+0x170>
 800453e:	2b50      	cmp	r3, #80	@ 0x50
 8004540:	d03c      	beq.n	80045bc <HAL_TIM_ConfigClockSource+0xfe>
 8004542:	2b50      	cmp	r3, #80	@ 0x50
 8004544:	d873      	bhi.n	800462e <HAL_TIM_ConfigClockSource+0x170>
 8004546:	2b40      	cmp	r3, #64	@ 0x40
 8004548:	d058      	beq.n	80045fc <HAL_TIM_ConfigClockSource+0x13e>
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d86f      	bhi.n	800462e <HAL_TIM_ConfigClockSource+0x170>
 800454e:	2b30      	cmp	r3, #48	@ 0x30
 8004550:	d064      	beq.n	800461c <HAL_TIM_ConfigClockSource+0x15e>
 8004552:	2b30      	cmp	r3, #48	@ 0x30
 8004554:	d86b      	bhi.n	800462e <HAL_TIM_ConfigClockSource+0x170>
 8004556:	2b20      	cmp	r3, #32
 8004558:	d060      	beq.n	800461c <HAL_TIM_ConfigClockSource+0x15e>
 800455a:	2b20      	cmp	r3, #32
 800455c:	d867      	bhi.n	800462e <HAL_TIM_ConfigClockSource+0x170>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d05c      	beq.n	800461c <HAL_TIM_ConfigClockSource+0x15e>
 8004562:	2b10      	cmp	r3, #16
 8004564:	d05a      	beq.n	800461c <HAL_TIM_ConfigClockSource+0x15e>
 8004566:	e062      	b.n	800462e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004578:	f000 f97e 	bl	8004878 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800458a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]
      break;
 8004594:	e04f      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	f000 f967 	bl	8004878 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045b8:	609a      	str	r2, [r3, #8]
      break;
 80045ba:	e03c      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c8:	461a      	mov	r2, r3
 80045ca:	f000 f8db 	bl	8004784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2150      	movs	r1, #80	@ 0x50
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f934 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 80045da:	e02c      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e8:	461a      	mov	r2, r3
 80045ea:	f000 f8fa 	bl	80047e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2160      	movs	r1, #96	@ 0x60
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f924 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 80045fa:	e01c      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004608:	461a      	mov	r2, r3
 800460a:	f000 f8bb 	bl	8004784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2140      	movs	r1, #64	@ 0x40
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f914 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 800461a:	e00c      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 f90b 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 800462c:	e003      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
      break;
 8004632:	e000      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004634:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004646:	7bfb      	ldrb	r3, [r7, #15]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a40      	ldr	r2, [pc, #256]	@ (8004764 <TIM_Base_SetConfig+0x114>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466e:	d00f      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3d      	ldr	r2, [pc, #244]	@ (8004768 <TIM_Base_SetConfig+0x118>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3c      	ldr	r2, [pc, #240]	@ (800476c <TIM_Base_SetConfig+0x11c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3b      	ldr	r2, [pc, #236]	@ (8004770 <TIM_Base_SetConfig+0x120>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3a      	ldr	r2, [pc, #232]	@ (8004774 <TIM_Base_SetConfig+0x124>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004764 <TIM_Base_SetConfig+0x114>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01f      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b0:	d01b      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <TIM_Base_SetConfig+0x118>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d017      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2b      	ldr	r2, [pc, #172]	@ (800476c <TIM_Base_SetConfig+0x11c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004770 <TIM_Base_SetConfig+0x120>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00f      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <TIM_Base_SetConfig+0x124>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a28      	ldr	r2, [pc, #160]	@ (8004778 <TIM_Base_SetConfig+0x128>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a27      	ldr	r2, [pc, #156]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_Base_SetConfig+0x9a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a26      	ldr	r2, [pc, #152]	@ (8004780 <TIM_Base_SetConfig+0x130>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d108      	bne.n	80046fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a10      	ldr	r2, [pc, #64]	@ (8004764 <TIM_Base_SetConfig+0x114>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00f      	beq.n	8004748 <TIM_Base_SetConfig+0xf8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <TIM_Base_SetConfig+0x124>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00b      	beq.n	8004748 <TIM_Base_SetConfig+0xf8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a11      	ldr	r2, [pc, #68]	@ (8004778 <TIM_Base_SetConfig+0x128>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_Base_SetConfig+0xf8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a10      	ldr	r2, [pc, #64]	@ (800477c <TIM_Base_SetConfig+0x12c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_Base_SetConfig+0xf8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0f      	ldr	r2, [pc, #60]	@ (8004780 <TIM_Base_SetConfig+0x130>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d103      	bne.n	8004750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	615a      	str	r2, [r3, #20]
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40014000 	.word	0x40014000
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800

08004784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 030a 	bic.w	r3, r3, #10
 80047c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0210 	bic.w	r2, r3, #16
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800480c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	031b      	lsls	r3, r3, #12
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800481e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	f043 0307 	orr.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	021a      	lsls	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	431a      	orrs	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4313      	orrs	r3, r2
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	609a      	str	r2, [r3, #8]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e068      	b.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2e      	ldr	r2, [pc, #184]	@ (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2d      	ldr	r2, [pc, #180]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800490a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1e      	ldr	r2, [pc, #120]	@ (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01d      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004942:	d018      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1a      	ldr	r2, [pc, #104]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a18      	ldr	r2, [pc, #96]	@ (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a13      	ldr	r2, [pc, #76]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a14      	ldr	r2, [pc, #80]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10c      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4313      	orrs	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40013400 	.word	0x40013400
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40014000 	.word	0x40014000

080049c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e040      	b.n	8004a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc fc82 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	@ 0x24
 80049f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fae0 	bl	8004fd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f825 	bl	8004a64 <UART_SetConfig>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e01b      	b.n	8004a5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fb5f 	bl	8005118 <UART_CheckIdleState>
 8004a5a:	4603      	mov	r3, r0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b08a      	sub	sp, #40	@ 0x28
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4ba4      	ldr	r3, [pc, #656]	@ (8004d24 <UART_SetConfig+0x2c0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a99      	ldr	r2, [pc, #612]	@ (8004d28 <UART_SetConfig+0x2c4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004acc:	4313      	orrs	r3, r2
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a90      	ldr	r2, [pc, #576]	@ (8004d2c <UART_SetConfig+0x2c8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d126      	bne.n	8004b3c <UART_SetConfig+0xd8>
 8004aee:	4b90      	ldr	r3, [pc, #576]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d81b      	bhi.n	8004b34 <UART_SetConfig+0xd0>
 8004afc:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <UART_SetConfig+0xa0>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b25 	.word	0x08004b25
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b2d 	.word	0x08004b2d
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1a:	e116      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b22:	e112      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	e10e      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b32:	e10a      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e106      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a7c      	ldr	r2, [pc, #496]	@ (8004d34 <UART_SetConfig+0x2d0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d138      	bne.n	8004bb8 <UART_SetConfig+0x154>
 8004b46:	4b7a      	ldr	r3, [pc, #488]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	d82d      	bhi.n	8004bb0 <UART_SetConfig+0x14c>
 8004b54:	a201      	add	r2, pc, #4	@ (adr r2, 8004b5c <UART_SetConfig+0xf8>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b91 	.word	0x08004b91
 8004b60:	08004bb1 	.word	0x08004bb1
 8004b64:	08004bb1 	.word	0x08004bb1
 8004b68:	08004bb1 	.word	0x08004bb1
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004bb1 	.word	0x08004bb1
 8004b74:	08004bb1 	.word	0x08004bb1
 8004b78:	08004bb1 	.word	0x08004bb1
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004bb1 	.word	0x08004bb1
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004ba9 	.word	0x08004ba9
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e0d8      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e0d4      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e0d0      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bae:	e0cc      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb6:	e0c8      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d125      	bne.n	8004c0e <UART_SetConfig+0x1aa>
 8004bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bcc:	2b30      	cmp	r3, #48	@ 0x30
 8004bce:	d016      	beq.n	8004bfe <UART_SetConfig+0x19a>
 8004bd0:	2b30      	cmp	r3, #48	@ 0x30
 8004bd2:	d818      	bhi.n	8004c06 <UART_SetConfig+0x1a2>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d00a      	beq.n	8004bee <UART_SetConfig+0x18a>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d814      	bhi.n	8004c06 <UART_SetConfig+0x1a2>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <UART_SetConfig+0x182>
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d008      	beq.n	8004bf6 <UART_SetConfig+0x192>
 8004be4:	e00f      	b.n	8004c06 <UART_SetConfig+0x1a2>
 8004be6:	2300      	movs	r3, #0
 8004be8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bec:	e0ad      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf4:	e0a9      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfc:	e0a5      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004bfe:	2308      	movs	r3, #8
 8004c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c04:	e0a1      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004c06:	2310      	movs	r3, #16
 8004c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0c:	e09d      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a4a      	ldr	r2, [pc, #296]	@ (8004d3c <UART_SetConfig+0x2d8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d125      	bne.n	8004c64 <UART_SetConfig+0x200>
 8004c18:	4b45      	ldr	r3, [pc, #276]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c24:	d016      	beq.n	8004c54 <UART_SetConfig+0x1f0>
 8004c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c28:	d818      	bhi.n	8004c5c <UART_SetConfig+0x1f8>
 8004c2a:	2b80      	cmp	r3, #128	@ 0x80
 8004c2c:	d00a      	beq.n	8004c44 <UART_SetConfig+0x1e0>
 8004c2e:	2b80      	cmp	r3, #128	@ 0x80
 8004c30:	d814      	bhi.n	8004c5c <UART_SetConfig+0x1f8>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <UART_SetConfig+0x1d8>
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	d008      	beq.n	8004c4c <UART_SetConfig+0x1e8>
 8004c3a:	e00f      	b.n	8004c5c <UART_SetConfig+0x1f8>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c42:	e082      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004c44:	2302      	movs	r3, #2
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4a:	e07e      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c52:	e07a      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	e076      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e072      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a35      	ldr	r2, [pc, #212]	@ (8004d40 <UART_SetConfig+0x2dc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d12a      	bne.n	8004cc4 <UART_SetConfig+0x260>
 8004c6e:	4b30      	ldr	r3, [pc, #192]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c7c:	d01a      	beq.n	8004cb4 <UART_SetConfig+0x250>
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c82:	d81b      	bhi.n	8004cbc <UART_SetConfig+0x258>
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c88:	d00c      	beq.n	8004ca4 <UART_SetConfig+0x240>
 8004c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c8e:	d815      	bhi.n	8004cbc <UART_SetConfig+0x258>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <UART_SetConfig+0x238>
 8004c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c98:	d008      	beq.n	8004cac <UART_SetConfig+0x248>
 8004c9a:	e00f      	b.n	8004cbc <UART_SetConfig+0x258>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e052      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004caa:	e04e      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004cac:	2304      	movs	r3, #4
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e04a      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cba:	e046      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc2:	e042      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <UART_SetConfig+0x2c4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d13a      	bne.n	8004d44 <UART_SetConfig+0x2e0>
 8004cce:	4b18      	ldr	r3, [pc, #96]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004cd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cdc:	d01a      	beq.n	8004d14 <UART_SetConfig+0x2b0>
 8004cde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ce2:	d81b      	bhi.n	8004d1c <UART_SetConfig+0x2b8>
 8004ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ce8:	d00c      	beq.n	8004d04 <UART_SetConfig+0x2a0>
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cee:	d815      	bhi.n	8004d1c <UART_SetConfig+0x2b8>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <UART_SetConfig+0x298>
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf8:	d008      	beq.n	8004d0c <UART_SetConfig+0x2a8>
 8004cfa:	e00f      	b.n	8004d1c <UART_SetConfig+0x2b8>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d02:	e022      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004d04:	2302      	movs	r3, #2
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0a:	e01e      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d12:	e01a      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004d14:	2308      	movs	r3, #8
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1a:	e016      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d22:	e012      	b.n	8004d4a <UART_SetConfig+0x2e6>
 8004d24:	efff69f3 	.word	0xefff69f3
 8004d28:	40008000 	.word	0x40008000
 8004d2c:	40013800 	.word	0x40013800
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40004400 	.word	0x40004400
 8004d38:	40004800 	.word	0x40004800
 8004d3c:	40004c00 	.word	0x40004c00
 8004d40:	40005000 	.word	0x40005000
 8004d44:	2310      	movs	r3, #16
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a9f      	ldr	r2, [pc, #636]	@ (8004fcc <UART_SetConfig+0x568>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d17a      	bne.n	8004e4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d824      	bhi.n	8004da6 <UART_SetConfig+0x342>
 8004d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d64 <UART_SetConfig+0x300>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004da7 	.word	0x08004da7
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004da7 	.word	0x08004da7
 8004d74:	08004d97 	.word	0x08004d97
 8004d78:	08004da7 	.word	0x08004da7
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	08004da7 	.word	0x08004da7
 8004d84:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe fdfa 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
        break;
 8004d8e:	e010      	b.n	8004db2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b8f      	ldr	r3, [pc, #572]	@ (8004fd0 <UART_SetConfig+0x56c>)
 8004d92:	61fb      	str	r3, [r7, #28]
        break;
 8004d94:	e00d      	b.n	8004db2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fe fd5b 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8004d9a:	61f8      	str	r0, [r7, #28]
        break;
 8004d9c:	e009      	b.n	8004db2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da2:	61fb      	str	r3, [r7, #28]
        break;
 8004da4:	e005      	b.n	8004db2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80fb 	beq.w	8004fb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d305      	bcc.n	8004dd6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d903      	bls.n	8004dde <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ddc:	e0e8      	b.n	8004fb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2200      	movs	r2, #0
 8004de2:	461c      	mov	r4, r3
 8004de4:	4615      	mov	r5, r2
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	022b      	lsls	r3, r5, #8
 8004df0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004df4:	0222      	lsls	r2, r4, #8
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	6849      	ldr	r1, [r1, #4]
 8004dfa:	0849      	lsrs	r1, r1, #1
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	4688      	mov	r8, r1
 8004e00:	4681      	mov	r9, r0
 8004e02:	eb12 0a08 	adds.w	sl, r2, r8
 8004e06:	eb43 0b09 	adc.w	fp, r3, r9
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e18:	4650      	mov	r0, sl
 8004e1a:	4659      	mov	r1, fp
 8004e1c:	f7fb fd8a 	bl	8000934 <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4613      	mov	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e2e:	d308      	bcc.n	8004e42 <UART_SetConfig+0x3de>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e36:	d204      	bcs.n	8004e42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e0b6      	b.n	8004fb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e48:	e0b2      	b.n	8004fb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e52:	d15e      	bne.n	8004f12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d828      	bhi.n	8004eae <UART_SetConfig+0x44a>
 8004e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <UART_SetConfig+0x400>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	08004eaf 	.word	0x08004eaf
 8004e74:	08004e9f 	.word	0x08004e9f
 8004e78:	08004eaf 	.word	0x08004eaf
 8004e7c:	08004eaf 	.word	0x08004eaf
 8004e80:	08004eaf 	.word	0x08004eaf
 8004e84:	08004ea7 	.word	0x08004ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7fe fd7a 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	61f8      	str	r0, [r7, #28]
        break;
 8004e8e:	e014      	b.n	8004eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e90:	f7fe fd8c 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8004e94:	61f8      	str	r0, [r7, #28]
        break;
 8004e96:	e010      	b.n	8004eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e98:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd0 <UART_SetConfig+0x56c>)
 8004e9a:	61fb      	str	r3, [r7, #28]
        break;
 8004e9c:	e00d      	b.n	8004eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9e:	f7fe fcd7 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8004ea2:	61f8      	str	r0, [r7, #28]
        break;
 8004ea4:	e009      	b.n	8004eba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eaa:	61fb      	str	r3, [r7, #28]
        break;
 8004eac:	e005      	b.n	8004eba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d077      	beq.n	8004fb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	005a      	lsls	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	441a      	add	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b0f      	cmp	r3, #15
 8004eda:	d916      	bls.n	8004f0a <UART_SetConfig+0x4a6>
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee2:	d212      	bcs.n	8004f0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f023 030f 	bic.w	r3, r3, #15
 8004eec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	8afb      	ldrh	r3, [r7, #22]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	8afa      	ldrh	r2, [r7, #22]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	e052      	b.n	8004fb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f10:	e04e      	b.n	8004fb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d827      	bhi.n	8004f6a <UART_SetConfig+0x506>
 8004f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <UART_SetConfig+0x4bc>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f4d 	.word	0x08004f4d
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	08004f6b 	.word	0x08004f6b
 8004f30:	08004f5b 	.word	0x08004f5b
 8004f34:	08004f6b 	.word	0x08004f6b
 8004f38:	08004f6b 	.word	0x08004f6b
 8004f3c:	08004f6b 	.word	0x08004f6b
 8004f40:	08004f63 	.word	0x08004f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f44:	f7fe fd1c 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 8004f48:	61f8      	str	r0, [r7, #28]
        break;
 8004f4a:	e014      	b.n	8004f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f4c:	f7fe fd2e 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8004f50:	61f8      	str	r0, [r7, #28]
        break;
 8004f52:	e010      	b.n	8004f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f54:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd0 <UART_SetConfig+0x56c>)
 8004f56:	61fb      	str	r3, [r7, #28]
        break;
 8004f58:	e00d      	b.n	8004f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5a:	f7fe fc79 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8004f5e:	61f8      	str	r0, [r7, #28]
        break;
 8004f60:	e009      	b.n	8004f76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f66:	61fb      	str	r3, [r7, #28]
        break;
 8004f68:	e005      	b.n	8004f76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f74:	bf00      	nop
    }

    if (pclk != 0U)
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d019      	beq.n	8004fb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	085a      	lsrs	r2, r3, #1
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	441a      	add	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d909      	bls.n	8004faa <UART_SetConfig+0x546>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9c:	d205      	bcs.n	8004faa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e002      	b.n	8004fb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3728      	adds	r7, #40	@ 0x28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fca:	bf00      	nop
 8004fcc:	40008000 	.word	0x40008000
 8004fd0:	00f42400 	.word	0x00f42400

08004fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01a      	beq.n	80050ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d2:	d10a      	bne.n	80050ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b098      	sub	sp, #96	@ 0x60
 800511c:	af02      	add	r7, sp, #8
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005128:	f7fc fa1c 	bl	8001564 <HAL_GetTick>
 800512c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b08      	cmp	r3, #8
 800513a:	d12e      	bne.n	800519a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005144:	2200      	movs	r2, #0
 8005146:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f88c 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d021      	beq.n	800519a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800516a:	653b      	str	r3, [r7, #80]	@ 0x50
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005174:	647b      	str	r3, [r7, #68]	@ 0x44
 8005176:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800517a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e062      	b.n	8005260 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d149      	bne.n	800523c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b0:	2200      	movs	r2, #0
 80051b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f856 	bl	8005268 <UART_WaitOnFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d03c      	beq.n	800523c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	623b      	str	r3, [r7, #32]
   return(result);
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e6      	bne.n	80051c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	60fb      	str	r3, [r7, #12]
   return(result);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3308      	adds	r3, #8
 8005212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	617b      	str	r3, [r7, #20]
   return(result);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e5      	bne.n	80051f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e011      	b.n	8005260 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3758      	adds	r7, #88	@ 0x58
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005278:	e049      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d045      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fc f96f 	bl	8001564 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <UART_WaitOnFlagUntilTimeout+0x30>
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e048      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d031      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d110      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f838 	bl	8005336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2208      	movs	r2, #8
 80052ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e029      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e8:	d111      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f81e 	bl	8005336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e00f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d0a6      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b095      	sub	sp, #84	@ 0x54
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800535c:	643b      	str	r3, [r7, #64]	@ 0x40
 800535e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005390:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d118      	bne.n	80053de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f023 0310 	bic.w	r3, r3, #16
 80053c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	613b      	str	r3, [r7, #16]
   return(result);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e6      	bne.n	80053ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053f2:	bf00      	nop
 80053f4:	3754      	adds	r7, #84	@ 0x54
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <memset>:
 80053fe:	4402      	add	r2, r0
 8005400:	4603      	mov	r3, r0
 8005402:	4293      	cmp	r3, r2
 8005404:	d100      	bne.n	8005408 <memset+0xa>
 8005406:	4770      	bx	lr
 8005408:	f803 1b01 	strb.w	r1, [r3], #1
 800540c:	e7f9      	b.n	8005402 <memset+0x4>
	...

08005410 <__libc_init_array>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4d0d      	ldr	r5, [pc, #52]	@ (8005448 <__libc_init_array+0x38>)
 8005414:	4c0d      	ldr	r4, [pc, #52]	@ (800544c <__libc_init_array+0x3c>)
 8005416:	1b64      	subs	r4, r4, r5
 8005418:	10a4      	asrs	r4, r4, #2
 800541a:	2600      	movs	r6, #0
 800541c:	42a6      	cmp	r6, r4
 800541e:	d109      	bne.n	8005434 <__libc_init_array+0x24>
 8005420:	4d0b      	ldr	r5, [pc, #44]	@ (8005450 <__libc_init_array+0x40>)
 8005422:	4c0c      	ldr	r4, [pc, #48]	@ (8005454 <__libc_init_array+0x44>)
 8005424:	f001 f848 	bl	80064b8 <_init>
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	2600      	movs	r6, #0
 800542e:	42a6      	cmp	r6, r4
 8005430:	d105      	bne.n	800543e <__libc_init_array+0x2e>
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	f855 3b04 	ldr.w	r3, [r5], #4
 8005438:	4798      	blx	r3
 800543a:	3601      	adds	r6, #1
 800543c:	e7ee      	b.n	800541c <__libc_init_array+0xc>
 800543e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005442:	4798      	blx	r3
 8005444:	3601      	adds	r6, #1
 8005446:	e7f2      	b.n	800542e <__libc_init_array+0x1e>
 8005448:	08006708 	.word	0x08006708
 800544c:	08006708 	.word	0x08006708
 8005450:	08006708 	.word	0x08006708
 8005454:	0800670c 	.word	0x0800670c

08005458 <sin>:
 8005458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800545a:	ec53 2b10 	vmov	r2, r3, d0
 800545e:	4826      	ldr	r0, [pc, #152]	@ (80054f8 <sin+0xa0>)
 8005460:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005464:	4281      	cmp	r1, r0
 8005466:	d807      	bhi.n	8005478 <sin+0x20>
 8005468:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80054f0 <sin+0x98>
 800546c:	2000      	movs	r0, #0
 800546e:	b005      	add	sp, #20
 8005470:	f85d eb04 	ldr.w	lr, [sp], #4
 8005474:	f000 b90c 	b.w	8005690 <__kernel_sin>
 8005478:	4820      	ldr	r0, [pc, #128]	@ (80054fc <sin+0xa4>)
 800547a:	4281      	cmp	r1, r0
 800547c:	d908      	bls.n	8005490 <sin+0x38>
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	f7fa ffcf 	bl	8000424 <__aeabi_dsub>
 8005486:	ec41 0b10 	vmov	d0, r0, r1
 800548a:	b005      	add	sp, #20
 800548c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005490:	4668      	mov	r0, sp
 8005492:	f000 f9b9 	bl	8005808 <__ieee754_rem_pio2>
 8005496:	f000 0003 	and.w	r0, r0, #3
 800549a:	2801      	cmp	r0, #1
 800549c:	d00c      	beq.n	80054b8 <sin+0x60>
 800549e:	2802      	cmp	r0, #2
 80054a0:	d011      	beq.n	80054c6 <sin+0x6e>
 80054a2:	b9e8      	cbnz	r0, 80054e0 <sin+0x88>
 80054a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054a8:	ed9d 0b00 	vldr	d0, [sp]
 80054ac:	2001      	movs	r0, #1
 80054ae:	f000 f8ef 	bl	8005690 <__kernel_sin>
 80054b2:	ec51 0b10 	vmov	r0, r1, d0
 80054b6:	e7e6      	b.n	8005486 <sin+0x2e>
 80054b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054bc:	ed9d 0b00 	vldr	d0, [sp]
 80054c0:	f000 f81e 	bl	8005500 <__kernel_cos>
 80054c4:	e7f5      	b.n	80054b2 <sin+0x5a>
 80054c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054ca:	ed9d 0b00 	vldr	d0, [sp]
 80054ce:	2001      	movs	r0, #1
 80054d0:	f000 f8de 	bl	8005690 <__kernel_sin>
 80054d4:	ec53 2b10 	vmov	r2, r3, d0
 80054d8:	4610      	mov	r0, r2
 80054da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80054de:	e7d2      	b.n	8005486 <sin+0x2e>
 80054e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80054e4:	ed9d 0b00 	vldr	d0, [sp]
 80054e8:	f000 f80a 	bl	8005500 <__kernel_cos>
 80054ec:	e7f2      	b.n	80054d4 <sin+0x7c>
 80054ee:	bf00      	nop
	...
 80054f8:	3fe921fb 	.word	0x3fe921fb
 80054fc:	7fefffff 	.word	0x7fefffff

08005500 <__kernel_cos>:
 8005500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	ec57 6b10 	vmov	r6, r7, d0
 8005508:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800550c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005510:	ed8d 1b00 	vstr	d1, [sp]
 8005514:	d206      	bcs.n	8005524 <__kernel_cos+0x24>
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fb f9c3 	bl	80008a4 <__aeabi_d2iz>
 800551e:	2800      	cmp	r0, #0
 8005520:	f000 8088 	beq.w	8005634 <__kernel_cos+0x134>
 8005524:	4632      	mov	r2, r6
 8005526:	463b      	mov	r3, r7
 8005528:	4630      	mov	r0, r6
 800552a:	4639      	mov	r1, r7
 800552c:	f7fa fe4c 	bl	80001c8 <__aeabi_dmul>
 8005530:	4b51      	ldr	r3, [pc, #324]	@ (8005678 <__kernel_cos+0x178>)
 8005532:	2200      	movs	r2, #0
 8005534:	4604      	mov	r4, r0
 8005536:	460d      	mov	r5, r1
 8005538:	f7fa fe46 	bl	80001c8 <__aeabi_dmul>
 800553c:	a340      	add	r3, pc, #256	@ (adr r3, 8005640 <__kernel_cos+0x140>)
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	4682      	mov	sl, r0
 8005544:	468b      	mov	fp, r1
 8005546:	4620      	mov	r0, r4
 8005548:	4629      	mov	r1, r5
 800554a:	f7fa fe3d 	bl	80001c8 <__aeabi_dmul>
 800554e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005648 <__kernel_cos+0x148>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fa ff68 	bl	8000428 <__adddf3>
 8005558:	4622      	mov	r2, r4
 800555a:	462b      	mov	r3, r5
 800555c:	f7fa fe34 	bl	80001c8 <__aeabi_dmul>
 8005560:	a33b      	add	r3, pc, #236	@ (adr r3, 8005650 <__kernel_cos+0x150>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	f7fa ff5d 	bl	8000424 <__aeabi_dsub>
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	f7fa fe2b 	bl	80001c8 <__aeabi_dmul>
 8005572:	a339      	add	r3, pc, #228	@ (adr r3, 8005658 <__kernel_cos+0x158>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f7fa ff56 	bl	8000428 <__adddf3>
 800557c:	4622      	mov	r2, r4
 800557e:	462b      	mov	r3, r5
 8005580:	f7fa fe22 	bl	80001c8 <__aeabi_dmul>
 8005584:	a336      	add	r3, pc, #216	@ (adr r3, 8005660 <__kernel_cos+0x160>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fa ff4b 	bl	8000424 <__aeabi_dsub>
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	f7fa fe19 	bl	80001c8 <__aeabi_dmul>
 8005596:	a334      	add	r3, pc, #208	@ (adr r3, 8005668 <__kernel_cos+0x168>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f7fa ff44 	bl	8000428 <__adddf3>
 80055a0:	4622      	mov	r2, r4
 80055a2:	462b      	mov	r3, r5
 80055a4:	f7fa fe10 	bl	80001c8 <__aeabi_dmul>
 80055a8:	4622      	mov	r2, r4
 80055aa:	462b      	mov	r3, r5
 80055ac:	f7fa fe0c 	bl	80001c8 <__aeabi_dmul>
 80055b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055b4:	4604      	mov	r4, r0
 80055b6:	460d      	mov	r5, r1
 80055b8:	4630      	mov	r0, r6
 80055ba:	4639      	mov	r1, r7
 80055bc:	f7fa fe04 	bl	80001c8 <__aeabi_dmul>
 80055c0:	460b      	mov	r3, r1
 80055c2:	4602      	mov	r2, r0
 80055c4:	4629      	mov	r1, r5
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7fa ff2c 	bl	8000424 <__aeabi_dsub>
 80055cc:	4b2b      	ldr	r3, [pc, #172]	@ (800567c <__kernel_cos+0x17c>)
 80055ce:	4598      	cmp	r8, r3
 80055d0:	4606      	mov	r6, r0
 80055d2:	460f      	mov	r7, r1
 80055d4:	d810      	bhi.n	80055f8 <__kernel_cos+0xf8>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4650      	mov	r0, sl
 80055dc:	4659      	mov	r1, fp
 80055de:	f7fa ff21 	bl	8000424 <__aeabi_dsub>
 80055e2:	460b      	mov	r3, r1
 80055e4:	4926      	ldr	r1, [pc, #152]	@ (8005680 <__kernel_cos+0x180>)
 80055e6:	4602      	mov	r2, r0
 80055e8:	2000      	movs	r0, #0
 80055ea:	f7fa ff1b 	bl	8000424 <__aeabi_dsub>
 80055ee:	ec41 0b10 	vmov	d0, r0, r1
 80055f2:	b003      	add	sp, #12
 80055f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f8:	4b22      	ldr	r3, [pc, #136]	@ (8005684 <__kernel_cos+0x184>)
 80055fa:	4921      	ldr	r1, [pc, #132]	@ (8005680 <__kernel_cos+0x180>)
 80055fc:	4598      	cmp	r8, r3
 80055fe:	bf8c      	ite	hi
 8005600:	4d21      	ldrhi	r5, [pc, #132]	@ (8005688 <__kernel_cos+0x188>)
 8005602:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005606:	2400      	movs	r4, #0
 8005608:	4622      	mov	r2, r4
 800560a:	462b      	mov	r3, r5
 800560c:	2000      	movs	r0, #0
 800560e:	f7fa ff09 	bl	8000424 <__aeabi_dsub>
 8005612:	4622      	mov	r2, r4
 8005614:	4680      	mov	r8, r0
 8005616:	4689      	mov	r9, r1
 8005618:	462b      	mov	r3, r5
 800561a:	4650      	mov	r0, sl
 800561c:	4659      	mov	r1, fp
 800561e:	f7fa ff01 	bl	8000424 <__aeabi_dsub>
 8005622:	4632      	mov	r2, r6
 8005624:	463b      	mov	r3, r7
 8005626:	f7fa fefd 	bl	8000424 <__aeabi_dsub>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4640      	mov	r0, r8
 8005630:	4649      	mov	r1, r9
 8005632:	e7da      	b.n	80055ea <__kernel_cos+0xea>
 8005634:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005670 <__kernel_cos+0x170>
 8005638:	e7db      	b.n	80055f2 <__kernel_cos+0xf2>
 800563a:	bf00      	nop
 800563c:	f3af 8000 	nop.w
 8005640:	be8838d4 	.word	0xbe8838d4
 8005644:	bda8fae9 	.word	0xbda8fae9
 8005648:	bdb4b1c4 	.word	0xbdb4b1c4
 800564c:	3e21ee9e 	.word	0x3e21ee9e
 8005650:	809c52ad 	.word	0x809c52ad
 8005654:	3e927e4f 	.word	0x3e927e4f
 8005658:	19cb1590 	.word	0x19cb1590
 800565c:	3efa01a0 	.word	0x3efa01a0
 8005660:	16c15177 	.word	0x16c15177
 8005664:	3f56c16c 	.word	0x3f56c16c
 8005668:	5555554c 	.word	0x5555554c
 800566c:	3fa55555 	.word	0x3fa55555
 8005670:	00000000 	.word	0x00000000
 8005674:	3ff00000 	.word	0x3ff00000
 8005678:	3fe00000 	.word	0x3fe00000
 800567c:	3fd33332 	.word	0x3fd33332
 8005680:	3ff00000 	.word	0x3ff00000
 8005684:	3fe90000 	.word	0x3fe90000
 8005688:	3fd20000 	.word	0x3fd20000
 800568c:	00000000 	.word	0x00000000

08005690 <__kernel_sin>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ec55 4b10 	vmov	r4, r5, d0
 8005698:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800569c:	b085      	sub	sp, #20
 800569e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80056a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80056a6:	4680      	mov	r8, r0
 80056a8:	d205      	bcs.n	80056b6 <__kernel_sin+0x26>
 80056aa:	4620      	mov	r0, r4
 80056ac:	4629      	mov	r1, r5
 80056ae:	f7fb f8f9 	bl	80008a4 <__aeabi_d2iz>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d052      	beq.n	800575c <__kernel_sin+0xcc>
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	4620      	mov	r0, r4
 80056bc:	4629      	mov	r1, r5
 80056be:	f7fa fd83 	bl	80001c8 <__aeabi_dmul>
 80056c2:	4682      	mov	sl, r0
 80056c4:	468b      	mov	fp, r1
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4620      	mov	r0, r4
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7fa fd7b 	bl	80001c8 <__aeabi_dmul>
 80056d2:	a342      	add	r3, pc, #264	@ (adr r3, 80057dc <__kernel_sin+0x14c>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	e9cd 0100 	strd	r0, r1, [sp]
 80056dc:	4650      	mov	r0, sl
 80056de:	4659      	mov	r1, fp
 80056e0:	f7fa fd72 	bl	80001c8 <__aeabi_dmul>
 80056e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80057e4 <__kernel_sin+0x154>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fe9b 	bl	8000424 <__aeabi_dsub>
 80056ee:	4652      	mov	r2, sl
 80056f0:	465b      	mov	r3, fp
 80056f2:	f7fa fd69 	bl	80001c8 <__aeabi_dmul>
 80056f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80057ec <__kernel_sin+0x15c>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f7fa fe94 	bl	8000428 <__adddf3>
 8005700:	4652      	mov	r2, sl
 8005702:	465b      	mov	r3, fp
 8005704:	f7fa fd60 	bl	80001c8 <__aeabi_dmul>
 8005708:	a33a      	add	r3, pc, #232	@ (adr r3, 80057f4 <__kernel_sin+0x164>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa fe89 	bl	8000424 <__aeabi_dsub>
 8005712:	4652      	mov	r2, sl
 8005714:	465b      	mov	r3, fp
 8005716:	f7fa fd57 	bl	80001c8 <__aeabi_dmul>
 800571a:	a338      	add	r3, pc, #224	@ (adr r3, 80057fc <__kernel_sin+0x16c>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa fe82 	bl	8000428 <__adddf3>
 8005724:	4606      	mov	r6, r0
 8005726:	460f      	mov	r7, r1
 8005728:	f1b8 0f00 	cmp.w	r8, #0
 800572c:	d11b      	bne.n	8005766 <__kernel_sin+0xd6>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4650      	mov	r0, sl
 8005734:	4659      	mov	r1, fp
 8005736:	f7fa fd47 	bl	80001c8 <__aeabi_dmul>
 800573a:	a325      	add	r3, pc, #148	@ (adr r3, 80057d0 <__kernel_sin+0x140>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa fe70 	bl	8000424 <__aeabi_dsub>
 8005744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005748:	f7fa fd3e 	bl	80001c8 <__aeabi_dmul>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4620      	mov	r0, r4
 8005752:	4629      	mov	r1, r5
 8005754:	f7fa fe68 	bl	8000428 <__adddf3>
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	ec45 4b10 	vmov	d0, r4, r5
 8005760:	b005      	add	sp, #20
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800576a:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <__kernel_sin+0x148>)
 800576c:	2200      	movs	r2, #0
 800576e:	f7fa fd2b 	bl	80001c8 <__aeabi_dmul>
 8005772:	4632      	mov	r2, r6
 8005774:	4680      	mov	r8, r0
 8005776:	4689      	mov	r9, r1
 8005778:	463b      	mov	r3, r7
 800577a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800577e:	f7fa fd23 	bl	80001c8 <__aeabi_dmul>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4640      	mov	r0, r8
 8005788:	4649      	mov	r1, r9
 800578a:	f7fa fe4b 	bl	8000424 <__aeabi_dsub>
 800578e:	4652      	mov	r2, sl
 8005790:	465b      	mov	r3, fp
 8005792:	f7fa fd19 	bl	80001c8 <__aeabi_dmul>
 8005796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800579a:	f7fa fe43 	bl	8000424 <__aeabi_dsub>
 800579e:	a30c      	add	r3, pc, #48	@ (adr r3, 80057d0 <__kernel_sin+0x140>)
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	4606      	mov	r6, r0
 80057a6:	460f      	mov	r7, r1
 80057a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057ac:	f7fa fd0c 	bl	80001c8 <__aeabi_dmul>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4630      	mov	r0, r6
 80057b6:	4639      	mov	r1, r7
 80057b8:	f7fa fe36 	bl	8000428 <__adddf3>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4620      	mov	r0, r4
 80057c2:	4629      	mov	r1, r5
 80057c4:	f7fa fe2e 	bl	8000424 <__aeabi_dsub>
 80057c8:	e7c6      	b.n	8005758 <__kernel_sin+0xc8>
 80057ca:	bf00      	nop
 80057cc:	f3af 8000 	nop.w
 80057d0:	55555549 	.word	0x55555549
 80057d4:	3fc55555 	.word	0x3fc55555
 80057d8:	3fe00000 	.word	0x3fe00000
 80057dc:	5acfd57c 	.word	0x5acfd57c
 80057e0:	3de5d93a 	.word	0x3de5d93a
 80057e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80057e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80057ec:	57b1fe7d 	.word	0x57b1fe7d
 80057f0:	3ec71de3 	.word	0x3ec71de3
 80057f4:	19c161d5 	.word	0x19c161d5
 80057f8:	3f2a01a0 	.word	0x3f2a01a0
 80057fc:	1110f8a6 	.word	0x1110f8a6
 8005800:	3f811111 	.word	0x3f811111
 8005804:	00000000 	.word	0x00000000

08005808 <__ieee754_rem_pio2>:
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	ec57 6b10 	vmov	r6, r7, d0
 8005810:	4bc5      	ldr	r3, [pc, #788]	@ (8005b28 <__ieee754_rem_pio2+0x320>)
 8005812:	b08d      	sub	sp, #52	@ 0x34
 8005814:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005818:	4598      	cmp	r8, r3
 800581a:	4604      	mov	r4, r0
 800581c:	9704      	str	r7, [sp, #16]
 800581e:	d807      	bhi.n	8005830 <__ieee754_rem_pio2+0x28>
 8005820:	2200      	movs	r2, #0
 8005822:	2300      	movs	r3, #0
 8005824:	ed80 0b00 	vstr	d0, [r0]
 8005828:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800582c:	2500      	movs	r5, #0
 800582e:	e028      	b.n	8005882 <__ieee754_rem_pio2+0x7a>
 8005830:	4bbe      	ldr	r3, [pc, #760]	@ (8005b2c <__ieee754_rem_pio2+0x324>)
 8005832:	4598      	cmp	r8, r3
 8005834:	d878      	bhi.n	8005928 <__ieee754_rem_pio2+0x120>
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	4dbd      	ldr	r5, [pc, #756]	@ (8005b30 <__ieee754_rem_pio2+0x328>)
 800583a:	2b00      	cmp	r3, #0
 800583c:	4630      	mov	r0, r6
 800583e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005af0 <__ieee754_rem_pio2+0x2e8>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	4639      	mov	r1, r7
 8005846:	dd38      	ble.n	80058ba <__ieee754_rem_pio2+0xb2>
 8005848:	f7fa fdec 	bl	8000424 <__aeabi_dsub>
 800584c:	45a8      	cmp	r8, r5
 800584e:	4606      	mov	r6, r0
 8005850:	460f      	mov	r7, r1
 8005852:	d01a      	beq.n	800588a <__ieee754_rem_pio2+0x82>
 8005854:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005af8 <__ieee754_rem_pio2+0x2f0>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f7fa fde3 	bl	8000424 <__aeabi_dsub>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4680      	mov	r8, r0
 8005864:	4689      	mov	r9, r1
 8005866:	4630      	mov	r0, r6
 8005868:	4639      	mov	r1, r7
 800586a:	f7fa fddb 	bl	8000424 <__aeabi_dsub>
 800586e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005af8 <__ieee754_rem_pio2+0x2f0>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f7fa fdd6 	bl	8000424 <__aeabi_dsub>
 8005878:	e9c4 8900 	strd	r8, r9, [r4]
 800587c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005880:	2501      	movs	r5, #1
 8005882:	4628      	mov	r0, r5
 8005884:	b00d      	add	sp, #52	@ 0x34
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	a39d      	add	r3, pc, #628	@ (adr r3, 8005b00 <__ieee754_rem_pio2+0x2f8>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f7fa fdc8 	bl	8000424 <__aeabi_dsub>
 8005894:	a39c      	add	r3, pc, #624	@ (adr r3, 8005b08 <__ieee754_rem_pio2+0x300>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	4606      	mov	r6, r0
 800589c:	460f      	mov	r7, r1
 800589e:	f7fa fdc1 	bl	8000424 <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4680      	mov	r8, r0
 80058a8:	4689      	mov	r9, r1
 80058aa:	4630      	mov	r0, r6
 80058ac:	4639      	mov	r1, r7
 80058ae:	f7fa fdb9 	bl	8000424 <__aeabi_dsub>
 80058b2:	a395      	add	r3, pc, #596	@ (adr r3, 8005b08 <__ieee754_rem_pio2+0x300>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	e7dc      	b.n	8005874 <__ieee754_rem_pio2+0x6c>
 80058ba:	f7fa fdb5 	bl	8000428 <__adddf3>
 80058be:	45a8      	cmp	r8, r5
 80058c0:	4606      	mov	r6, r0
 80058c2:	460f      	mov	r7, r1
 80058c4:	d018      	beq.n	80058f8 <__ieee754_rem_pio2+0xf0>
 80058c6:	a38c      	add	r3, pc, #560	@ (adr r3, 8005af8 <__ieee754_rem_pio2+0x2f0>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f7fa fdac 	bl	8000428 <__adddf3>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4680      	mov	r8, r0
 80058d6:	4689      	mov	r9, r1
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fa fda2 	bl	8000424 <__aeabi_dsub>
 80058e0:	a385      	add	r3, pc, #532	@ (adr r3, 8005af8 <__ieee754_rem_pio2+0x2f0>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fd9f 	bl	8000428 <__adddf3>
 80058ea:	f04f 35ff 	mov.w	r5, #4294967295
 80058ee:	e9c4 8900 	strd	r8, r9, [r4]
 80058f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058f6:	e7c4      	b.n	8005882 <__ieee754_rem_pio2+0x7a>
 80058f8:	a381      	add	r3, pc, #516	@ (adr r3, 8005b00 <__ieee754_rem_pio2+0x2f8>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fa fd93 	bl	8000428 <__adddf3>
 8005902:	a381      	add	r3, pc, #516	@ (adr r3, 8005b08 <__ieee754_rem_pio2+0x300>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	4606      	mov	r6, r0
 800590a:	460f      	mov	r7, r1
 800590c:	f7fa fd8c 	bl	8000428 <__adddf3>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4680      	mov	r8, r0
 8005916:	4689      	mov	r9, r1
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fa fd82 	bl	8000424 <__aeabi_dsub>
 8005920:	a379      	add	r3, pc, #484	@ (adr r3, 8005b08 <__ieee754_rem_pio2+0x300>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	e7de      	b.n	80058e6 <__ieee754_rem_pio2+0xde>
 8005928:	4b82      	ldr	r3, [pc, #520]	@ (8005b34 <__ieee754_rem_pio2+0x32c>)
 800592a:	4598      	cmp	r8, r3
 800592c:	f200 80d1 	bhi.w	8005ad2 <__ieee754_rem_pio2+0x2ca>
 8005930:	f000 f966 	bl	8005c00 <fabs>
 8005934:	ec57 6b10 	vmov	r6, r7, d0
 8005938:	a375      	add	r3, pc, #468	@ (adr r3, 8005b10 <__ieee754_rem_pio2+0x308>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	4630      	mov	r0, r6
 8005940:	4639      	mov	r1, r7
 8005942:	f7fa fc41 	bl	80001c8 <__aeabi_dmul>
 8005946:	4b7c      	ldr	r3, [pc, #496]	@ (8005b38 <__ieee754_rem_pio2+0x330>)
 8005948:	2200      	movs	r2, #0
 800594a:	f7fa fd6d 	bl	8000428 <__adddf3>
 800594e:	f7fa ffa9 	bl	80008a4 <__aeabi_d2iz>
 8005952:	4605      	mov	r5, r0
 8005954:	f7fa feb4 	bl	80006c0 <__aeabi_i2d>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005960:	a363      	add	r3, pc, #396	@ (adr r3, 8005af0 <__ieee754_rem_pio2+0x2e8>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fc2f 	bl	80001c8 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fa fd57 	bl	8000424 <__aeabi_dsub>
 8005976:	a360      	add	r3, pc, #384	@ (adr r3, 8005af8 <__ieee754_rem_pio2+0x2f0>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	4682      	mov	sl, r0
 800597e:	468b      	mov	fp, r1
 8005980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005984:	f7fa fc20 	bl	80001c8 <__aeabi_dmul>
 8005988:	2d1f      	cmp	r5, #31
 800598a:	4606      	mov	r6, r0
 800598c:	460f      	mov	r7, r1
 800598e:	dc0c      	bgt.n	80059aa <__ieee754_rem_pio2+0x1a2>
 8005990:	4b6a      	ldr	r3, [pc, #424]	@ (8005b3c <__ieee754_rem_pio2+0x334>)
 8005992:	1e6a      	subs	r2, r5, #1
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	4543      	cmp	r3, r8
 800599a:	d006      	beq.n	80059aa <__ieee754_rem_pio2+0x1a2>
 800599c:	4632      	mov	r2, r6
 800599e:	463b      	mov	r3, r7
 80059a0:	4650      	mov	r0, sl
 80059a2:	4659      	mov	r1, fp
 80059a4:	f7fa fd3e 	bl	8000424 <__aeabi_dsub>
 80059a8:	e00e      	b.n	80059c8 <__ieee754_rem_pio2+0x1c0>
 80059aa:	463b      	mov	r3, r7
 80059ac:	4632      	mov	r2, r6
 80059ae:	4650      	mov	r0, sl
 80059b0:	4659      	mov	r1, fp
 80059b2:	f7fa fd37 	bl	8000424 <__aeabi_dsub>
 80059b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80059c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	dc02      	bgt.n	80059ce <__ieee754_rem_pio2+0x1c6>
 80059c8:	e9c4 0100 	strd	r0, r1, [r4]
 80059cc:	e039      	b.n	8005a42 <__ieee754_rem_pio2+0x23a>
 80059ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8005b00 <__ieee754_rem_pio2+0x2f8>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059d8:	f7fa fbf6 	bl	80001c8 <__aeabi_dmul>
 80059dc:	4606      	mov	r6, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4650      	mov	r0, sl
 80059e6:	4659      	mov	r1, fp
 80059e8:	f7fa fd1c 	bl	8000424 <__aeabi_dsub>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4680      	mov	r8, r0
 80059f2:	4689      	mov	r9, r1
 80059f4:	4650      	mov	r0, sl
 80059f6:	4659      	mov	r1, fp
 80059f8:	f7fa fd14 	bl	8000424 <__aeabi_dsub>
 80059fc:	4632      	mov	r2, r6
 80059fe:	463b      	mov	r3, r7
 8005a00:	f7fa fd10 	bl	8000424 <__aeabi_dsub>
 8005a04:	a340      	add	r3, pc, #256	@ (adr r3, 8005b08 <__ieee754_rem_pio2+0x300>)
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	460f      	mov	r7, r1
 8005a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a12:	f7fa fbd9 	bl	80001c8 <__aeabi_dmul>
 8005a16:	4632      	mov	r2, r6
 8005a18:	463b      	mov	r3, r7
 8005a1a:	f7fa fd03 	bl	8000424 <__aeabi_dsub>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4606      	mov	r6, r0
 8005a24:	460f      	mov	r7, r1
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f7fa fcfb 	bl	8000424 <__aeabi_dsub>
 8005a2e:	9a05      	ldr	r2, [sp, #20]
 8005a30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b31      	cmp	r3, #49	@ 0x31
 8005a38:	dc20      	bgt.n	8005a7c <__ieee754_rem_pio2+0x274>
 8005a3a:	e9c4 0100 	strd	r0, r1, [r4]
 8005a3e:	46c2      	mov	sl, r8
 8005a40:	46cb      	mov	fp, r9
 8005a42:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005a46:	4650      	mov	r0, sl
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	4659      	mov	r1, fp
 8005a4e:	f7fa fce9 	bl	8000424 <__aeabi_dsub>
 8005a52:	463b      	mov	r3, r7
 8005a54:	4632      	mov	r2, r6
 8005a56:	f7fa fce5 	bl	8000424 <__aeabi_dsub>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a62:	f6bf af0e 	bge.w	8005882 <__ieee754_rem_pio2+0x7a>
 8005a66:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005a70:	f8c4 8000 	str.w	r8, [r4]
 8005a74:	60a0      	str	r0, [r4, #8]
 8005a76:	60e3      	str	r3, [r4, #12]
 8005a78:	426d      	negs	r5, r5
 8005a7a:	e702      	b.n	8005882 <__ieee754_rem_pio2+0x7a>
 8005a7c:	a326      	add	r3, pc, #152	@ (adr r3, 8005b18 <__ieee754_rem_pio2+0x310>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a86:	f7fa fb9f 	bl	80001c8 <__aeabi_dmul>
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4640      	mov	r0, r8
 8005a94:	4649      	mov	r1, r9
 8005a96:	f7fa fcc5 	bl	8000424 <__aeabi_dsub>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4682      	mov	sl, r0
 8005aa0:	468b      	mov	fp, r1
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	f7fa fcbd 	bl	8000424 <__aeabi_dsub>
 8005aaa:	4632      	mov	r2, r6
 8005aac:	463b      	mov	r3, r7
 8005aae:	f7fa fcb9 	bl	8000424 <__aeabi_dsub>
 8005ab2:	a31b      	add	r3, pc, #108	@ (adr r3, 8005b20 <__ieee754_rem_pio2+0x318>)
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	4606      	mov	r6, r0
 8005aba:	460f      	mov	r7, r1
 8005abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac0:	f7fa fb82 	bl	80001c8 <__aeabi_dmul>
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	f7fa fcac 	bl	8000424 <__aeabi_dsub>
 8005acc:	4606      	mov	r6, r0
 8005ace:	460f      	mov	r7, r1
 8005ad0:	e764      	b.n	800599c <__ieee754_rem_pio2+0x194>
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b40 <__ieee754_rem_pio2+0x338>)
 8005ad4:	4598      	cmp	r8, r3
 8005ad6:	d935      	bls.n	8005b44 <__ieee754_rem_pio2+0x33c>
 8005ad8:	4632      	mov	r2, r6
 8005ada:	463b      	mov	r3, r7
 8005adc:	4630      	mov	r0, r6
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f7fa fca0 	bl	8000424 <__aeabi_dsub>
 8005ae4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ae8:	e9c4 0100 	strd	r0, r1, [r4]
 8005aec:	e69e      	b.n	800582c <__ieee754_rem_pio2+0x24>
 8005aee:	bf00      	nop
 8005af0:	54400000 	.word	0x54400000
 8005af4:	3ff921fb 	.word	0x3ff921fb
 8005af8:	1a626331 	.word	0x1a626331
 8005afc:	3dd0b461 	.word	0x3dd0b461
 8005b00:	1a600000 	.word	0x1a600000
 8005b04:	3dd0b461 	.word	0x3dd0b461
 8005b08:	2e037073 	.word	0x2e037073
 8005b0c:	3ba3198a 	.word	0x3ba3198a
 8005b10:	6dc9c883 	.word	0x6dc9c883
 8005b14:	3fe45f30 	.word	0x3fe45f30
 8005b18:	2e000000 	.word	0x2e000000
 8005b1c:	3ba3198a 	.word	0x3ba3198a
 8005b20:	252049c1 	.word	0x252049c1
 8005b24:	397b839a 	.word	0x397b839a
 8005b28:	3fe921fb 	.word	0x3fe921fb
 8005b2c:	4002d97b 	.word	0x4002d97b
 8005b30:	3ff921fb 	.word	0x3ff921fb
 8005b34:	413921fb 	.word	0x413921fb
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	08006528 	.word	0x08006528
 8005b40:	7fefffff 	.word	0x7fefffff
 8005b44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005b48:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005b4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005b50:	4630      	mov	r0, r6
 8005b52:	460f      	mov	r7, r1
 8005b54:	f7fa fea6 	bl	80008a4 <__aeabi_d2iz>
 8005b58:	f7fa fdb2 	bl	80006c0 <__aeabi_i2d>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b68:	f7fa fc5c 	bl	8000424 <__aeabi_dsub>
 8005b6c:	4b22      	ldr	r3, [pc, #136]	@ (8005bf8 <__ieee754_rem_pio2+0x3f0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f7fa fb2a 	bl	80001c8 <__aeabi_dmul>
 8005b74:	460f      	mov	r7, r1
 8005b76:	4606      	mov	r6, r0
 8005b78:	f7fa fe94 	bl	80008a4 <__aeabi_d2iz>
 8005b7c:	f7fa fda0 	bl	80006c0 <__aeabi_i2d>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4630      	mov	r0, r6
 8005b86:	4639      	mov	r1, r7
 8005b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b8c:	f7fa fc4a 	bl	8000424 <__aeabi_dsub>
 8005b90:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <__ieee754_rem_pio2+0x3f0>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	f7fa fb18 	bl	80001c8 <__aeabi_dmul>
 8005b98:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005b9c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005ba0:	f04f 0803 	mov.w	r8, #3
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	2700      	movs	r7, #0
 8005ba8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005bac:	4632      	mov	r2, r6
 8005bae:	463b      	mov	r3, r7
 8005bb0:	46c2      	mov	sl, r8
 8005bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bb6:	f7fa fe43 	bl	8000840 <__aeabi_dcmpeq>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d1f4      	bne.n	8005ba8 <__ieee754_rem_pio2+0x3a0>
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8005bfc <__ieee754_rem_pio2+0x3f4>)
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4653      	mov	r3, sl
 8005bca:	4621      	mov	r1, r4
 8005bcc:	a806      	add	r0, sp, #24
 8005bce:	f000 f81f 	bl	8005c10 <__kernel_rem_pio2>
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	f6bf ae53 	bge.w	8005882 <__ieee754_rem_pio2+0x7a>
 8005bdc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005be0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005be4:	e9c4 2300 	strd	r2, r3, [r4]
 8005be8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005bec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bf0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005bf4:	e740      	b.n	8005a78 <__ieee754_rem_pio2+0x270>
 8005bf6:	bf00      	nop
 8005bf8:	41700000 	.word	0x41700000
 8005bfc:	080065a8 	.word	0x080065a8

08005c00 <fabs>:
 8005c00:	ec51 0b10 	vmov	r0, r1, d0
 8005c04:	4602      	mov	r2, r0
 8005c06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005c0a:	ec43 2b10 	vmov	d0, r2, r3
 8005c0e:	4770      	bx	lr

08005c10 <__kernel_rem_pio2>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	ed2d 8b02 	vpush	{d8}
 8005c18:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005c1c:	f112 0f14 	cmn.w	r2, #20
 8005c20:	9306      	str	r3, [sp, #24]
 8005c22:	9104      	str	r1, [sp, #16]
 8005c24:	4bbe      	ldr	r3, [pc, #760]	@ (8005f20 <__kernel_rem_pio2+0x310>)
 8005c26:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005c28:	9008      	str	r0, [sp, #32]
 8005c2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c36:	bfa8      	it	ge
 8005c38:	1ed4      	subge	r4, r2, #3
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	bfb2      	itee	lt
 8005c3e:	2400      	movlt	r4, #0
 8005c40:	2318      	movge	r3, #24
 8005c42:	fb94 f4f3 	sdivge	r4, r4, r3
 8005c46:	f06f 0317 	mvn.w	r3, #23
 8005c4a:	fb04 3303 	mla	r3, r4, r3, r3
 8005c4e:	eb03 0b02 	add.w	fp, r3, r2
 8005c52:	9b00      	ldr	r3, [sp, #0]
 8005c54:	9a05      	ldr	r2, [sp, #20]
 8005c56:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005f10 <__kernel_rem_pio2+0x300>
 8005c5a:	eb03 0802 	add.w	r8, r3, r2
 8005c5e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005c60:	1aa7      	subs	r7, r4, r2
 8005c62:	ae20      	add	r6, sp, #128	@ 0x80
 8005c64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005c68:	2500      	movs	r5, #0
 8005c6a:	4545      	cmp	r5, r8
 8005c6c:	dd13      	ble.n	8005c96 <__kernel_rem_pio2+0x86>
 8005c6e:	9b06      	ldr	r3, [sp, #24]
 8005c70:	aa20      	add	r2, sp, #128	@ 0x80
 8005c72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005c76:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005c7a:	f04f 0800 	mov.w	r8, #0
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	4598      	cmp	r8, r3
 8005c82:	dc31      	bgt.n	8005ce8 <__kernel_rem_pio2+0xd8>
 8005c84:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005f10 <__kernel_rem_pio2+0x300>
 8005c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c90:	462f      	mov	r7, r5
 8005c92:	2600      	movs	r6, #0
 8005c94:	e01b      	b.n	8005cce <__kernel_rem_pio2+0xbe>
 8005c96:	42ef      	cmn	r7, r5
 8005c98:	d407      	bmi.n	8005caa <__kernel_rem_pio2+0x9a>
 8005c9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005c9e:	f7fa fd0f 	bl	80006c0 <__aeabi_i2d>
 8005ca2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005ca6:	3501      	adds	r5, #1
 8005ca8:	e7df      	b.n	8005c6a <__kernel_rem_pio2+0x5a>
 8005caa:	ec51 0b18 	vmov	r0, r1, d8
 8005cae:	e7f8      	b.n	8005ca2 <__kernel_rem_pio2+0x92>
 8005cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005cb8:	f7fa fa86 	bl	80001c8 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc4:	f7fa fbb0 	bl	8000428 <__adddf3>
 8005cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ccc:	3601      	adds	r6, #1
 8005cce:	9b05      	ldr	r3, [sp, #20]
 8005cd0:	429e      	cmp	r6, r3
 8005cd2:	f1a7 0708 	sub.w	r7, r7, #8
 8005cd6:	ddeb      	ble.n	8005cb0 <__kernel_rem_pio2+0xa0>
 8005cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cdc:	f108 0801 	add.w	r8, r8, #1
 8005ce0:	ecaa 7b02 	vstmia	sl!, {d7}
 8005ce4:	3508      	adds	r5, #8
 8005ce6:	e7ca      	b.n	8005c7e <__kernel_rem_pio2+0x6e>
 8005ce8:	9b00      	ldr	r3, [sp, #0]
 8005cea:	f8dd 8000 	ldr.w	r8, [sp]
 8005cee:	aa0c      	add	r2, sp, #48	@ 0x30
 8005cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cf6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005cf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cfe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005d02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d04:	ab98      	add	r3, sp, #608	@ 0x260
 8005d06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d0a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005d0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d12:	ac0c      	add	r4, sp, #48	@ 0x30
 8005d14:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005d16:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005d1a:	46a1      	mov	r9, r4
 8005d1c:	46c2      	mov	sl, r8
 8005d1e:	f1ba 0f00 	cmp.w	sl, #0
 8005d22:	f1a5 0508 	sub.w	r5, r5, #8
 8005d26:	dc77      	bgt.n	8005e18 <__kernel_rem_pio2+0x208>
 8005d28:	4658      	mov	r0, fp
 8005d2a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005d2e:	f000 fac7 	bl	80062c0 <scalbn>
 8005d32:	ec57 6b10 	vmov	r6, r7, d0
 8005d36:	2200      	movs	r2, #0
 8005d38:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7fa fa42 	bl	80001c8 <__aeabi_dmul>
 8005d44:	ec41 0b10 	vmov	d0, r0, r1
 8005d48:	f000 fb3a 	bl	80063c0 <floor>
 8005d4c:	4b75      	ldr	r3, [pc, #468]	@ (8005f24 <__kernel_rem_pio2+0x314>)
 8005d4e:	ec51 0b10 	vmov	r0, r1, d0
 8005d52:	2200      	movs	r2, #0
 8005d54:	f7fa fa38 	bl	80001c8 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fb60 	bl	8000424 <__aeabi_dsub>
 8005d64:	460f      	mov	r7, r1
 8005d66:	4606      	mov	r6, r0
 8005d68:	f7fa fd9c 	bl	80008a4 <__aeabi_d2iz>
 8005d6c:	9002      	str	r0, [sp, #8]
 8005d6e:	f7fa fca7 	bl	80006c0 <__aeabi_i2d>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4630      	mov	r0, r6
 8005d78:	4639      	mov	r1, r7
 8005d7a:	f7fa fb53 	bl	8000424 <__aeabi_dsub>
 8005d7e:	f1bb 0f00 	cmp.w	fp, #0
 8005d82:	4606      	mov	r6, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	dd6c      	ble.n	8005e62 <__kernel_rem_pio2+0x252>
 8005d88:	f108 31ff 	add.w	r1, r8, #4294967295
 8005d8c:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d8e:	9d02      	ldr	r5, [sp, #8]
 8005d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d94:	f1cb 0018 	rsb	r0, fp, #24
 8005d98:	fa43 f200 	asr.w	r2, r3, r0
 8005d9c:	4415      	add	r5, r2
 8005d9e:	4082      	lsls	r2, r0
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	aa0c      	add	r2, sp, #48	@ 0x30
 8005da4:	9502      	str	r5, [sp, #8]
 8005da6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005daa:	f1cb 0217 	rsb	r2, fp, #23
 8005dae:	fa43 f902 	asr.w	r9, r3, r2
 8005db2:	f1b9 0f00 	cmp.w	r9, #0
 8005db6:	dd64      	ble.n	8005e82 <__kernel_rem_pio2+0x272>
 8005db8:	9b02      	ldr	r3, [sp, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	9302      	str	r3, [sp, #8]
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005dc6:	4590      	cmp	r8, r2
 8005dc8:	f300 80b8 	bgt.w	8005f3c <__kernel_rem_pio2+0x32c>
 8005dcc:	f1bb 0f00 	cmp.w	fp, #0
 8005dd0:	dd07      	ble.n	8005de2 <__kernel_rem_pio2+0x1d2>
 8005dd2:	f1bb 0f01 	cmp.w	fp, #1
 8005dd6:	f000 80bf 	beq.w	8005f58 <__kernel_rem_pio2+0x348>
 8005dda:	f1bb 0f02 	cmp.w	fp, #2
 8005dde:	f000 80c6 	beq.w	8005f6e <__kernel_rem_pio2+0x35e>
 8005de2:	f1b9 0f02 	cmp.w	r9, #2
 8005de6:	d14c      	bne.n	8005e82 <__kernel_rem_pio2+0x272>
 8005de8:	4632      	mov	r2, r6
 8005dea:	463b      	mov	r3, r7
 8005dec:	494e      	ldr	r1, [pc, #312]	@ (8005f28 <__kernel_rem_pio2+0x318>)
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7fa fb18 	bl	8000424 <__aeabi_dsub>
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	2d00      	cmp	r5, #0
 8005dfa:	d042      	beq.n	8005e82 <__kernel_rem_pio2+0x272>
 8005dfc:	4658      	mov	r0, fp
 8005dfe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005f18 <__kernel_rem_pio2+0x308>
 8005e02:	f000 fa5d 	bl	80062c0 <scalbn>
 8005e06:	4630      	mov	r0, r6
 8005e08:	4639      	mov	r1, r7
 8005e0a:	ec53 2b10 	vmov	r2, r3, d0
 8005e0e:	f7fa fb09 	bl	8000424 <__aeabi_dsub>
 8005e12:	4606      	mov	r6, r0
 8005e14:	460f      	mov	r7, r1
 8005e16:	e034      	b.n	8005e82 <__kernel_rem_pio2+0x272>
 8005e18:	4b44      	ldr	r3, [pc, #272]	@ (8005f2c <__kernel_rem_pio2+0x31c>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e20:	f7fa f9d2 	bl	80001c8 <__aeabi_dmul>
 8005e24:	f7fa fd3e 	bl	80008a4 <__aeabi_d2iz>
 8005e28:	f7fa fc4a 	bl	80006c0 <__aeabi_i2d>
 8005e2c:	4b40      	ldr	r3, [pc, #256]	@ (8005f30 <__kernel_rem_pio2+0x320>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4606      	mov	r6, r0
 8005e32:	460f      	mov	r7, r1
 8005e34:	f7fa f9c8 	bl	80001c8 <__aeabi_dmul>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e40:	f7fa faf0 	bl	8000424 <__aeabi_dsub>
 8005e44:	f7fa fd2e 	bl	80008a4 <__aeabi_d2iz>
 8005e48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e4c:	f849 0b04 	str.w	r0, [r9], #4
 8005e50:	4639      	mov	r1, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7fa fae8 	bl	8000428 <__adddf3>
 8005e58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e60:	e75d      	b.n	8005d1e <__kernel_rem_pio2+0x10e>
 8005e62:	d107      	bne.n	8005e74 <__kernel_rem_pio2+0x264>
 8005e64:	f108 33ff 	add.w	r3, r8, #4294967295
 8005e68:	aa0c      	add	r2, sp, #48	@ 0x30
 8005e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005e72:	e79e      	b.n	8005db2 <__kernel_rem_pio2+0x1a2>
 8005e74:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <__kernel_rem_pio2+0x324>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	f7fa fd00 	bl	800087c <__aeabi_dcmpge>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d143      	bne.n	8005f08 <__kernel_rem_pio2+0x2f8>
 8005e80:	4681      	mov	r9, r0
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fcd9 	bl	8000840 <__aeabi_dcmpeq>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f000 80bf 	beq.w	8006012 <__kernel_rem_pio2+0x402>
 8005e94:	f108 33ff 	add.w	r3, r8, #4294967295
 8005e98:	2200      	movs	r2, #0
 8005e9a:	9900      	ldr	r1, [sp, #0]
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	da6e      	bge.n	8005f7e <__kernel_rem_pio2+0x36e>
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	f000 8089 	beq.w	8005fb8 <__kernel_rem_pio2+0x3a8>
 8005ea6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eaa:	ab0c      	add	r3, sp, #48	@ 0x30
 8005eac:	f1ab 0b18 	sub.w	fp, fp, #24
 8005eb0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f6      	beq.n	8005ea6 <__kernel_rem_pio2+0x296>
 8005eb8:	4658      	mov	r0, fp
 8005eba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005f18 <__kernel_rem_pio2+0x308>
 8005ebe:	f000 f9ff 	bl	80062c0 <scalbn>
 8005ec2:	f108 0301 	add.w	r3, r8, #1
 8005ec6:	00da      	lsls	r2, r3, #3
 8005ec8:	9205      	str	r2, [sp, #20]
 8005eca:	ec55 4b10 	vmov	r4, r5, d0
 8005ece:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005ed0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005f2c <__kernel_rem_pio2+0x31c>
 8005ed4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005ed8:	4646      	mov	r6, r8
 8005eda:	f04f 0a00 	mov.w	sl, #0
 8005ede:	2e00      	cmp	r6, #0
 8005ee0:	f280 80cf 	bge.w	8006082 <__kernel_rem_pio2+0x472>
 8005ee4:	4644      	mov	r4, r8
 8005ee6:	2c00      	cmp	r4, #0
 8005ee8:	f2c0 80fd 	blt.w	80060e6 <__kernel_rem_pio2+0x4d6>
 8005eec:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <__kernel_rem_pio2+0x328>)
 8005eee:	461f      	mov	r7, r3
 8005ef0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005ef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ef6:	9306      	str	r3, [sp, #24]
 8005ef8:	f04f 0a00 	mov.w	sl, #0
 8005efc:	f04f 0b00 	mov.w	fp, #0
 8005f00:	2600      	movs	r6, #0
 8005f02:	eba8 0504 	sub.w	r5, r8, r4
 8005f06:	e0e2      	b.n	80060ce <__kernel_rem_pio2+0x4be>
 8005f08:	f04f 0902 	mov.w	r9, #2
 8005f0c:	e754      	b.n	8005db8 <__kernel_rem_pio2+0x1a8>
 8005f0e:	bf00      	nop
	...
 8005f1c:	3ff00000 	.word	0x3ff00000
 8005f20:	080066f0 	.word	0x080066f0
 8005f24:	40200000 	.word	0x40200000
 8005f28:	3ff00000 	.word	0x3ff00000
 8005f2c:	3e700000 	.word	0x3e700000
 8005f30:	41700000 	.word	0x41700000
 8005f34:	3fe00000 	.word	0x3fe00000
 8005f38:	080066b0 	.word	0x080066b0
 8005f3c:	f854 3b04 	ldr.w	r3, [r4], #4
 8005f40:	b945      	cbnz	r5, 8005f54 <__kernel_rem_pio2+0x344>
 8005f42:	b123      	cbz	r3, 8005f4e <__kernel_rem_pio2+0x33e>
 8005f44:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005f48:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	3201      	adds	r2, #1
 8005f50:	461d      	mov	r5, r3
 8005f52:	e738      	b.n	8005dc6 <__kernel_rem_pio2+0x1b6>
 8005f54:	1acb      	subs	r3, r1, r3
 8005f56:	e7f7      	b.n	8005f48 <__kernel_rem_pio2+0x338>
 8005f58:	f108 32ff 	add.w	r2, r8, #4294967295
 8005f5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8005f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f62:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005f66:	a90c      	add	r1, sp, #48	@ 0x30
 8005f68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005f6c:	e739      	b.n	8005de2 <__kernel_rem_pio2+0x1d2>
 8005f6e:	f108 32ff 	add.w	r2, r8, #4294967295
 8005f72:	ab0c      	add	r3, sp, #48	@ 0x30
 8005f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f7c:	e7f3      	b.n	8005f66 <__kernel_rem_pio2+0x356>
 8005f7e:	a90c      	add	r1, sp, #48	@ 0x30
 8005f80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	430a      	orrs	r2, r1
 8005f88:	e787      	b.n	8005e9a <__kernel_rem_pio2+0x28a>
 8005f8a:	3401      	adds	r4, #1
 8005f8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	d0fa      	beq.n	8005f8a <__kernel_rem_pio2+0x37a>
 8005f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f9a:	eb0d 0503 	add.w	r5, sp, r3
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	aa20      	add	r2, sp, #128	@ 0x80
 8005fa2:	4443      	add	r3, r8
 8005fa4:	f108 0701 	add.w	r7, r8, #1
 8005fa8:	3d98      	subs	r5, #152	@ 0x98
 8005faa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005fae:	4444      	add	r4, r8
 8005fb0:	42bc      	cmp	r4, r7
 8005fb2:	da04      	bge.n	8005fbe <__kernel_rem_pio2+0x3ae>
 8005fb4:	46a0      	mov	r8, r4
 8005fb6:	e6a2      	b.n	8005cfe <__kernel_rem_pio2+0xee>
 8005fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fba:	2401      	movs	r4, #1
 8005fbc:	e7e6      	b.n	8005f8c <__kernel_rem_pio2+0x37c>
 8005fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005fc4:	f7fa fb7c 	bl	80006c0 <__aeabi_i2d>
 8005fc8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006290 <__kernel_rem_pio2+0x680>
 8005fcc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005fd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd8:	46b2      	mov	sl, r6
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	4598      	cmp	r8, r3
 8005fe2:	dd05      	ble.n	8005ff0 <__kernel_rem_pio2+0x3e0>
 8005fe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fe8:	3701      	adds	r7, #1
 8005fea:	eca5 7b02 	vstmia	r5!, {d7}
 8005fee:	e7df      	b.n	8005fb0 <__kernel_rem_pio2+0x3a0>
 8005ff0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005ff4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005ff8:	f7fa f8e6 	bl	80001c8 <__aeabi_dmul>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006004:	f7fa fa10 	bl	8000428 <__adddf3>
 8006008:	f108 0801 	add.w	r8, r8, #1
 800600c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006010:	e7e5      	b.n	8005fde <__kernel_rem_pio2+0x3ce>
 8006012:	f1cb 0000 	rsb	r0, fp, #0
 8006016:	ec47 6b10 	vmov	d0, r6, r7
 800601a:	f000 f951 	bl	80062c0 <scalbn>
 800601e:	ec55 4b10 	vmov	r4, r5, d0
 8006022:	4b9d      	ldr	r3, [pc, #628]	@ (8006298 <__kernel_rem_pio2+0x688>)
 8006024:	2200      	movs	r2, #0
 8006026:	4620      	mov	r0, r4
 8006028:	4629      	mov	r1, r5
 800602a:	f7fa fc27 	bl	800087c <__aeabi_dcmpge>
 800602e:	b300      	cbz	r0, 8006072 <__kernel_rem_pio2+0x462>
 8006030:	4b9a      	ldr	r3, [pc, #616]	@ (800629c <__kernel_rem_pio2+0x68c>)
 8006032:	2200      	movs	r2, #0
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f7fa f8c6 	bl	80001c8 <__aeabi_dmul>
 800603c:	f7fa fc32 	bl	80008a4 <__aeabi_d2iz>
 8006040:	4606      	mov	r6, r0
 8006042:	f7fa fb3d 	bl	80006c0 <__aeabi_i2d>
 8006046:	4b94      	ldr	r3, [pc, #592]	@ (8006298 <__kernel_rem_pio2+0x688>)
 8006048:	2200      	movs	r2, #0
 800604a:	f7fa f8bd 	bl	80001c8 <__aeabi_dmul>
 800604e:	460b      	mov	r3, r1
 8006050:	4602      	mov	r2, r0
 8006052:	4629      	mov	r1, r5
 8006054:	4620      	mov	r0, r4
 8006056:	f7fa f9e5 	bl	8000424 <__aeabi_dsub>
 800605a:	f7fa fc23 	bl	80008a4 <__aeabi_d2iz>
 800605e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006060:	f10b 0b18 	add.w	fp, fp, #24
 8006064:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006068:	f108 0801 	add.w	r8, r8, #1
 800606c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006070:	e722      	b.n	8005eb8 <__kernel_rem_pio2+0x2a8>
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fc15 	bl	80008a4 <__aeabi_d2iz>
 800607a:	ab0c      	add	r3, sp, #48	@ 0x30
 800607c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006080:	e71a      	b.n	8005eb8 <__kernel_rem_pio2+0x2a8>
 8006082:	ab0c      	add	r3, sp, #48	@ 0x30
 8006084:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006088:	f7fa fb1a 	bl	80006c0 <__aeabi_i2d>
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	f7fa f89a 	bl	80001c8 <__aeabi_dmul>
 8006094:	4652      	mov	r2, sl
 8006096:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800609a:	465b      	mov	r3, fp
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f7fa f892 	bl	80001c8 <__aeabi_dmul>
 80060a4:	3e01      	subs	r6, #1
 80060a6:	4604      	mov	r4, r0
 80060a8:	460d      	mov	r5, r1
 80060aa:	e718      	b.n	8005ede <__kernel_rem_pio2+0x2ce>
 80060ac:	9906      	ldr	r1, [sp, #24]
 80060ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80060b2:	9106      	str	r1, [sp, #24]
 80060b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80060b8:	f7fa f886 	bl	80001c8 <__aeabi_dmul>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4650      	mov	r0, sl
 80060c2:	4659      	mov	r1, fp
 80060c4:	f7fa f9b0 	bl	8000428 <__adddf3>
 80060c8:	3601      	adds	r6, #1
 80060ca:	4682      	mov	sl, r0
 80060cc:	468b      	mov	fp, r1
 80060ce:	9b00      	ldr	r3, [sp, #0]
 80060d0:	429e      	cmp	r6, r3
 80060d2:	dc01      	bgt.n	80060d8 <__kernel_rem_pio2+0x4c8>
 80060d4:	42b5      	cmp	r5, r6
 80060d6:	dae9      	bge.n	80060ac <__kernel_rem_pio2+0x49c>
 80060d8:	ab48      	add	r3, sp, #288	@ 0x120
 80060da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80060de:	e9c5 ab00 	strd	sl, fp, [r5]
 80060e2:	3c01      	subs	r4, #1
 80060e4:	e6ff      	b.n	8005ee6 <__kernel_rem_pio2+0x2d6>
 80060e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	dc0b      	bgt.n	8006104 <__kernel_rem_pio2+0x4f4>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dc39      	bgt.n	8006164 <__kernel_rem_pio2+0x554>
 80060f0:	d05d      	beq.n	80061ae <__kernel_rem_pio2+0x59e>
 80060f2:	9b02      	ldr	r3, [sp, #8]
 80060f4:	f003 0007 	and.w	r0, r3, #7
 80060f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80060fc:	ecbd 8b02 	vpop	{d8}
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006104:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006106:	2b03      	cmp	r3, #3
 8006108:	d1f3      	bne.n	80060f2 <__kernel_rem_pio2+0x4e2>
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006110:	eb0d 0403 	add.w	r4, sp, r3
 8006114:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006118:	4625      	mov	r5, r4
 800611a:	46c2      	mov	sl, r8
 800611c:	f1ba 0f00 	cmp.w	sl, #0
 8006120:	f1a5 0508 	sub.w	r5, r5, #8
 8006124:	dc6b      	bgt.n	80061fe <__kernel_rem_pio2+0x5ee>
 8006126:	4645      	mov	r5, r8
 8006128:	2d01      	cmp	r5, #1
 800612a:	f1a4 0408 	sub.w	r4, r4, #8
 800612e:	f300 8087 	bgt.w	8006240 <__kernel_rem_pio2+0x630>
 8006132:	9c05      	ldr	r4, [sp, #20]
 8006134:	ab48      	add	r3, sp, #288	@ 0x120
 8006136:	441c      	add	r4, r3
 8006138:	2000      	movs	r0, #0
 800613a:	2100      	movs	r1, #0
 800613c:	f1b8 0f01 	cmp.w	r8, #1
 8006140:	f300 809c 	bgt.w	800627c <__kernel_rem_pio2+0x66c>
 8006144:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006148:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800614c:	f1b9 0f00 	cmp.w	r9, #0
 8006150:	f040 80a6 	bne.w	80062a0 <__kernel_rem_pio2+0x690>
 8006154:	9b04      	ldr	r3, [sp, #16]
 8006156:	e9c3 7800 	strd	r7, r8, [r3]
 800615a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800615e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006162:	e7c6      	b.n	80060f2 <__kernel_rem_pio2+0x4e2>
 8006164:	9d05      	ldr	r5, [sp, #20]
 8006166:	ab48      	add	r3, sp, #288	@ 0x120
 8006168:	441d      	add	r5, r3
 800616a:	4644      	mov	r4, r8
 800616c:	2000      	movs	r0, #0
 800616e:	2100      	movs	r1, #0
 8006170:	2c00      	cmp	r4, #0
 8006172:	da35      	bge.n	80061e0 <__kernel_rem_pio2+0x5d0>
 8006174:	f1b9 0f00 	cmp.w	r9, #0
 8006178:	d038      	beq.n	80061ec <__kernel_rem_pio2+0x5dc>
 800617a:	4602      	mov	r2, r0
 800617c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006180:	9c04      	ldr	r4, [sp, #16]
 8006182:	e9c4 2300 	strd	r2, r3, [r4]
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800618e:	f7fa f949 	bl	8000424 <__aeabi_dsub>
 8006192:	ad4a      	add	r5, sp, #296	@ 0x128
 8006194:	2401      	movs	r4, #1
 8006196:	45a0      	cmp	r8, r4
 8006198:	da2b      	bge.n	80061f2 <__kernel_rem_pio2+0x5e2>
 800619a:	f1b9 0f00 	cmp.w	r9, #0
 800619e:	d002      	beq.n	80061a6 <__kernel_rem_pio2+0x596>
 80061a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061a4:	4619      	mov	r1, r3
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80061ac:	e7a1      	b.n	80060f2 <__kernel_rem_pio2+0x4e2>
 80061ae:	9c05      	ldr	r4, [sp, #20]
 80061b0:	ab48      	add	r3, sp, #288	@ 0x120
 80061b2:	441c      	add	r4, r3
 80061b4:	2000      	movs	r0, #0
 80061b6:	2100      	movs	r1, #0
 80061b8:	f1b8 0f00 	cmp.w	r8, #0
 80061bc:	da09      	bge.n	80061d2 <__kernel_rem_pio2+0x5c2>
 80061be:	f1b9 0f00 	cmp.w	r9, #0
 80061c2:	d002      	beq.n	80061ca <__kernel_rem_pio2+0x5ba>
 80061c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061c8:	4619      	mov	r1, r3
 80061ca:	9b04      	ldr	r3, [sp, #16]
 80061cc:	e9c3 0100 	strd	r0, r1, [r3]
 80061d0:	e78f      	b.n	80060f2 <__kernel_rem_pio2+0x4e2>
 80061d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80061d6:	f7fa f927 	bl	8000428 <__adddf3>
 80061da:	f108 38ff 	add.w	r8, r8, #4294967295
 80061de:	e7eb      	b.n	80061b8 <__kernel_rem_pio2+0x5a8>
 80061e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80061e4:	f7fa f920 	bl	8000428 <__adddf3>
 80061e8:	3c01      	subs	r4, #1
 80061ea:	e7c1      	b.n	8006170 <__kernel_rem_pio2+0x560>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	e7c6      	b.n	8006180 <__kernel_rem_pio2+0x570>
 80061f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80061f6:	f7fa f917 	bl	8000428 <__adddf3>
 80061fa:	3401      	adds	r4, #1
 80061fc:	e7cb      	b.n	8006196 <__kernel_rem_pio2+0x586>
 80061fe:	ed95 7b00 	vldr	d7, [r5]
 8006202:	ed8d 7b00 	vstr	d7, [sp]
 8006206:	ed95 7b02 	vldr	d7, [r5, #8]
 800620a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800620e:	ec53 2b17 	vmov	r2, r3, d7
 8006212:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006216:	f7fa f907 	bl	8000428 <__adddf3>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006226:	f7fa f8fd 	bl	8000424 <__aeabi_dsub>
 800622a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800622e:	f7fa f8fb 	bl	8000428 <__adddf3>
 8006232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006236:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800623a:	e9c5 6700 	strd	r6, r7, [r5]
 800623e:	e76d      	b.n	800611c <__kernel_rem_pio2+0x50c>
 8006240:	ed94 7b00 	vldr	d7, [r4]
 8006244:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006248:	ec51 0b17 	vmov	r0, r1, d7
 800624c:	4652      	mov	r2, sl
 800624e:	465b      	mov	r3, fp
 8006250:	ed8d 7b00 	vstr	d7, [sp]
 8006254:	f7fa f8e8 	bl	8000428 <__adddf3>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4606      	mov	r6, r0
 800625e:	460f      	mov	r7, r1
 8006260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006264:	f7fa f8de 	bl	8000424 <__aeabi_dsub>
 8006268:	4652      	mov	r2, sl
 800626a:	465b      	mov	r3, fp
 800626c:	f7fa f8dc 	bl	8000428 <__adddf3>
 8006270:	3d01      	subs	r5, #1
 8006272:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006276:	e9c4 6700 	strd	r6, r7, [r4]
 800627a:	e755      	b.n	8006128 <__kernel_rem_pio2+0x518>
 800627c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006280:	f7fa f8d2 	bl	8000428 <__adddf3>
 8006284:	f108 38ff 	add.w	r8, r8, #4294967295
 8006288:	e758      	b.n	800613c <__kernel_rem_pio2+0x52c>
 800628a:	bf00      	nop
 800628c:	f3af 8000 	nop.w
	...
 8006298:	41700000 	.word	0x41700000
 800629c:	3e700000 	.word	0x3e700000
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	9a04      	ldr	r2, [sp, #16]
 80062a4:	601f      	str	r7, [r3, #0]
 80062a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80062aa:	605c      	str	r4, [r3, #4]
 80062ac:	609d      	str	r5, [r3, #8]
 80062ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062b2:	60d3      	str	r3, [r2, #12]
 80062b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062b8:	6110      	str	r0, [r2, #16]
 80062ba:	6153      	str	r3, [r2, #20]
 80062bc:	e719      	b.n	80060f2 <__kernel_rem_pio2+0x4e2>
 80062be:	bf00      	nop

080062c0 <scalbn>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	ec55 4b10 	vmov	r4, r5, d0
 80062c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80062ca:	4606      	mov	r6, r0
 80062cc:	462b      	mov	r3, r5
 80062ce:	b991      	cbnz	r1, 80062f6 <scalbn+0x36>
 80062d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80062d4:	4323      	orrs	r3, r4
 80062d6:	d03d      	beq.n	8006354 <scalbn+0x94>
 80062d8:	4b35      	ldr	r3, [pc, #212]	@ (80063b0 <scalbn+0xf0>)
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	2200      	movs	r2, #0
 80062e0:	f7f9 ff72 	bl	80001c8 <__aeabi_dmul>
 80062e4:	4b33      	ldr	r3, [pc, #204]	@ (80063b4 <scalbn+0xf4>)
 80062e6:	429e      	cmp	r6, r3
 80062e8:	4604      	mov	r4, r0
 80062ea:	460d      	mov	r5, r1
 80062ec:	da0f      	bge.n	800630e <scalbn+0x4e>
 80062ee:	a328      	add	r3, pc, #160	@ (adr r3, 8006390 <scalbn+0xd0>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	e01e      	b.n	8006334 <scalbn+0x74>
 80062f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80062fa:	4291      	cmp	r1, r2
 80062fc:	d10b      	bne.n	8006316 <scalbn+0x56>
 80062fe:	4622      	mov	r2, r4
 8006300:	4620      	mov	r0, r4
 8006302:	4629      	mov	r1, r5
 8006304:	f7fa f890 	bl	8000428 <__adddf3>
 8006308:	4604      	mov	r4, r0
 800630a:	460d      	mov	r5, r1
 800630c:	e022      	b.n	8006354 <scalbn+0x94>
 800630e:	460b      	mov	r3, r1
 8006310:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006314:	3936      	subs	r1, #54	@ 0x36
 8006316:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800631a:	4296      	cmp	r6, r2
 800631c:	dd0d      	ble.n	800633a <scalbn+0x7a>
 800631e:	2d00      	cmp	r5, #0
 8006320:	a11d      	add	r1, pc, #116	@ (adr r1, 8006398 <scalbn+0xd8>)
 8006322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006326:	da02      	bge.n	800632e <scalbn+0x6e>
 8006328:	a11d      	add	r1, pc, #116	@ (adr r1, 80063a0 <scalbn+0xe0>)
 800632a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800632e:	a31a      	add	r3, pc, #104	@ (adr r3, 8006398 <scalbn+0xd8>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7f9 ff48 	bl	80001c8 <__aeabi_dmul>
 8006338:	e7e6      	b.n	8006308 <scalbn+0x48>
 800633a:	1872      	adds	r2, r6, r1
 800633c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006340:	428a      	cmp	r2, r1
 8006342:	dcec      	bgt.n	800631e <scalbn+0x5e>
 8006344:	2a00      	cmp	r2, #0
 8006346:	dd08      	ble.n	800635a <scalbn+0x9a>
 8006348:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800634c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006350:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006354:	ec45 4b10 	vmov	d0, r4, r5
 8006358:	bd70      	pop	{r4, r5, r6, pc}
 800635a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800635e:	da08      	bge.n	8006372 <scalbn+0xb2>
 8006360:	2d00      	cmp	r5, #0
 8006362:	a10b      	add	r1, pc, #44	@ (adr r1, 8006390 <scalbn+0xd0>)
 8006364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006368:	dac1      	bge.n	80062ee <scalbn+0x2e>
 800636a:	a10f      	add	r1, pc, #60	@ (adr r1, 80063a8 <scalbn+0xe8>)
 800636c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006370:	e7bd      	b.n	80062ee <scalbn+0x2e>
 8006372:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006376:	3236      	adds	r2, #54	@ 0x36
 8006378:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800637c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006380:	4620      	mov	r0, r4
 8006382:	4b0d      	ldr	r3, [pc, #52]	@ (80063b8 <scalbn+0xf8>)
 8006384:	4629      	mov	r1, r5
 8006386:	2200      	movs	r2, #0
 8006388:	e7d4      	b.n	8006334 <scalbn+0x74>
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w
 8006390:	c2f8f359 	.word	0xc2f8f359
 8006394:	01a56e1f 	.word	0x01a56e1f
 8006398:	8800759c 	.word	0x8800759c
 800639c:	7e37e43c 	.word	0x7e37e43c
 80063a0:	8800759c 	.word	0x8800759c
 80063a4:	fe37e43c 	.word	0xfe37e43c
 80063a8:	c2f8f359 	.word	0xc2f8f359
 80063ac:	81a56e1f 	.word	0x81a56e1f
 80063b0:	43500000 	.word	0x43500000
 80063b4:	ffff3cb0 	.word	0xffff3cb0
 80063b8:	3c900000 	.word	0x3c900000
 80063bc:	00000000 	.word	0x00000000

080063c0 <floor>:
 80063c0:	ec51 0b10 	vmov	r0, r1, d0
 80063c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80063d0:	2e13      	cmp	r6, #19
 80063d2:	460c      	mov	r4, r1
 80063d4:	4605      	mov	r5, r0
 80063d6:	4680      	mov	r8, r0
 80063d8:	dc34      	bgt.n	8006444 <floor+0x84>
 80063da:	2e00      	cmp	r6, #0
 80063dc:	da17      	bge.n	800640e <floor+0x4e>
 80063de:	a332      	add	r3, pc, #200	@ (adr r3, 80064a8 <floor+0xe8>)
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f7fa f820 	bl	8000428 <__adddf3>
 80063e8:	2200      	movs	r2, #0
 80063ea:	2300      	movs	r3, #0
 80063ec:	f7fa fa50 	bl	8000890 <__aeabi_dcmpgt>
 80063f0:	b150      	cbz	r0, 8006408 <floor+0x48>
 80063f2:	2c00      	cmp	r4, #0
 80063f4:	da55      	bge.n	80064a2 <floor+0xe2>
 80063f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80063fa:	432c      	orrs	r4, r5
 80063fc:	2500      	movs	r5, #0
 80063fe:	42ac      	cmp	r4, r5
 8006400:	4c2b      	ldr	r4, [pc, #172]	@ (80064b0 <floor+0xf0>)
 8006402:	bf08      	it	eq
 8006404:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006408:	4621      	mov	r1, r4
 800640a:	4628      	mov	r0, r5
 800640c:	e023      	b.n	8006456 <floor+0x96>
 800640e:	4f29      	ldr	r7, [pc, #164]	@ (80064b4 <floor+0xf4>)
 8006410:	4137      	asrs	r7, r6
 8006412:	ea01 0307 	and.w	r3, r1, r7
 8006416:	4303      	orrs	r3, r0
 8006418:	d01d      	beq.n	8006456 <floor+0x96>
 800641a:	a323      	add	r3, pc, #140	@ (adr r3, 80064a8 <floor+0xe8>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7fa f802 	bl	8000428 <__adddf3>
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	f7fa fa32 	bl	8000890 <__aeabi_dcmpgt>
 800642c:	2800      	cmp	r0, #0
 800642e:	d0eb      	beq.n	8006408 <floor+0x48>
 8006430:	2c00      	cmp	r4, #0
 8006432:	bfbe      	ittt	lt
 8006434:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006438:	4133      	asrlt	r3, r6
 800643a:	18e4      	addlt	r4, r4, r3
 800643c:	ea24 0407 	bic.w	r4, r4, r7
 8006440:	2500      	movs	r5, #0
 8006442:	e7e1      	b.n	8006408 <floor+0x48>
 8006444:	2e33      	cmp	r6, #51	@ 0x33
 8006446:	dd0a      	ble.n	800645e <floor+0x9e>
 8006448:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800644c:	d103      	bne.n	8006456 <floor+0x96>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	f7f9 ffe9 	bl	8000428 <__adddf3>
 8006456:	ec41 0b10 	vmov	d0, r0, r1
 800645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006462:	f04f 37ff 	mov.w	r7, #4294967295
 8006466:	40df      	lsrs	r7, r3
 8006468:	4207      	tst	r7, r0
 800646a:	d0f4      	beq.n	8006456 <floor+0x96>
 800646c:	a30e      	add	r3, pc, #56	@ (adr r3, 80064a8 <floor+0xe8>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f7f9 ffd9 	bl	8000428 <__adddf3>
 8006476:	2200      	movs	r2, #0
 8006478:	2300      	movs	r3, #0
 800647a:	f7fa fa09 	bl	8000890 <__aeabi_dcmpgt>
 800647e:	2800      	cmp	r0, #0
 8006480:	d0c2      	beq.n	8006408 <floor+0x48>
 8006482:	2c00      	cmp	r4, #0
 8006484:	da0a      	bge.n	800649c <floor+0xdc>
 8006486:	2e14      	cmp	r6, #20
 8006488:	d101      	bne.n	800648e <floor+0xce>
 800648a:	3401      	adds	r4, #1
 800648c:	e006      	b.n	800649c <floor+0xdc>
 800648e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006492:	2301      	movs	r3, #1
 8006494:	40b3      	lsls	r3, r6
 8006496:	441d      	add	r5, r3
 8006498:	4545      	cmp	r5, r8
 800649a:	d3f6      	bcc.n	800648a <floor+0xca>
 800649c:	ea25 0507 	bic.w	r5, r5, r7
 80064a0:	e7b2      	b.n	8006408 <floor+0x48>
 80064a2:	2500      	movs	r5, #0
 80064a4:	462c      	mov	r4, r5
 80064a6:	e7af      	b.n	8006408 <floor+0x48>
 80064a8:	8800759c 	.word	0x8800759c
 80064ac:	7e37e43c 	.word	0x7e37e43c
 80064b0:	bff00000 	.word	0xbff00000
 80064b4:	000fffff 	.word	0x000fffff

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
